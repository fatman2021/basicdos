Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-1
                                                            

                                 
                                ; 
                                ; Reversed-engineered OEM.ASM, courtesy of Mich
				al Necasek 2020-07-13 
                                ; 
 0000                           DSEG    SEGMENT PUBLIC 'DATASG' 
                                 
                                ; Defined elsewhere 
                                EXTRN   CSAVEA:WORD,CSAVEM:WORD 
                                 
                                ; Data defined by the OEM module 
                                 
 0000  00                       var_630 db      0       ; Saved video mode 
 0001  0726 R                   CBKINT  dw      offset  CTLBRK 
 0003  0000                     CBRKSG  dw      0 
 0005  0704 R                           dw      offset  TIMISR 
 0007  0000                     TIMRSG  dw      0 
 0009  00                       var_639 db      0       ; Currently selected vi
				deo page 
 000A  00                       var_63a db      0 
 000B  50                       var_63b db      80      ; Screen width in colum
				ns (40/80) 
 000C  00                       var_63c db      0 
 000D  00                       var_63d db      0       ; Currently visible vid
				eo page 
 000E  00                       var_63e db      0       ; Initial/saved number 
				of columns 
 000F  00                       var_63f db      0       ; Currently set video m
				ode 
 0010  00                       var_640 db      0 
 0011  00                       var_641 db      0 
 0012  00                       var_642 db      0 
 0013  0707                     var_643 dw      0707h   ; Cursor shape 
 0015  07                       var_645 db      7       ; Saved text attributes
				 
 0016  07                       var_646 db      7       ; Current text attribut
				es 
 0017  0000                     var_647 dw      0       ; Current video memory 
				offset 
 0019  0000                     var_649 dw      0       ; Screen width in pixel
				s? 
 001B  00                       var_64b db      0       ; Current character col
				umn? 
 001C  00                       var_64c db      0 
 001D  00                       var_64d db      0 
 001E  0000                     var_64e dw      0 
 0020  00                       var_650 db      0 
 0021  00                               db      0 
 0022  06                       var_652 db      6 
 0023  05                               db      5 
 0024  01                               db      1 
 0025  06                       var_655 db      6 
 0026  0A                               db      10 
 0027  01                               db      1 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-2
                                                            

 0028  00                               db      0       ; Likely unused 
 0029  00                               db      0 
 002A  00                               db      0 
 002B  00                               db      0 
 002C  00                               db      0 
 002D  00                               db      0 
 002E  00                               db      0 
 002F  00                               db      0 
 0030  03                       var_660 db      3 
 0031  0000                     var_661 dw      0       ; Current offset into s
				creen? 
 0033  0000                     var_663 dw      0       ; Some other offset? 
 0035  00                       var_665 db      0 
 0036  00                       var_666 db      0 
 0037  0000                     var_667 dw      0       ; Function pointer 
 0039  00                       var_669 db      0 
                                 
 003A                           DSEG    ENDS 
                                 
 0000                           CSEG	SEGMENT PUBLIC 'CODESG' 
                                	ASSUME  CS:CSEG 
                                 
                                ; GW-BASIC routines that OEM code calls into. 
                                 
                                EXTRN   KYBCLR:NEAR 
                                EXTRN   SCNCLR:NEAR 
                                EXTRN   SCNSWI:NEAR 
                                EXTRN   GRPINI:NEAR 
                                 
                                EXTRN   SPCTAB:NEAR 
                                EXTRN   SNERR:NEAR 
                                 
                                PUBLIC  SEGINI, GETHED, PRTMAP, GETFBC, SETFBC,
				 GRPSIZ, POKFLT, PEKFLT 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0000                           SEGINI		proc near 
 0000  1E                       		push	ds 
 0001  33 C0                    		xor	ax, ax 
 0003  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 0005  8C C8                    		mov	ax, cs 
 0007  A3 006E                  		mov	ds:6Eh,	ax	; Adjust segment for vector 1B
				h 
 000A  A3 0072                  		mov	ds:72h,	ax	; Adjust segment for vector 1C
				h 
 000D  A3 0092                  		mov	ds:92h,	ax	; Adjust segment for vector 24
				h 
 0010  8C C0                    		mov	ax, es 
 0012  A3 0510                  		mov	ds:510h, ax	; Stash	away BASIC data	segme
				nt 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-3
                                                            

 0015  1F                       		pop	ds 
                                		assume ds:nothing 
 0016  C3                       		ret 
                                SEGINI		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
 0017  0D 0A                    OEMHED		db 0Dh,0Ah 
 0019  4F 53 2F 32 20 4D 75     		db 'OS/2 Museum BASIC',0Dh,0Ah 
       73 65 75 6D 20 42 41     
       53 49 43 0D 0A           
 002C  56 65 72 73 69 6F 6E     		db 'Version 1.0',0Dh,0Ah 
       20 31 2E 30 0D 0A        
 0039  0D 0A                    		db 0Dh,0Ah 
 003B  28 43 29 20 43 6F 70     		db '(C) Copyright OS/2 Museum 2020' 
       79 72 69 67 68 74 20     
       4F 53 2F 32 20 4D 75     
       73 65 75 6D 20 32 30     
       32 30                    
 0059  00                                       db 0 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 005A                           GETHED		proc near 
 005A  3A C0                    		cmp	al, al 
 005C  BB 0017 R                		mov	bx, offset OEMHED 
 005F  C3                       		ret 
                                GETHED		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Map print function/output character codes 
                                 
 0060                           PRTMAP		proc near 
 0060  3C FF                    		cmp	al, 0FFh 
 0062  75 09                    		jnz	short loc_5044 
 0064  80 3E 000A R 00          		cmp	byte ptr ds:var_63a, 0 
 0069  74 18                    		jz	short BADMAP 
 006B  B0 20                    		mov	al, ' ' 
 006D                           loc_5044: 
 006D  3C 07                    		cmp	al, 7		; BEL 
 006F  74 12                    		jz	short BADMAP 
 0071  3C 20                    		cmp	al, ' ' 
 0073  73 22                    		jnb	short loc_506E 
 0075  3C 09                    		cmp	al, 9 
 0077  72 1E                    		jb	short loc_506E 
 0079  74 21                    		jz	short loc_5073 
 007B  3C 0E                    		cmp	al, 0Eh 
 007D  72 04                    		jb	short BADMAP 
 007F  3C 1C                    		cmp	al, 1Ch 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-4
                                                            

 0081  72 14                    		jb	short loc_506E 
 0083                           BADMAP: 
 0083  B4 FF                    		mov	ah, 0FFh 
 0085  0A C0                    		or	al, al 
 0087  F9                       		stc 
 0088  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0089                           loc_5060: 
 0089  B0 20                    		mov	al, ' ' 
 008B  80 3E 000A R 00          		cmp	byte ptr ds:var_63a, 0 
 0090  75 05                    		jnz	short loc_506E 
 0092  0A C0                    		or	al, al 
 0094  B0 00                    		mov	al, 0 
 0096  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0097                           loc_506E: 
 0097  0A C0                    		or	al, al 
 0099  74 EE                    		jz	short loc_5060 
 009B  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 009C                           loc_5073: 
 009C  B0 0F                    		mov	al, 0Fh 
 009E  EB E3                    		jmp	short BADMAP 
                                PRTMAP		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Get foreground/background colors 
                                ; On entry: 
                                ;   CF set  : Graphics 
                                ;   CF clear: Text mode 
                                 
 00A0                           GETFBC		proc near 
 00A0  72 15                    		jb	short TXTATR 
 00A2  A0 0016 R                		mov	al, ds:var_646 
 00A5  8A D8                    		mov	bl, al 
 00A7  D0 EB                    		shr	bl, 1 
 00A9  D0 EB                    		shr	bl, 1 
 00AB  D0 EB                    		shr	bl, 1 
 00AD  D0 EB                    		shr	bl, 1 
 00AF  25 008F                  		and	ax, 8Fh 
 00B2  81 E3 0007               		and	bx, 7 
 00B6  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-5
                                                            

 00B7                           TXTATR: 
 00B7  33 C0                    		xor	ax, ax 
 00B9  8B D8                    		mov	bx, ax 
 00BB  B0 03                    		mov	al, 3 
 00BD  C3                       		ret 
                                GETFBC		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
 00BE  00                       byte_5095	db 0			; DATA XREF: SETFBC+13r SETFB
				C+19w ... 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Set foreground/background colors 
                                 
 00BF                           SETFBC		proc near 
 00BF  50                       		push	ax 
 00C0  53                       		push	bx 
 00C1  80 3E 000A R 00          		cmp	byte ptr ds:var_63a, 0 
 00C6  75 2F                    		jnz	short loc_50CE 
 00C8  D0 E3                    		shl	bl, 1 
 00CA  D0 E3                    		shl	bl, 1 
 00CC  D0 E3                    		shl	bl, 1 
 00CE  D0 E3                    		shl	bl, 1 
 00D0  0A C3                    		or	al, bl 
 00D2  2E: 80 3E 00BE R 00      		cmp	cs:byte_5095, 0 
 00D8  2E: C6 06 00BE R 00      		mov	cs:byte_5095, 0 
 00DE  A0 0015 R                		mov	al, ds:var_645 
 00E1  75 11                    		jnz	short loc_50CB 
 00E3  2E: C6 06 00BE R 01      		mov	cs:byte_5095, 1 
 00E9  B0 70                    		mov	al, 70h	; 'p' 
 00EB  80 3E 0015 R 07          		cmp	byte ptr ds:var_645, 7 
 00F0  74 02                    		jz	short loc_50CB 
 00F2  B0 07                    		mov	al, 7 
 00F4                           loc_50CB: 
 00F4  A2 0016 R                		mov	ds:var_646, al 
 00F7                           loc_50CE: 
 00F7  5B                       		pop	bx 
 00F8  58                       		pop	ax 
 00F9  C3                       		ret 
                                SETFBC		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
 00FA  8A 0E 000B R             		mov	cl, ds:var_63b 
 00FE  B5 00                    		mov	ch, 0 
 0100  BA 0019                  		mov	dx, 25 
 0103  C3                       		ret 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-6
                                                            

                                ; Get screen pixel dimensions 
                                 
 0104                           GRPSIZ		proc near 
 0104  8B 0E 0019 R             		mov	cx, ds:var_649 
 0108  0B C9                    		or	cx, cx 
 010A  74 01                    		jz	short HEIGHT 
 010C  49                       		dec	cx		; Decrement unless zero 
 010D                           HEIGHT: 
 010D  BA 00C7                  		mov	dx, 199 
 0110  C3                       		ret 
                                GRPSIZ		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
 0111  00                       PEKPOK		db 0                    ; Is it	a PEEK 
				(0) or POKE (255)? 
 0112  002E                     word_50E9	dw 2Eh 
 0114  002F                     		dw 2Fh 
 0116  0347                     		dw 347h 
 0118  0348                     		dw 348h 
 011A  0030                     		dw 30h 
 011C  0031                     		dw 31h 
 011E  0358                     		dw 358h 
 0120  0359                     		dw 359h 
 0122  004E                     		dw 4Eh 
 0124  002C                     		dw 2Ch 
 0126  002D                     		dw 2Dh 
 0128  006A                     		dw 6Ah 
 012A  01BB R                   off_5101	dw offset loc_5192 
 012C  0153                     		dw 153h 
 012E  0152                     		dw 152h 
 0130  0646                     		dw 646h         ; var_646 ??? 
 0132  048F                     		dw 48Fh 
 0134  048E                     		dw 48Eh 
 0136  0157                     		dw 157h 
 0138  0156                     		dw 156h 
 013A  047E                     		dw 47Eh 
 013C  047D                     		dw 47Dh 
 013E  0155                     		dw 155h 
 0140  0154                     		dw 154h 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Filter PEEKs for "special" addresses 
                                 
 0142                           PEKFLT		proc near 
 0142  50                       		push	ax 
 0143  51                       		push	cx 
 0144  53                       		push	bx 
 0145  52                       		push	dx 
 0146  8B D3                    		mov	dx, bx 
 0148  2E: C6 06 0111 R 00      		mov	cs:PEKPOK, 0	; It's a peek 
 014E  EB 0A                    		jmp	short DOPFLT 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-7
                                                            

                                PEKFLT		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Filter POKEs for "special" addresses 
                                ; On entry: Address in ES:DX 
                                ; On exit : ZF clear if	poke should be done 
                                 
 0150                           POKFLT		proc near 
 0150  50                       		push	ax 
 0151  51                       		push	cx 
 0152  53                       		push	bx 
 0153  52                       		push	dx 
 0154  2E: C6 06 0111 R FF      		mov	cs:PEKPOK, -1	; It's a poke 
 015A                           DOPFLT: 
 015A  57                       		push	di 
 015B  06                       		push	es 
 015C  FC                       		cld 
 015D  8C D8                    		mov	ax, ds 
 015F  8C C1                    		mov	cx, es 
 0161  3B C8                    		cmp	cx, ax		; Is it	the BASIC data segment? 
 0163  74 18                    		jz	short BASDAT 
 0165  83 F9 00                 		cmp	cx, 0		; Zero segment? 
 0168  75 55                    		jnz	short PFLTX 
 016A  81 FA 041A               		cmp	dx, 41Ah	; Is it	the pointer into the key
				board buffer? 
 016E  75 4F                    		jnz	short PFLTX 
 0170  2E: 80 3E 0111 R FF      		cmp	cs:PEKPOK, -1	; Is it	a POKE? 
 0176  75 47                    		jnz	short PFLTX 
 0178  E8 0000 E                		call	KYBCLR 
 017B  EB 42                    		jmp	short PFLTX 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 017D                           BASDAT: 
 017D  BF 0112 R                		mov	di, offset word_50E9 
 0180  8B C2                    		mov	ax, dx 
 0182  B9 0018                  		mov	cx, 18h 
 0185  D1 E9                    		shr	cx, 1 
 0187  0E                       		push	cs 
 0188  07                       		pop	es 
                                		assume es:CSEG 
 0189  F2/ AF                   		repne scasw 
 018B  75 32                    		jnz	short PFLTX 
 018D  D1 E1                    		shl	cx, 1 
 018F  BB 012A R                		mov	bx, offset off_5101 
 0192  03 D9                    		add	bx, cx 
 0194  2E: 8B 07                		mov	ax, cs:[bx] 
 0197  07                       		pop	es 
                                		assume es:nothing 
 0198  5F                       		pop	di 
 0199  5A                       		pop	dx 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-8
                                                            

 019A  5B                       		pop	bx 
 019B  83 F9 02                 		cmp	cx, 2 
 019E  72 18                    		jb	short loc_518F 
 01A0  2E: 80 3E 0111 R 00      		cmp	cs:PEKPOK, 0	; Is it	a PEEK? 
 01A6  74 08                    		jz	short loc_5187 
 01A8  8B D0                    		mov	dx, ax 
 01AA  0D FFFF                  		or	ax, 0FFFFh 
 01AD  59                       		pop	cx 
 01AE  58                       		pop	ax 
 01AF  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 01B0                           loc_5187: 
 01B0  8B D8                    		mov	bx, ax 
 01B2  0D FFFF                  		or	ax, 0FFFFh 
 01B5  59                       		pop	cx 
 01B6  58                       		pop	ax 
 01B7  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 01B8                           loc_518F: 
 01B8  59                       		pop	cx 
 01B9  FF E0                    		jmp	ax 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 01BB                           loc_5192: 
 01BB  33 C0                    		xor	ax, ax 
 01BD  58                       		pop	ax 
 01BE  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 01BF                           PFLTX: 
 01BF  07                       		pop	es 
 01C0  5F                       		pop	di 
 01C1  5A                       		pop	dx 
 01C2  5B                       		pop	bx 
 01C3  59                       		pop	cx 
 01C4  58                       		pop	ax 
 01C5  C3                       		ret 
                                POKFLT		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
                                ; Start of another module? 
                                ;		align 4 
                                 
                                PUBLIC  SETCBF, INICOM, RECCOM, SNDCOM, STACOM,
				 TRMCOM, SNDLPT 
                                 
 01C6  2580                     BAUDTB  	dw 9600 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-9
                                                            

 01C8  12C0                     		dw 4800 
 01CA  0960                     		dw 2400 
 01CC  0708                     		dw 1800 
 01CE  04B0                     		dw 1200 
 01D0  0258                     		dw 600 
 01D2  012C                     		dw 300 
 01D4  0096                     		dw 150 
 01D6  006E                     		dw 110 
 01D8  004B                     		dw 75 
 01DA  000C                     		dw 12 
 01DC  0018                     		dw 24 
 01DE  0030                     		dw 48 
 01E0  0040                     		dw 64 
 01E2  0060                     		dw 96 
 01E4  00C0                     		dw 192 
 01E6  0180                     		dw 384 
 01E8  0300                     		dw 768 
 01EA  0417                     		dw 1047 
 01EC  0600                     		dw 1536 
 01EE  08                       masks?		db 8 
 01EF  18                       		db 18h 
 01F0  28                       		db 28h 
 01F1  38                       		db 38h 
 01F2  01F6 R                   COMTBL		dw offset CM1CTL 
 01F4  0218 R                   		dw offset CM2CTL 
 01F6  00                       CM1CTL		db    0		; Control structure for	first 
				COM port 
 01F7  00                       		db    0 
 01F8  00                       		db    0 
 01F9  00                       		db    0 
 01FA  00                       		db    0 
 01FB  00                       		db    0 
 01FC  00                       		db    0 
 01FD  00                       		db    0 
 01FE  00                       		db    0 
 01FF  00                       		db    0 
 0200  00                       		db    0 
 0201  00                       		db    0 
 0202  00                       		db    0 
 0203  00                       		db    0 
 0204  00                       		db    0 
 0205  00                       		db    0 
 0206  00                       		db    0 
 0207  00                       		db    0 
 0208  00                       		db    0 
 0209  00                       		db    0 
 020A  00                       		db    0 
 020B  00                       		db    0 
 020C  00                       		db    0 
 020D  00                       		db    0 
 020E  00                       		db    0 
 020F  00                       		db    0 
 0210  00                       		db    0 
 0211  00                       		db    0 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-10
                                                            

 0212  00                       		db    0 
 0213  00                       		db    0 
 0214  00                       		db    0 
 0215  00                       		db    0 
 0216  0246 R                   		dw offset CM1ISR 
 0218  00                       CM2CTL		db    0         ; Control structure for
					second COM port 
 0219  00                       		db    0 
 021A  00                       		db    0 
 021B  00                       		db    0 
 021C  00                       		db    0 
 021D  00                       		db    0 
 021E  00                       		db    0 
 021F  00                       		db    0 
 0220  00                       		db    0 
 0221  00                       		db    0 
 0222  00                       		db    0 
 0223  00                       		db    0 
 0224  00                       		db    0 
 0225  00                       		db    0 
 0226  00                       		db    0 
 0227  00                       		db    0 
 0228  00                       		db    0 
 0229  00                       		db    0 
 022A  00                       		db    0 
 022B  00                       		db    0 
 022C  00                       		db    0 
 022D  00                       		db    0 
 022E  00                       		db    0 
 022F  00                       		db    0 
 0230  00                       		db    0 
 0231  00                       		db    0 
 0232  00                       		db    0 
 0233  00                       		db    0 
 0234  00                       		db    0 
 0235  00                       		db    0 
 0236  00                       		db    0 
 0237  00                       		db    0 
 0238  024C R                   		dw offset CM2ISR 
 023A  0000                     CBFSEG		dw 0 
 023C  0000                     CBFSIZ		dw 0 
 023E  0329 R                   ISRDSP		dw offset ISRFN0 
 0240  02F0 R                   		dw offset ISRFN1 
 0242  026E R                   		dw offset ISRFN2 
 0244  031D R                   		dw offset ISRFN3 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0246                           CM1ISR: 
 0246  53                       		push	bx 
 0247  BB 01F6 R                		mov	bx, offset CM1CTL 
 024A  EB 04                    		jmp	short COMISR 
                                 
                                ; =============== S U B	R O U T	I N E =========
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-11
                                                            

				============================== 
                                 
                                 
 024C                           CM2ISR		proc far 
 024C  53                       		push	bx 
 024D  BB 0218 R                		mov	bx, offset CM2CTL 
                                 
 0250                           COMISR: 
 0250  51                       		push	cx 
 0251  52                       		push	dx 
 0252  56                       		push	si 
 0253  57                       		push	di 
 0254  1E                       		push	ds 
 0255  0E                       		push	cs 
 0256  1F                       		pop	ds 
                                		assume ds:CSEG 
 0257  50                       		push	ax 
 0258  C6 47 1D 00              		mov	byte ptr [bx+1Dh], 0 
 025C  8B 17                    		mov	dx, [bx] 
 025E  42                       		inc	dx 
 025F  42                       		inc	dx 
 0260  EC                       		in	al, dx 
 0261                           loc_523B: 
 0261  24 06                    		and	al, 6 
 0263  FE 47 1D                 		inc	byte ptr [bx+1Dh] 
 0266  B4 00                    		mov	ah, 0 
 0268  8B F0                    		mov	si, ax 
 026A  FF A4 023E R             		jmp	ISRDSP[si] 
 026E                           ISRFN2: 
 026E  4A                       		dec	dx 
 026F  4A                       		dec	dx 
 0270  EC                       		in	al, dx 
 0271  8B 77 0A                 		mov	si, [bx+0Ah] 
 0274  46                       		inc	si 
 0275  3B 36 023C R             		cmp	si, CBFSIZ 
 0279  76 02                    		jbe	short loc_5257 
 027B  33 F6                    		xor	si, si 
 027D                           loc_5257: 
 027D  3B 77 08                 		cmp	si, [bx+8] 
 0280  75 06                    		jnz	short loc_5262 
 0282  80 4F 18 01              		or	byte ptr [bx+18h], 1 
 0286  EB 17                    		jmp	short COMEOI 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0288                           loc_5262:				; CODE XREF: CM2ISR+34j 
 0288  C6 06 1307 R 01          		mov	BYTE PTR ISREVT, 1 
 028D  89 77 0A                 		mov	[bx+0Ah], si 
 0290  1E                       		push	ds 
 0291  53                       		push	bx 
 0292  8B 5F 14                 		mov	bx, [bx+14h] 
 0295  8B 3E 023A R             		mov	di, CBFSEG 
 0299  8E DF                    		mov	ds, di 
                                		assume ds:nothing 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-12
                                                            

 029B  88 00                    		mov	[bx+si], al 
 029D  5B                       		pop	bx 
 029E  1F                       		pop	ds 
 029F                           COMEOI: 
 029F  B0 20                    		mov	al, 20h		; Send EOI 
 02A1  E6 20                    		out	20h, al		; Interrupt controller,	8259A. 
 02A3  8B 17                    		mov	dx, [bx] 
 02A5  42                       		inc	dx 
 02A6  42                       		inc	dx 
 02A7  EC                       		in	al, dx 
 02A8  A8 01                    		test	al, 1 
 02AA  75 3B                    		jnz	short ISRX 
 02AC  80 7F 1D 08              		cmp	byte ptr [bx+1Dh], 8 
 02B0  72 AF                    		jb	short loc_523B 
 02B2  80 4F 19 01              		or	byte ptr [bx+19h], 1 
 02B6  1E                       		push	ds 
 02B7  33 C0                    		xor	ax, ax 
 02B9  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 02BB  2E: 8B 77 1E             		mov	si, cs:[bx+1Eh]	; Messing with the IVT! 
 02BF  2E: 8B 47 10             		mov	ax, cs:[bx+10h] 
 02C3  89 04                    		mov	[si], ax 
 02C5  2E: 8B 47 12             		mov	ax, cs:[bx+12h] 
 02C9  89 44 02                 		mov	[si+2],	ax 
 02CC  33 C0                    		xor	ax, ax 
 02CE  2E: 89 47 10             		mov	cs:[bx+10h], ax 
 02D2  2E: 89 47 12             		mov	cs:[bx+12h], ax 
 02D6  1F                       		pop	ds 
                                		assume ds:nothing 
 02D7  42                       		inc	dx 
 02D8  42                       		inc	dx 
 02D9  B0 00                    		mov	al, 0		; Read interrupt mask 
 02DB  EE                       		out	dx, al 
 02DC  E4 21                    		in	al, 21h		; Interrupt controller,	8259A. 
 02DE  0A 47 1C                 		or	al, [bx+1Ch]	; Mask this port's IRQ again 
 02E1  E6 21                    		out	21h, al		; Interrupt controller,	8259A. 
 02E3  B0 20                    		mov	al, 20h		; One more EOI for good	measure?
				 
 02E5  E6 20                    		out	20h, al		; Interrupt controller,	8259A. 
 02E7                           ISRX: 
 02E7  58                       		pop	ax 
 02E8  1F                       		pop	ds 
 02E9  5F                       		pop	di 
 02EA  5E                       		pop	si 
 02EB  5A                       		pop	dx 
 02EC  59                       		pop	cx 
 02ED  5B                       		pop	bx 
 02EE  FB                       		sti 
 02EF  CF                       		iret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 02F0                           ISRFN1: 
 02F0  4A                       		dec	dx 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-13
                                                            

 02F1  8B 77 0C                 		mov	si, [bx+0Ch] 
 02F4  3B 77 0E                 		cmp	si, [bx+0Eh] 
 02F7  74 1F                    		jz	short loc_52F2 
 02F9  46                       		inc	si 
 02FA  81 FE 0080               		cmp	si, 80h	; '�' 
 02FE  76 02                    		jbe	short loc_52DC 
 0300  33 F6                    		xor	si, si 
 0302                           loc_52DC: 
 0302  89 77 0C                 		mov	[bx+0Ch], si 
 0305  53                       		push	bx 
 0306  1E                       		push	ds 
 0307  8B 5F 16                 		mov	bx, [bx+16h] 
 030A  8B 3E 023A R             		mov	di, ds:CBFSEG 
 030E  8E DF                    		mov	ds, di 
 0310  8A 00                    		mov	al, [bx+si] 
 0312  1F                       		pop	ds 
 0313  5B                       		pop	bx 
 0314  4A                       		dec	dx 
 0315  EE                       		out	dx, al 
 0316  EB 87                    		jmp	short COMEOI 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0318                           loc_52F2: 
 0318  B0 0D                    		mov	al, 0Dh 
 031A  EE                       		out	dx, al 
 031B  EB 82                    		jmp	short COMEOI 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 031D                           ISRFN3: 
 031D  83 C2 03                 		add	dx, 3 
 0320  EC                       		in	al, dx 
 0321  24 0A                    		and	al, 0Ah 
 0323  08 47 18                 		or	[bx+18h], al 
 0326  E9 029F R                		jmp	COMEOI 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0329                           ISRFN0: 
 0329  83 C2 04                 		add	dx, 4 
 032C  EC                       		in	al, dx 
 032D  83 EA 05                 		sub	dx, 5 
 0330  8A 4F 1A                 		mov	cl, [bx+1Ah] 
 0333  F6 D0                    		not	al 
 0335  22 C1                    		and	al, cl 
 0337  8A 67 19                 		mov	ah, [bx+19h] 
 033A  8A EC                    		mov	ch, ah 
 033C  80 E4 F0                 		and	ah, 0F0h 
 033F  3A E0                    		cmp	ah, al 
 0341  74 13                    		jz	short loc_5330 
 0343  80 E5 0F                 		and	ch, 0Fh 
 0346  0A C5                    		or	al, ch 
 0348  88 47 19                 		mov	[bx+19h], al 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-14
                                                            

 034B  22 C1                    		and	al, cl 
 034D  74 0A                    		jz	short loc_5333 
 034F  80 4F 19 02              		or	byte ptr [bx+19h], 2 
 0353  B0 0D                    		mov	al, 0Dh 
 0355  EE                       		out	dx, al 
 0356                           loc_5330: 
 0356  E9 029F R                		jmp	COMEOI 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0359                           loc_5333: 
 0359  80 67 19 FD              		and	byte ptr [bx+19h], 0FDh 
 035D  B0 0F                    		mov	al, 0Fh 
 035F  EE                       		out	dx, al 
 0360  E9 029F R                		jmp	COMEOI 
                                CM2ISR		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Set OEM COM Buffer (size & location) 
                                ; On entry: CX = COM buffer segment 
                                ;	    DX = COM buffer size if ZF set 
                                ;	    ZF set   = use buffer size in DX 
                                ;	    ZF clear = use default buffer size 
                                ; 
                                ; On return: DX	= COM buffer size 
                                ;	     CF	set on error 
                                 
 0363                           SETCBF		proc near		; CODE XREF: MAPCLC+17p 
 0363  53                       		push	bx 
 0364  50                       		push	ax 
 0365  1E                       		push	ds 
 0366  56                       		push	si 
 0367  2E: 89 0E 023A R         		mov	cs:CBFSEG, cx 
 036C  75 03                    		jnz	short HAVBSZ	; ZF set if COM	buffer size 
				was 
                                					; given	on the command line (/C:xxx) 
 036E  BA 0100                  		mov	dx, 256		; Default COM buffer size 
                                 
 0371                           HAVBSZ:					; CODE XREF: SETCBF+9j 
 0371  33 F6                    		xor	si, si 
 0373  0B D2                    		or	dx, dx 
 0375  74 69                    		jz	short SCBFX	; Bail if zero buffer size 
 0377  81 FA 7F70               		cmp	dx, 7F70h	; Buffer size too big? 
 037B  76 03                    		jbe	short CKCOM1 
 037D  BA 7F70                  		mov	dx, 7F70h	; Maximum COM buffer size 
                                 
 0380                           CKCOM1:					; CODE XREF: SETCBF+18j 
 0380  2E: 89 16 023C R         		mov	cs:CBFSIZ, dx 
 0385  42                       		inc	dx 
 0386  8E DE                    		mov	ds, si 
                                		assume ds:nothing 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-15
                                                            

 0388  BB 01F6 R                		mov	bx, offset CM1CTL 
 038B  A1 0400                  		mov	ax, ds:400h	; Read COM1 base from BDA 
 038E  3D 03F8                  		cmp	ax, 3F8h	; Does it match	the first UART? 
 0391  75 27                    		jnz	short CKCOM2 
 0393  2E: C7 47 1E 0030        		mov	word ptr cs:[bx+1Eh], 30h ; Address of IR
				Q4 vector 
 0399  2E: C6 47 1B EF          		mov	byte ptr cs:[bx+1Bh], 0EFh ; IRQ4 mask 
 039E  2E: C6 47 1C 10          		mov	byte ptr cs:[bx+1Ch], 10h ; IRQ4 bit 
 03A3  2E: 89 07                		mov	cs:[bx], ax 
 03A6  2E: 89 77 16             		mov	cs:[bx+16h], si 
 03AA  81 C6 0081               		add	si, 81h	; '�' 
 03AE  2E: 89 77 14             		mov	cs:[bx+14h], si 
 03B2  03 F2                    		add	si, dx 
 03B4  BB 0218 R                		mov	bx, offset CM2CTL 
 03B7  A1 0402                  		mov	ax, ds:402h	; Read COM2 base from BDA 
                                 
 03BA                           CKCOM2:					; CODE XREF: SETCBF+2Ej 
 03BA  3D 02F8                  		cmp	ax, 2F8h	; Is it	the second UART? 
 03BD  75 21                    		jnz	short SCBFX 
 03BF  2E: C7 47 1E 002C        		mov	word ptr cs:[bx+1Eh], 2Ch ; Address of IR
				Q3 vector 
 03C5  2E: C6 47 1B F7          		mov	byte ptr cs:[bx+1Bh], 0F7h ; IRQ3 mask 
 03CA  2E: C6 47 1C 08          		mov	byte ptr cs:[bx+1Ch], 8	; IRQ3 bit 
 03CF  2E: 89 07                		mov	cs:[bx], ax 
 03D2  2E: 89 77 16             		mov	cs:[bx+16h], si 
 03D6  81 C6 0081               		add	si, 81h	; '�' 
 03DA  2E: 89 77 14             		mov	cs:[bx+14h], si 
 03DE  03 F2                    		add	si, dx 
                                 
 03E0                           SCBFX:					; CODE XREF: SETCBF+12j SETCBF+5Aj
				 
 03E0  8B D6                    		mov	dx, si 
 03E2  83 C2 0F                 		add	dx, 0Fh		; Round	up to next para 
 03E5  81 E2 FFF0               		and	dx, 0FFF0h 
 03E9  5E                       		pop	si 
 03EA  1F                       		pop	ds 
                                		assume ds:nothing 
 03EB  58                       		pop	ax 
 03EC  5B                       		pop	bx 
 03ED  F8                       		clc 
 03EE  C3                       		ret 
                                SETCBF		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
                                ; START	OF FUNCTION CHUNK FOR INICOM 
                                 
 03EF                           BADFNM: 
 03EF  B4 FF                    		mov	ah, -1		; Bad file name 
 03F1  E9 0515 R                		jmp	INICMX 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 03F4                           COMERR: 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-16
                                                            

 03F4  B4 FE                    		mov	ah, -2 
 03F6  E9 0515 R                		jmp	INICMX 
                                ; END OF FUNCTION CHUNK	FOR INICOM 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Machine dependent COM	OPEN routine 
                                 
 03F9                           INICOM		proc near 
                                 
 03F9  56                       		push	si 
 03FA  57                       		push	di 
 03FB  1E                       		push	ds 
 03FC  0E                       		push	cs 
 03FD  1F                       		pop	ds 
                                		assume ds:CSEG 
 03FE  8B F3                    		mov	si, bx 
 0400  FC                       		cld 
 0401  26: AC                   		lods	byte ptr es:[si] 
 0403  8A E0                    		mov	ah, al 
 0405  E8 06E6 R                		call	CMPREP 
 0408  0B D2                    		or	dx, dx 
 040A  74 E8                    		jz	short COMERR 
 040C  26: AD                   		lods	word ptr es:[si] 
 040E  BF 01C6 R                		mov	di, offset BAUDTB 
 0411  B9 000A                  		mov	cx, 0Ah 
 0414  06                       		push	es 
 0415  0E                       		push	cs 
 0416  07                       		pop	es 
                                		assume es:CSEG 
 0417  F2/ AF                   		repne scasw 
 0419  07                       		pop	es 
                                		assume es:nothing 
 041A  75 D3                    		jnz	short BADFNM 
 041C  83 C7 12                 		add	di, 12h 
 041F  83 C2 03                 		add	dx, 3 
 0422  B0 80                    		mov	al, 80h	; '�' 
 0424  EE                       		out	dx, al 
 0425  83 EA 03                 		sub	dx, 3 
 0428  8B 05                    		mov	ax, [di] 
 042A  EE                       		out	dx, al 
 042B  42                       		inc	dx 
 042C  8A C4                    		mov	al, ah 
 042E  EE                       		out	dx, al 
 042F  83 C2 02                 		add	dx, 2 
 0432  26: AC                   		lods	byte ptr es:[si] 
 0434  2C 04                    		sub	al, 4 
 0436  8A E0                    		mov	ah, al 
 0438  72 B5                    		jb	short BADFNM 
 043A  74 02                    		jz	short loc_5418 
 043C  FE C8                    		dec	al 
                                 
 043E                           loc_5418: 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-17
                                                            

 043E  3C 03                    		cmp	al, 3 
 0440  77 AD                    		ja	short BADFNM 
 0442  8A C8                    		mov	cl, al 
 0444  26: AC                   		lods	byte ptr es:[si] 
 0446  75 08                    		jnz	short loc_542A 
 0448  3C 02                    		cmp	al, 2 
 044A  74 04                    		jz	short loc_542A 
 044C  0A C0                    		or	al, al 
 044E  75 9F                    		jnz	short BADFNM 
                                 
 0450                           loc_542A: 
 0450  0A E0                    		or	ah, al 
 0452  74 9B                    		jz	short BADFNM 
 0454  FE C8                    		dec	al 
 0456  78 0B                    		js	short loc_543D 
 0458  B4 00                    		mov	ah, 0 
 045A  53                       		push	bx 
 045B  BB 01EE R                		mov	bx, offset masks? 
 045E  03 D8                    		add	bx, ax 
 0460  0A 0F                    		or	cl, [bx] 
 0462  5B                       		pop	bx 
                                 
 0463                           loc_543D: 
 0463  26: AC                   		lods	byte ptr es:[si] 
 0465  0A C0                    		or	al, al 
 0467  74 03                    		jz	short loc_5446 
 0469  80 C9 04                 		or	cl, 4 
                                 
 046C                           loc_5446: 
 046C  8A C1                    		mov	al, cl 
 046E  EE                       		out	dx, al 
 046F  26: AD                   		lods	word ptr es:[si] 
 0471  B1 00                    		mov	cl, 0 
 0473  89 47 02                 		mov	[bx+2],	ax 
 0476  0B C0                    		or	ax, ax 
 0478  74 03                    		jz	short loc_5457 
 047A  80 C9 80                 		or	cl, 80h 
                                 
 047D                           loc_5457: 
 047D  26: AD                   		lods	word ptr es:[si] 
 047F  89 47 04                 		mov	[bx+4],	ax 
 0482  0B C0                    		or	ax, ax 
 0484  74 03                    		jz	short loc_5463 
 0486  80 C9 10                 		or	cl, 10h 
                                 
 0489                           loc_5463: 
 0489  26: AD                   		lods	word ptr es:[si] 
 048B  89 47 06                 		mov	[bx+6],	ax 
 048E  0B C0                    		or	ax, ax 
 0490  74 03                    		jz	short loc_546F 
 0492  80 C9 20                 		or	cl, 20h 
                                 
 0495                           loc_546F: 
 0495  26: AC                   		lods	byte ptr es:[si] 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-18
                                                            

 0497  A8 02                    		test	al, 2 
 0499  B0 03                    		mov	al, 3 
 049B  74 02                    		jz	short loc_5479 
 049D  B0 01                    		mov	al, 1 
                                 
 049F                           loc_5479: 
 049F  42                       		inc	dx 
 04A0  EE                       		out	dx, al 
 04A1  32 C0                    		xor	al, al 
 04A3  88 4F 1A                 		mov	[bx+1Ah], cl 
 04A6  88 47 18                 		mov	[bx+18h], al 
 04A9  C7 47 08 0000            		mov	word ptr [bx+8], 0 
 04AE  C7 47 0A 0000            		mov	word ptr [bx+0Ah], 0 
 04B3  C7 47 0C 0000            		mov	word ptr [bx+0Ch], 0 
 04B8  C7 47 0E 0000            		mov	word ptr [bx+0Eh], 0 
 04BD  83 7F 10 00              		cmp	word ptr [bx+10h], 0 
 04C1  75 3F                    		jnz	short loc_54DC 
 04C3  83 EA 04                 		sub	dx, 4 
 04C6  1E                       		push	ds 
 04C7  33 C0                    		xor	ax, ax 
 04C9  8E D8                    		mov	ds, ax 
 04CB  2E: 8B 77 1E             		mov	si, cs:[bx+1Eh]	; IVT manipulation! 
 04CF  8B 04                    		mov	ax, [si] 
 04D1  2E: 89 47 10             		mov	cs:[bx+10h], ax 
 04D5  8B 44 02                 		mov	ax, [si+2] 
 04D8  2E: 89 47 12             		mov	cs:[bx+12h], ax 
 04DC  2E: 8B 47 20             		mov	ax, cs:[bx+20h] 
 04E0  89 04                    		mov	[si], ax 
 04E2  8C C8                    		mov	ax, cs 
 04E4  89 44 02                 		mov	[si+2],	ax 
 04E7  1F                       		pop	ds 
                                		assume ds:nothing 
 04E8  42                       		inc	dx 
 04E9  42                       		inc	dx 
 04EA  EC                       		in	al, dx 
 04EB  4A                       		dec	dx 
 04EC  4A                       		dec	dx 
 04ED  EC                       		in	al, dx 
 04EE  83 C2 05                 		add	dx, 5 
 04F1  EC                       		in	al, dx 
 04F2  83 EA 04                 		sub	dx, 4 
 04F5  B0 0D                    		mov	al, 0Dh 
 04F7  EE                       		out	dx, al 
 04F8  E4 21                    		in	al, 21h		; Interrupt controller,	8259A. 
 04FA  22 47 1B                 		and	al, [bx+1Bh]	; Unmask IRQ 
 04FD  E6 21                    		out	21h, al		; Interrupt controller,	8259A. 
 04FF  83 C2 03                 		add	dx, 3 
                                 
 0502                           loc_54DC: 
 0502  EC                       		in	al, dx 
 0503  0C 08                    		or	al, 8 
 0505  EE                       		out	dx, al 
 0506  42                       		inc	dx 
 0507  42                       		inc	dx 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-19
                                                            

 0508  FA                       		cli 
 0509  EC                       		in	al, dx 
 050A  F6 D0                    		not	al 
 050C  22 C1                    		and	al, cl 
 050E  88 47 19                 		mov	[bx+19h], al 
 0511  FB                       		sti 
 0512  E8 068B R                		call	sub_5665 
                                 
 0515                           INICMX: 
 0515  1F                       		pop	ds 
 0516  5F                       		pop	di 
 0517  5E                       		pop	si 
 0518  C3                       		ret 
                                INICOM		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Read Char from COM to	[AL] if	ready 
                                 
 0519                           RECCOM		proc near 
 0519  53                       		push	bx 
 051A  51                       		push	cx 
 051B  52                       		push	dx 
 051C  56                       		push	si 
 051D  57                       		push	di 
 051E  1E                       		push	ds 
 051F  0E                       		push	cs 
 0520  1F                       		pop	ds 
                                		assume ds:CSEG 
 0521  50                       		push	ax 
 0522  E8 06E6 R                		call	CMPREP 
 0525  B1 00                    		mov	cl, 0 
 0527  E8 0669 R                		call	sub_5643 
 052A  59                       		pop	cx 
 052B  8A C1                    		mov	al, cl 
 052D  75 23                    		jnz	short loc_552C 
 052F  FA                       		cli 
 0530  8B 77 08                 		mov	si, [bx+8] 
 0533  3B 77 0A                 		cmp	si, [bx+0Ah] 
 0536  74 1A                    		jz	short loc_552C 
 0538  46                       		inc	si 
 0539  3B 36 023C R             		cmp	si, CBFSIZ 
 053D  76 02                    		jbe	short loc_551B 
 053F  33 F6                    		xor	si, si 
                                 
 0541                           loc_551B: 
 0541  89 77 08                 		mov	[bx+8],	si 
 0544  8B 5F 14                 		mov	bx, [bx+14h] 
 0547  8B 3E 023A R             		mov	di, CBFSEG 
 054B  8E DF                    		mov	ds, di 
                                		assume ds:nothing 
 054D  8A 00                    		mov	al, [bx+si] 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-20
                                                            

 054F  FB                       		sti 
 0550  0B D2                    		or	dx, dx 
                                 
 0552                           loc_552C: 
 0552  1F                       		pop	ds 
 0553  5F                       		pop	di 
 0554  5E                       		pop	si 
 0555  5A                       		pop	dx 
 0556  59                       		pop	cx 
 0557  5B                       		pop	bx 
 0558  C3                       		ret 
                                RECCOM		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Send [AL] to COM 
                                 
 0559                           SNDCOM		proc near 
 0559  53                       		push	bx 
 055A  51                       		push	cx 
 055B  52                       		push	dx 
 055C  56                       		push	si 
 055D  57                       		push	di 
 055E  1E                       		push	ds 
 055F  0E                       		push	cs 
 0560  1F                       		pop	ds 
                                		assume ds:CSEG 
 0561  50                       		push	ax 
 0562  E8 06E6 R                		call	CMPREP 
 0565  8A 4F 1A                 		mov	cl, [bx+1Ah] 
 0568  E8 0669 R                		call	sub_5643 
 056B  59                       		pop	cx 
 056C  75 3B                    		jnz	short SNDCMX 
                                 
 056E                           SNDLOP: 
 056E  FA                       		cli 
 056F  8B 77 0E                 		mov	si, [bx+0Eh] 
 0572  46                       		inc	si 
 0573  81 FE 0080               		cmp	si, 80h	; '�' 
 0577  76 02                    		jbe	short loc_5555 
 0579  33 F6                    		xor	si, si 
                                 
 057B                           loc_5555: 
 057B  3B 77 0C                 		cmp	si, [bx+0Ch] 
 057E  74 23                    		jz	short loc_557D 
 0580  1E                       		push	ds 
 0581  53                       		push	bx 
 0582  89 77 0E                 		mov	[bx+0Eh], si 
 0585  8B 5F 16                 		mov	bx, [bx+16h] 
 0588  8B 3E 023A R             		mov	di, CBFSEG 
 058C  8E DF                    		mov	ds, di 
                                		assume ds:nothing 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-21
                                                            

 058E  88 08                    		mov	[bx+si], cl 
 0590  5B                       		pop	bx 
 0591  1F                       		pop	ds 
 0592  42                       		inc	dx 
 0593  EC                       		in	al, dx 
 0594  A8 02                    		test	al, 2 
 0596  75 11                    		jnz	short SNDCMX 
 0598  F6 47 19 02              		test	byte ptr [bx+19h], 2 
 059C  75 0B                    		jnz	short SNDCMX 
 059E  B0 0F                    		mov	al, 0Fh 
 05A0  EE                       		out	dx, al 
 05A1  EB 06                    		jmp	short SNDCMX 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 05A3                           loc_557D: 
 05A3  FB                       		sti 
 05A4  E8 06D0 R                		call	COMDLY 
 05A7  74 C5                    		jz	short SNDLOP	; Next char unless Ctrl+Break
				 pressed 
 05A9                           SNDCMX: 
 05A9  FB                       		sti 
 05AA  1F                       		pop	ds 
 05AB  5F                       		pop	di 
 05AC  5E                       		pop	si 
 05AD  5A                       		pop	dx 
 05AE  59                       		pop	cx 
 05AF  5B                       		pop	bx 
 05B0  C3                       		ret 
                                SNDCOM		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Get COM bytes	in queue 
                                ;	 On entry: AH =	unit number 
                                ;	 On return: DX=bytes in	queue 
                                ;		    CX=free bytes in queue 
                                ;		    AH = non-zero if error 
                                 
 05B1                           STACOM		proc near 
 05B1  53                       		push	bx 
 05B2  56                       		push	si 
 05B3  57                       		push	di 
 05B4  1E                       		push	ds 
 05B5  0E                       		push	cs 
 05B6  1F                       		pop	ds 
                                		assume ds:CSEG 
 05B7  E8 06E6 R                		call	CMPREP 
 05BA  32 E4                    		xor	ah, ah 
 05BC  8B 57 0A                 		mov	dx, [bx+0Ah] 
 05BF  3B 57 08                 		cmp	dx, [bx+8] 
 05C2  73 05                    		jnb	short loc_55A3 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-22
                                                            

 05C4  03 16 023C R             		add	dx, CBFSIZ 
 05C8  42                       		inc	dx 
                                 
 05C9                           loc_55A3: 
 05C9  2B 57 08                 		sub	dx, [bx+8] 
 05CC  8B 0E 023C R             		mov	cx, CBFSIZ 
 05D0  2B CA                    		sub	cx, dx 
 05D2  81 FA 00FF               		cmp	dx, 0FFh 
 05D6  76 03                    		jbe	short loc_55B5 
 05D8  BA 00FF                  		mov	dx, 0FFh 
                                 
 05DB                           loc_55B5: 
 05DB  1F                       		pop	ds 
                                		assume ds:nothing 
 05DC  5F                       		pop	di 
 05DD  5E                       		pop	si 
 05DE  5B                       		pop	bx 
 05DF  C3                       		ret 
                                STACOM		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 05E0                           SNDLPT		proc near 
 05E0  51                       		push	cx 
 05E1  52                       		push	dx 
 05E2  33 D2                    		xor	dx, dx 
 05E4  86 D4                    		xchg	dl, ah 
 05E6  CD 17                    		int	17h 
 05E8  80 E4 01                 		and	ah, 1 
 05EB  74 18                    		jz	short loc_55DF 
 05ED  B4 02                    		mov	ah, 2 
 05EF  CD 17                    		int	17h		; PRINTER - GET	STATUS 
                                					; DX = printer port (0-3) 
                                					; Return: AH = status 
 05F1  80 FC 28                 		cmp	ah, 28h	; '(' 
 05F4  75 04                    		jnz	short loc_55D4 
 05F6  B4 03                    		mov	ah, 3 
 05F8  EB 0B                    		jmp	short loc_55DF 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 05FA                           loc_55D4: 
 05FA  80 FC 08                 		cmp	ah, 8 
 05FD  75 04                    		jnz	short loc_55DD 
 05FF  B4 04                    		mov	ah, 4 
 0601  EB 02                    		jmp	short loc_55DF 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0603                           loc_55DD: 
 0603  B4 02                    		mov	ah, 2 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-23
                                                            

                                 
 0605                           loc_55DF: 
 0605  5A                       		pop	dx 
 0606  59                       		pop	cx 
 0607  C3                       		ret 
                                SNDLPT		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Terminate COM	channel 
                                 
 0608                           TRMCOM		proc near 
 0608  53                       		push	bx 
 0609  51                       		push	cx 
 060A  52                       		push	dx 
 060B  56                       		push	si 
 060C  57                       		push	di 
 060D  1E                       		push	ds 
 060E  0E                       		push	cs 
 060F  1F                       		pop	ds 
                                		assume ds:CSEG 
 0610  E8 06E6 R                		call	CMPREP 
 0613  0B D2                    		or	dx, dx 
 0615  75 04                    		jnz	short loc_55F5 
 0617  B4 FF                    		mov	ah, 0FFh 
 0619  EB 47                    		jmp	short loc_563C 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 061B                           loc_55F5: 
 061B  42                       		inc	dx 
 061C  B9 0096                  		mov	cx, 150 
 061F                           loc_55F9: 
 061F  EC                       		in	al, dx 
 0620  A8 02                    		test	al, 2 
 0622  74 08                    		jz	short loc_5606 
 0624  E8 06D0 R                		call	COMDLY 
 0627  74 F6                    		jz	short loc_55F9 
 0629  EB 08                    		jmp	short loc_560D 
                                ; ---------------------------------------------
				------------------------------ 
 062B  90                       		nop 
 062C                           loc_5606: 
 062C  E8 06D0 R                		call	COMDLY 
 062F  75 02                    		jnz	short loc_560D 
 0631  E2 F9                    		loop	loc_5606 
 0633                           loc_560D: 
 0633  B0 00                    		mov	al, 0 
 0635  EE                       		out	dx, al 
 0636  83 C2 03                 		add	dx, 3 
 0639  EE                       		out	dx, al 
 063A  E4 21                    		in	al, 21h		; Interrupt controller,	8259A. 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-24
                                                            

 063C  0A 47 1C                 		or	al, [bx+1Ch] 
 063F  E6 21                    		out	21h, al		; Interrupt controller,	8259A. 
 0641  33 C0                    		xor	ax, ax 
 0643  8E D8                    		mov	ds, ax		; IVT manipulation! 
 0645  2E: 8B 77 1E             		mov	si, cs:[bx+1Eh] 
 0649  2E: 8B 47 10             		mov	ax, cs:[bx+10h] 
 064D  89 04                    		mov	[si], ax 
 064F  2E: 8B 47 12             		mov	ax, cs:[bx+12h] 
 0653  89 44 02                 		mov	[si+2],	ax 
 0656  33 C0                    		xor	ax, ax 
 0658  2E: 89 47 10             		mov	cs:[bx+10h], ax 
 065C  2E: 89 47 12             		mov	cs:[bx+12h], ax 
 0660  B4 00                    		mov	ah, 0 
 0662                           loc_563C: 
 0662  1F                       		pop	ds 
                                		assume ds:nothing 
 0663  5F                       		pop	di 
 0664  5E                       		pop	si 
 0665  5A                       		pop	dx 
 0666  59                       		pop	cx 
 0667  5B                       		pop	bx 
 0668  C3                       		ret 
                                TRMCOM		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0669                           sub_5643	proc near 
 0669  FA                       		cli 
 066A  8A 47 18                 		mov	al, [bx+18h] 
 066D  C6 47 18 00              		mov	byte ptr [bx+18h], 0 
 0671  FB                       		sti 
 0672  0A C0                    		or	al, al 
 0674  75 04                    		jnz	short loc_5654 
 0676  E8 068B R                		call	sub_5665 
 0679  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 067A                           loc_5654: 
 067A  B4 01                    		mov	ah, 1 
 067C  A8 01                    		test	al, 1 
 067E  75 08                    		jnz	short loc_5662 
 0680  B4 06                    		mov	ah, 6 
 0682  A8 02                    		test	al, 2 
 0684  75 02                    		jnz	short loc_5662 
 0686  B4 07                    		mov	ah, 7 
 0688                           loc_5662: 
 0688  0A E4                    		or	ah, ah 
 068A  C3                       		ret 
                                sub_5643	endp 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-25
                                                            

                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 068B                           sub_5665	proc near 
 068B  FE C1                    		inc	cl 
 068D  55                       		push	bp 
 068E  8B 77 04                 		mov	si, [bx+4] 
 0691  8B EE                    		mov	bp, si 
 0693  8B 7F 02                 		mov	di, [bx+2] 
 0696  8B 77 06                 		mov	si, [bx+6] 
 0699                           loc_5673: 
 0699  8A 47 19                 		mov	al, [bx+19h] 
 069C  32 E4                    		xor	ah, ah 
 069E  22 C1                    		and	al, cl 
 06A0  74 2A                    		jz	short loc_56A6 
 06A2  A8 01                    		test	al, 1 
 06A4  74 04                    		jz	short loc_5684 
 06A6  B4 FF                    		mov	ah, 0FFh 
 06A8  EB 22                    		jmp	short loc_56A6 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 06AA                           loc_5684:				; CODE XREF: sub_5665+19j 
 06AA  A8 80                    		test	al, 80h 
 06AC  74 05                    		jz	short loc_568D 
 06AE  4F                       		dec	di 
 06AF  B4 05                    		mov	ah, 5 
 06B1  74 19                    		jz	short loc_56A6 
                                 
 06B3                           loc_568D:				; CODE XREF: sub_5665+21j 
 06B3  A8 20                    		test	al, 20h 
 06B5  74 05                    		jz	short loc_5696 
 06B7  4E                       		dec	si 
 06B8  B4 04                    		mov	ah, 4 
 06BA  74 10                    		jz	short loc_56A6 
                                 
 06BC                           loc_5696:				; CODE XREF: sub_5665+2Aj 
 06BC  A8 10                    		test	al, 10h 
 06BE  74 05                    		jz	short loc_569F 
 06C0  4D                       		dec	bp 
 06C1  B4 03                    		mov	ah, 3 
 06C3  74 07                    		jz	short loc_56A6 
                                 
 06C5                           loc_569F:				; CODE XREF: sub_5665+33j 
 06C5  E8 06D0 R                		call	COMDLY 
 06C8  74 CF                    		jz	short loc_5673 
 06CA  B4 FF                    		mov	ah, 0FFh 
                                 
 06CC                           loc_56A6:				; CODE XREF: sub_5665+15j sub_566
				5+1Dj ... 
 06CC  5D                       		pop	bp 
 06CD  0A E4                    		or	ah, ah 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-26
                                                            

 06CF  C3                       		ret 
                                sub_5665	endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 06D0                           COMDLY		proc near		; CODE XREF: SNDCOM+4Bp TRM
				COM+1Cp ... 
 06D0  50                       		push	ax 
 06D1  53                       		push	bx 
 06D2  51                       		push	cx 
 06D3  B9 00F2                  		mov	cx, 242 
                                 
 06D6                           DELAY:					; CODE XREF: COMDLY:DELAYj 
 06D6  E2 FE                    		loop	DELAY 
 06D8  59                       		pop	cx 
 06D9  33 C0                    		xor	ax, ax 
 06DB  1E                       		push	ds 
 06DC  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 06DE  3A 06 0471               		cmp	al, ds:471h	; Check	Ctrl+Break flag 
 06E2  1F                       		pop	ds 
                                		assume ds:nothing 
 06E3  5B                       		pop	bx 
 06E4  58                       		pop	ax 
 06E5  C3                       		ret 
                                COMDLY		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 06E6                           CMPREP		proc near		; CODE XREF: INICOM+Cp	RECC
				OM+9p ... 
 06E6  8A C4                    		mov	al, ah 
 06E8  D0 E0                    		shl	al, 1 
 06EA  B4 00                    		mov	ah, 0 
 06EC  56                       		push	si 
 06ED  BE 01F2 R                		mov	si, offset COMTBL 
 06F0  03 F0                    		add	si, ax 
 06F2  8B 1C                    		mov	bx, [si] 
 06F4  8B 17                    		mov	dx, [bx] 
 06F6  33 C0                    		xor	ax, ax 
 06F8  1E                       		push	ds 
 06F9  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 06FB  A2 0471                  		mov	ds:471h, al	; Zero out Ctrl+Break flag 
 06FE  1F                       		pop	ds 
                                		assume ds:nothing 
 06FF  5E                       		pop	si 
 0700  C3                       		ret 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-27
                                                            

                                CMPREP		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
                                ; Start of another module? 
                                ;		align 8 
                                PUBLIC  SCNRST, GWINI, GWTERM, KEYINP, INKMAP, 
				INFMAP, EDTMAP, MAPSUP 
                                PUBLIC  SCROUT, SCRINP, SCROLL, CLRSCN, CLREOL 
                                PUBLIC  CSRDSP, CSRATR, LCPY, SCRATR, SCRSTT, S
				ETCLR, SWIDTH 
                                 
 0701  00                       EVTSET		db 0			; DATA XREF: TIMISRr RDPEN+22w
				 ... 
 0702  00                       LSTRIG		db 0			; DATA XREF: TIMISR+13w RDTRIG+
				24r ... 
 0703  FF                       BRKFLG		db -1			; DATA XREF: CTLBRKw KEYINP+7
				r ... 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0704                           TIMISR		proc far 
 0704  2E: F6 06 0701 R 01      		test	cs:EVTSET, 1	; Light	pen enabled? 
 070A  74 03                    		jz	short loc_56EE 
 070C  E8 131C R                		call	LPENQR 
                                 
 070F                           loc_56EE: 
 070F  50                       		push	ax 
 0710  52                       		push	dx 
 0711  BA 0201                  		mov	dx, 201h 
 0714  EC                       		in	al, dx		; Game I/O port 
                                					; bits 0-3: Coordinates	(resistive, time-d
				ependent inputs) 
                                					; bits 4-7: Buttons/Triggers (digital inpu
				ts) 
 0715  F6 D0                    		not	al 
 0717  2E: 08 06 0702 R         		or	cs:LSTRIG, al 
 071C  24 F0                    		and	al, 0F0h 
 071E  2E: 08 06 1307 R         		or	cs:ISREVT, al 
 0723  5A                       		pop	dx 
 0724  58                       		pop	ax 
 0725  CF                       		iret 
                                TIMISR		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0726                           CTLBRK		proc far 
 0726  2E: C6 06 0703 R 00      		mov	cs:BRKFLG, 0	; 0 = Ctrl+Break, -1 = no br
				eak 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-28
                                                            

 072C  CF                       		iret 
                                CTLBRK		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Reset	screen related state 
                                 
 072D                           SCNRST		proc near 
 072D  B4 00                    		mov	ah, 0 
 072F  A0 000B R                		mov	al, ds:var_63b 
 0732  B1 19                    		mov	cl, 25 
 0734  E8 0000 E                		call	SCNSWI 
 0737  E8 0000 E                		call	SCNCLR 
 073A  E8 0000 E                		call	GRPINI 
 073D  C3                       		ret 
                                SCNRST		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
 073E  00                       EQUIP		db 0 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 073F                           GWINI		proc near 
 073F  E8 0B32 R                		call	SCRSAV 
 0742  1E                       		push	ds 
 0743  33 C0                    		xor	ax, ax 
 0745  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 0747  A0 0410                  		mov	al, ds:410h	; Read equipment word (low by
				te) 
 074A  2E: A2 073E R            		mov	cs:EQUIP, al 
 074E  1F                       		pop	ds 
                                		assume ds:nothing 
 074F  A0 000F R                		mov	al, ds:var_63f 
 0752  A2 0000 R                		mov	ds:var_630, al 
 0755  A0 000E R                		mov	al, ds:var_63e 
 0758  A2 000B R                		mov	ds:var_63b, al 
 075B  80 3E 000F R 07          		cmp	byte ptr ds:var_63f, 7 
 0760  75 06                    		jnz	short VIDPGE 
 0762  C7 06 0013 R 0C0D        		mov	word ptr ds:var_643, 0C0Dh 
                                 
 0768                           VIDPGE:					; CODE XREF: GWINI+21j 
 0768  B8 0500                  		mov	ax, 500h 
 076B  CD 10                    		int	10h		; - VIDEO - SELECT DISPLAY PAGE 
                                					; AL = display page, 0-7  for modes 0 &	1,
				 0-3	for modes 2 & 3 
 076D  33 D2                    		xor	dx, dx 
                                 
 076F                           INILPT:					; CODE XREF: GWINI+3Aj 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-29
                                                            

 076F  B4 01                    		mov	ah, 1 
 0771  52                       		push	dx 
 0772  CD 17                    		int	17h		; PRINTER - INITIALIZE 
                                					; DX = printer port (0-3) 
                                					; Return: AH = status 
 0774  5A                       		pop	dx 
 0775  42                       		inc	dx 
 0776  83 FA 03                 		cmp	dx, 3 
 0779  75 F4                    		jnz	short INILPT 
 077B  8C C8                    		mov	ax, cs		; Set segments for interrupt vect
				ors 
 077D  A3 0003 R                		mov	ds:CBRKSG, ax 
 0780  A3 0007 R                		mov	ds:TIMRSG, ax 
 0783  E8 07A7 R                		call	SWPVEC		; Install INT 1Bh/1Ch vectors 
 0786  1E                       		push	ds 
 0787  33 C0                    		xor	ax, ax 
 0789  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 078B  58                       		pop	ax 
 078C  50                       		push	ax 
 078D  A3 0510                  		mov	ds:510h, ax     ; Set initial BASIC data 
				segment 
 0790  A0 0300                  		mov	al, ds:300h 
 0793  1F                       		pop	ds 
                                		assume ds:nothing 
 0794  3C 00                    		cmp	al, 0 
 0796  74 0C                    		jz	short GWINIX 
 0798  BB 0000 E                		mov	bx, offset SPCTAB 
 079B  83 C3 39                 		add	bx, 39h		; Offset of PLAYS entry	in STMDS
				X 
 079E  B8 0000 E                		mov	ax, offset SNERR ; Disable PLAY	statement
				? 
 07A1  2E: 89 07                		mov	cs:[bx], ax 
                                 
 07A4                           GWINIX:					; CODE XREF: GWINI+57j 
 07A4  E9 0B73 R                		jmp	DOCLRS 
                                GWINI		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 07A7                           SWPVEC		proc near 
 07A7  B9 0004                  		mov	cx, 4		; 4 words (two vectors) 
 07AA  1E                       		push	ds 
 07AB  33 C0                    		xor	ax, ax 
 07AD  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 07AF  BE 006C                  		mov	si, 6Ch		; Offset of vector 1Bh (Ctrl+Bre
				ak) 
 07B2  BF 0001 R                		mov	di, OFFSET CBKINT 
 07B5  FA                       		cli 
 07B6  FC                       		cld 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-30
                                                            

 07B7                           DOVEC: 
 07B7  26: 8B 05                		mov	ax, es:[di]	; Read in new offset 
 07BA  87 04                    		xchg	ax, [si]	; Swap in new offset 
 07BC  AB                       		stosw			; Save old offset 
 07BD  46                       		inc	si		; Skip over segment 
 07BE  46                       		inc	si 
 07BF  E2 F6                    		loop	DOVEC 
 07C1  FB                       		sti 
 07C2  1F                       		pop	ds 
                                		assume ds:nothing 
 07C3  C3                       		ret 
                                SWPVEC		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 07C4                           GWTERM		proc near 
 07C4  E8 0B32 R                		call	SCRSAV 
 07C7  1E                       		push	ds 
 07C8  33 C0                    		xor	ax, ax 
 07CA  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 07CC  2E: A0 073E R            		mov	al, cs:EQUIP	; Restore equipment word 
 07D0  A2 0410                  		mov	ds:410h, al 
 07D3  1F                       		pop	ds 
                                		assume ds:nothing 
 07D4  B0 FF                    		mov	al, -1 
 07D6  E8 15C2 R                		call	DONOTE 
 07D9  B9 0607                  		mov	cx, 607h	; 8x8 cursor 
 07DC  80 3E 000F R 07          		cmp	byte ptr ds:var_63f, 7 
 07E1  75 03                    		jnz	short SETCSR 
 07E3  B9 0C0D                  		mov	cx, 0C0Dh	; 8x14 cursor 
 07E6                           SETCSR: 
 07E6  B4 01                    		mov	ah, 1 
 07E8  CD 10                    		int	10h		; - VIDEO - SET	CURSOR CHARACTERISTI
				CS 
                                					; CH bits 0-4 =	start line for cursor in c
				haracter cell 
                                					; bits 5-6 = blink attribute 
                                					; CL bits 0-4 =	end line for cursor in cha
				racter cell 
 07EA  80 3E 000F R 07          		cmp	byte ptr ds:var_63f, 7 
 07EF  74 19                    		jz	short loc_57E9 
 07F1  33 C0                    		xor	ax, ax 
 07F3  A0 0000 R                		mov	al, ds:var_630 
 07F6  3A 26 000D R             		cmp	ah, ds:var_63d 
 07FA  75 0C                    		jnz	short loc_57E7 
 07FC  3A 26 0009 R             		cmp	ah, ds:var_639 
 0800  75 06                    		jnz	short loc_57E7 
 0802  3A 06 000F R             		cmp	al, ds:var_63f 
 0806  74 02                    		jz	short loc_57E9 
 0808                           loc_57E7: 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-31
                                                            

 0808  CD 10                    		int	10h		; - VIDEO - SET	VIDEO MODE 
                                					; AL = mode 
 080A                           loc_57E9: 
 080A  C6 06 0016 R 07          		mov	byte ptr ds:var_646, 7 
 080F  C6 06 000A R 00          		mov	byte ptr ds:var_63a, 0 
 0814  BA 1700                  		mov	dx, 1700h 
 0817  89 16 001E R             		mov	ds:var_64e, dx 
 081B  B7 00                    		mov	bh, 0 
 081D  B4 02                    		mov	ah, 2 
 081F  CD 10                    		int	10h		; - VIDEO - SET	CURSOR POSITION 
                                					; DH,DL	= row, column (0,0 = upper left) 
                                					; BH = page number 
 0821  E8 07A7 R                		call	SWPVEC 
 0824  E9 0A59 R                		jmp	SCRRST 
                                GWTERM		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Keyboard input routine 
                                ; On exit: 
                                ;   ZF set if key available 
                                ;   ZF clear if	no keyboard input 
                                ;   CF set if two bytes	available (AX) 
                                ;   CF clear if	one byte available (AL) 
                                 
 0827                           KEYINP		proc near 
 0827  06                       		push	es 
 0828  0E                       		push	cs 
 0829  07                       		pop	es 
                                		assume es:CSEG 
 082A  53                       		push	bx 
 082B  51                       		push	cx 
 082C  57                       		push	di 
 082D  FC                       		cld 
 082E  2E: 80 3E 0703 R 00      		cmp	cs:BRKFLG, 0	; Zero if Ctrl+Break was sig
				naled 
 0834  75 14                    		jnz	short NOBRK 
 0836  2E: FE 0E 0703 R         		dec	cs:BRKFLG	; Clear	Ctrl+Break flag 
 083B  B4 01                    		mov	ah, 1 
 083D  CD 16                    		int	16h		; KEYBOARD - CHECK BUFFER, DO NOT CL
				EAR 
                                					; Return: ZF clear if character	in buffer 
                                					; AH = scan code, AL = character 
                                					; ZF set if no character in buffer 
 083F  74 04                    		jz	short CBREAK 
 0841  32 E4                    		xor	ah, ah 
 0843  CD 16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, 
				WAIT IF EMPTY 
                                					; Return: AH = scan code, AL = character 
 0845                           CBREAK: 
 0845  B8 FF03                  		mov	ax, 0FF03h	; CTLBRK aka Ctrl+Break 
 0848  EB 4A                    		jmp	short TWOKEY 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-32
                                                            

                                ; ---------------------------------------------
				------------------------------ 
                                 
 084A                           NOBRK: 
 084A  B4 01                    		mov	ah, 1 
 084C  CD 16                    		int	16h		; KEYBOARD - CHECK BUFFER, DO NOT CL
				EAR 
                                					; Return: ZF clear if character	in buffer 
                                					; AH = scan code, AL = character 
                                					; ZF set if no character in buffer 
 084E  74 21                    		jz	short KEYINX 
 0850  32 E4                    		xor	ah, ah 
 0852  CD 16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, 
				WAIT IF EMPTY 
                                					; Return: AH = scan code, AL = character 
 0854  0A C0                    		or	al, al 
 0856  74 1E                    		jz	short NONASC 
 0858  B4 00                    		mov	ah, 0 
 085A  3C FE                    		cmp	al, 0FEh ; '�' 
 085C  72 08                    		jb	short CHKESC 
 085E  B4 FF                    		mov	ah, 0FFh 
 0860  75 32                    		jnz	short TWOKEY 
 0862  B0 18                    		mov	al, 18h 
 0864  EB 2E                    		jmp	short TWOKEY 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0866                           CHKESC: 
 0866  3C 1B                    		cmp	al, 1Bh		; ESC key? 
 0868  75 05                    		jnz	short ONEKEY 
 086A  B8 FF15                  		mov	ax, 0FF15h 
 086D  EB 25                    		jmp	short TWOKEY 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 086F                           ONEKEY: 
 086F  0B E4                    		or	sp, sp 
 0871                           KEYINX: 
 0871  5F                       		pop	di 
 0872  59                       		pop	cx 
 0873  5B                       		pop	bx 
 0874  07                       		pop	es 
                                		assume es:nothing 
 0875  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0876                           NONASC: 
 0876  86 C4                    		xchg	al, ah 
 0878  BF 08B2 R                		mov	di, offset SCNXLT 
 087B  B9 0039                  		mov	cx, 57 
 087E  FC                       		cld 
 087F  F2/ AE                   		repne scasb 
 0881  75 16                    		jnz	short NOTTAB 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-33
                                                            

 0883  81 EF 08B2 R             		sub	di, offset SCNXLT 
 0887  8B C7                    		mov	ax, di 
 0889  3D 0020                  		cmp	ax, 20h 
 088C  B4 FF                    		mov	ah, 0FFh 
 088E  72 04                    		jb	short TWOKEY 
 0890  04 21                    		add	al, 21h	; '!' 
 0892                           loc_5871: 
 0892  B4 80                    		mov	ah, 80h 
 0894                           TWOKEY: 
 0894  0B E4                    		or	sp, sp 
 0896  F9                       		stc 
 0897  EB D8                    		jmp	short KEYINX 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0899                           NOTTAB: 
 0899  3C 3B                    		cmp	al, 3Bh	; ';' 
 089B  72 08                    		jb	short loc_5884 
 089D  3C 45                    		cmp	al, 45h	; 'E' 
 089F  73 04                    		jnb	short loc_5884 
 08A1  2C 1B                    		sub	al, 1Bh 
 08A3  EB ED                    		jmp	short loc_5871 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 08A5                           loc_5884: 
 08A5  3C 53                    		cmp	al, 53h	; 'S' 
 08A7  8B D0                    		mov	dx, ax 
 08A9  B0 FE                    		mov	al, 0FEh 
 08AB  75 C2                    		jnz	short ONEKEY 
 08AD  B8 FF7F                  		mov	ax, 0FF7Fh 
 08B0  EB E2                    		jmp	short TWOKEY 
                                KEYINP		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
 08B2  FA 73                    SCNXLT		db 0FAh, 73h, 2	dup(0FAh), 75h,	74h, 4 
				dup(0F9h), 47h 
       0002[                    SCNXLT		db 0FAh, 73h, 2	dup(0FAh), 75h,	74h, 4 
				dup(0F9h), 47h 
            FA                  
                         ]      
       0004[   75 74            
            F9                  
                         ]      
               47               
                                					; DATA XREF: KEYINP+51o KEYINP+5Co ... 
 08BD  77 F9 4F F9              		db 77h,	0F9h, 4Fh, 0F9h, 2 dup(0FAh), 52h, 2 
				dup(0FAh) 
       0002[                    		db 77h,	0F9h, 4Fh, 0F9h, 2 dup(0FAh), 52h, 2 
				dup(0FAh) 
            FA                  
                         ]      
       0002[   52               
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-34
                                                            

            FA                  
                         ]      
                                
 08C6  F9                       		db 0F9h, 2 dup(0FAh), 0FEh, 3 dup(0FAh), 4Dh,
				 4Bh, 48h 
       0002[                    		db 0F9h, 2 dup(0FAh), 0FEh, 3 dup(0FAh), 4Dh,
				 4Bh, 48h 
            FA                  
                         ]      
       0003[   FE               
            FA                  
                         ]      
               4D 4B 48         
 08D0  50 1E 30 2E 20 12 21     		db 50h,	1Eh, 30h, 2Eh, 20h, 12h, 21h, 22h, 23
				h,	17h, 24h 
       22 23 17 24              
 08DB  25 26 32 31 18 19 10     		db 25h,	26h, 32h, 31h, 18h, 19h, 10h, 13h, 1F
				h,	14h, 16h 
       13 1F 14 16              
 08E6  2F 11 2D 15 2C           		db 2Fh,	11h, 2Dh, 15h, 2Ch 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; OEM map routine for INKEY$ 
                                 
 08EB                           INKMAP		proc near 
 08EB  53                       		push	bx 
 08EC  72 11                    		jb	short loc_58DE 
 08EE  3C FE                    		cmp	al, 0FEh ; '�' 
 08F0  75 09                    		jnz	short loc_58DA 
 08F2  8B C2                    		mov	ax, dx 
                                 
 08F4                           loc_58D3:				; CODE XREF: INKMAP+26j INKMAP+3C
				j ... 
 08F4  B4 00                    		mov	ah, 0 
 08F6  0B E4                    		or	sp, sp 
 08F8  F9                       		stc 
 08F9  5B                       		pop	bx 
 08FA  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 08FB                           loc_58DA:				; CODE XREF: INKMAP+5j	INKMAP+16
				j ... 
 08FB  0B E4                    		or	sp, sp 
                                 
 08FD                           loc_58DC:				; CODE XREF: INKMAP+38j INKMAP+60
				j 
 08FD  5B                       		pop	bx 
 08FE  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-35
                                                            

 08FF                           loc_58DE:				; CODE XREF: INKMAP+1j 
 08FF  3C FF                    		cmp	al, 0FFh 
 0901  74 F8                    		jz	short loc_58DA 
 0903  3C 15                    		cmp	al, 15h 
 0905  75 04                    		jnz	short loc_58EA 
 0907  B0 1B                    		mov	al, 1Bh 
 0909  EB F0                    		jmp	short loc_58DA 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 090B                           loc_58EA:				; CODE XREF: INKMAP+1Aj 
 090B  3C 7F                    		cmp	al, 7Fh	; '' 
 090D  75 04                    		jnz	short loc_58F2 
 090F  B0 53                    		mov	al, 53h	; 'S' 
 0911  EB E1                    		jmp	short loc_58D3 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0913                           loc_58F2:				; CODE XREF: INKMAP+22j 
 0913  3C 20                    		cmp	al, 20h	; ' ' 
 0915  73 14                    		jnb	short loc_590A 
 0917  BB 5890                  		mov	bx, 5890h 
 091A  B4 00                    		mov	ah, 0 
 091C  03 D8                    		add	bx, ax 
 091E  2E: 8A 07                		mov	al, cs:[bx] 
 0921  3C FA                    		cmp	al, 0FAh ; '�' 
 0923  74 D8                    		jz	short loc_58DC 
 0925  3C FE                    		cmp	al, 0FEh ; '�' 
 0927  72 CB                    		jb	short loc_58D3 
 0929  EB D0                    		jmp	short loc_58DA 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 092B                           loc_590A:				; CODE XREF: INKMAP+2Aj 
 092B  3C 2A                    		cmp	al, 2Ah	; '*' 
 092D  73 04                    		jnb	short loc_5912 
 092F  04 1B                    		add	al, 1Bh 
 0931  EB C1                    		jmp	short loc_58D3 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0933                           loc_5912:				; CODE XREF: INKMAP+42j 
 0933  3C 41                    		cmp	al, 'A' 
 0935  72 12                    		jb	short loc_5928 
 0937  3C 5B                    		cmp	al, 5Bh	; '[' 
 0939  73 0E                    		jnb	short loc_5928 
 093B  2C 41                    		sub	al, 'A' 
 093D  B4 00                    		mov	ah, 0 
 093F  BB 08D1 R                		mov	bx, (offset SCNXLT+1Fh) 
 0942  03 D8                    		add	bx, ax 
 0944  2E: 8A 07                		mov	al, cs:[bx] 
 0947  EB AB                    		jmp	short loc_58D3 
                                ; ---------------------------------------------
				------------------------------ 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-36
                                                            

                                 
 0949                           loc_5928:				; CODE XREF: INKMAP+4Aj INKMAP+4E
				j 
 0949  3A C0                    		cmp	al, al 
 094B  EB B0                    		jmp	short loc_58DC 
                                INKMAP		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; OEM fixed length input map routine 
                                 
 094D                           INFMAP		proc near		; CODE XREF: INCHRI+16p 
 094D  E8 08EB R                		call	INKMAP 
 0950  73 02                    		jnb	short loc_5933 
 0952  B0 00                    		mov	al, 0 
                                 
 0954                           loc_5933:				; CODE XREF: INFMAP+3j 
 0954  F8                       		clc 
 0955  C3                       		ret 
                                INFMAP		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Map edit function/output character code 
                                 
 0956                           EDTMAP		proc near		; CODE XREF: CTLDSP+21p 
 0956  C6 06 0011 R 00          		mov	byte ptr ds:var_641, 0 
 095B  3D 0003                  		cmp	ax, 3 
 095E  74 44                    		jz	short loc_5983 
 0960  80 FC FF                 		cmp	ah, 0FFh 
 0963  75 19                    		jnz	short loc_595D 
 0965  3C 18                    		cmp	al, 18h 
 0967  75 05                    		jnz	short loc_594D 
 0969  B8 00FE                  		mov	ax, 0FEh 
 096C  EB 3C                    		jmp	short loc_5989 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 096E                           loc_594D:				; CODE XREF: EDTMAP+11j 
 096E  3C FF                    		cmp	al, 0FFh 
 0970  75 32                    		jnz	short loc_5983 
 0972  80 3E 000A R 00          		cmp	byte ptr ds:var_63a, 0 
 0977  74 2B                    		jz	short loc_5983 
 0979  B8 0020                  		mov	ax, ' ' 
 097C  EB 2C                    		jmp	short loc_5989 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 097E                           loc_595D:				; CODE XREF: EDTMAP+Dj 
 097E  3C 1B                    		cmp	al, 1Bh 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-37
                                                            

 0980  75 04                    		jnz	short loc_5965 
 0982  B0 15                    		mov	al, 15h 
 0984  EB 1E                    		jmp	short loc_5983 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0986                           loc_5965:				; CODE XREF: EDTMAP+2Aj 
 0986  3C FF                    		cmp	al, 0FFh 
 0988  74 1A                    		jz	short loc_5983 
 098A  3C 7F                    		cmp	al, 7Fh 
 098C  74 16                    		jz	short loc_5983 
 098E  3C 20                    		cmp	al, ' ' 
 0990  73 18                    		jnb	short loc_5989 
 0992  50                       		push	ax 
 0993  53                       		push	bx 
 0994  B4 00                    		mov	ah, 0 
 0996  BB 08B1 R                		mov	bx, offset SCNXLT - 1 
 0999  03 D8                    		add	bx, ax 
 099B  2E: 8A 07                		mov	al, cs:[bx] 
 099E  3C FA                    		cmp	al, 0FAh 
 09A0  5B                       		pop	bx 
 09A1  58                       		pop	ax 
 09A2  74 08                    		jz	short loc_598B 
                                 
 09A4                           loc_5983:				; CODE XREF: EDTMAP+8j	EDTMAP+1A
				j ... 
 09A4  B4 FF                    		mov	ah, 0FFh 
 09A6  0B E4                    		or	sp, sp 
 09A8  F9                       		stc 
 09A9  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 09AA                           loc_5989:				; CODE XREF: EDTMAP+16j EDTMAP+26
				j ... 
 09AA  0B E4                    		or	sp, sp 
                                 
 09AC                           loc_598B:				; CODE XREF: EDTMAP+4Cj 
 09AC  F8                       		clc 
 09AD  C3                       		ret 
                                EDTMAP		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
 09AE  C3                       		ret 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Map super shift key to letter	in [AL]	and cou
				nt in [CH] 
                                 
 09AF                           MAPSUP		proc near		; CODE XREF: CHKFKY+39p 
 09AF  B5 01                    		mov	ch, 1 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-38
                                                            

 09B1  C3                       		ret 
                                MAPSUP		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Write	the character in [AL] at (DH,DL) 
                                 
 09B2                           SCROUT		proc near		; CODE XREF: KEYDCH+17p SCN
				OUT+13p ... 
 09B2  50                       		push	ax 
 09B3  53                       		push	bx 
 09B4  51                       		push	cx 
 09B5  52                       		push	dx 
 09B6  81 EA 0101               		sub	dx, 101h 
 09BA  86 D6                    		xchg	dl, dh 
 09BC  50                       		push	ax 
 09BD  89 16 001E R             		mov	ds:var_64e, dx 
 09C1  8A 3E 0009 R             		mov	bh, ds:var_639 
 09C5  B4 02                    		mov	ah, 2 
 09C7  CD 10                    		int	10h		; - VIDEO - SET	CURSOR POSITION 
                                					; DH,DL	= row, column (0,0 = upper left) 
                                					; BH = page number 
 09C9  58                       		pop	ax 
 09CA  B9 0001                  		mov	cx, 1 
 09CD  8A 1E 0016 R             		mov	bl, ds:var_646 
 09D1  B4 09                    		mov	ah, 9 
 09D3  CD 10                    		int	10h		; - VIDEO - WRITE ATTRIBUTES/CHARACT
				ERS	AT CURSOR POSITION 
                                					; AL = character, BH = display page 
                                					; BL = attributes of character (alpha mode
				s) or	color (graphics	modes) 
                                					; CX = number of times to write	character 
 09D5  F8                       		clc 
 09D6  5A                       		pop	dx 
 09D7  59                       		pop	cx 
 09D8  5B                       		pop	bx 
 09D9  58                       		pop	ax 
 09DA  C3                       		ret 
                                SCROUT		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 09DB                           SCRSV2		proc near 
 09DB  8F 06 0020 R             		pop	word ptr ds:var_650 
 09DF  52                       		push	dx 
 09E0  51                       		push	cx 
 09E1  53                       		push	bx 
 09E2  50                       		push	ax 
 09E3  9C                       		pushf 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-39
                                                            

 09E4  80 3E 000A R 00          		cmp	byte ptr ds:var_63a, 0 
 09E9  74 11                    		jz	short loc_59DB 
 09EB  80 3E 0010 R 01          		cmp	byte ptr ds:var_640, 1 
 09F0  74 07                    		jz	short loc_59D8 
 09F2  80 3E 0010 R 02          		cmp	byte ptr ds:var_640, 2 
 09F7  75 03                    		jnz	short loc_59DB 
                                 
 09F9                           loc_59D8:				; CODE XREF: SCRSV2+15j 
 09F9  E8 0C19 R                		call	sub_5BF8 
                                 
 09FC                           loc_59DB:				; CODE XREF: SCRSV2+Ej	SCRSV2+1C
				j 
 09FC  50                       		push	ax 
 09FD  81 EA 0101               		sub	dx, 101h 
 0A01  86 D6                    		xchg	dl, dh 
 0A03  89 16 001E R             		mov	ds:var_64e, dx 
 0A07  8A 3E 0009 R             		mov	bh, ds:var_639 
 0A0B  B4 02                    		mov	ah, 2 
 0A0D  CD 10                    		int	10h		; - VIDEO - SET	CURSOR POSITION 
                                					; DH,DL	= row, column (0,0 = upper left) 
                                					; BH = page number 
 0A0F  58                       		pop	ax 
 0A10  9D                       		popf 
 0A11  FF 36 0020 R             		push	word ptr ds:var_650 
 0A15  C3                       		ret 
                                SCRSV2		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0A16                           SCRINP		proc near 
                                					; SCNMRK:loc_987Dp ... 
 0A16  E8 09DB R                		call	SCRSV2 
 0A19  9C                       		pushf 
 0A1A  B4 08                    		mov	ah, 8 
 0A1C  CD 10                    		int	10h		; - VIDEO - READ ATTRIBUTES/CHARACTE
				R AT CURSOR	POSITION 
                                					; BH = display page 
                                					; Return: AL = character 
                                					; AH = attribute of character (alpha modes
				) 
 0A1E  9D                       		popf 
 0A1F  72 06                    		jb	short loc_5A06 
 0A21  0A C0                    		or	al, al 
 0A23  75 02                    		jnz	short loc_5A06 
 0A25  B0 20                    		mov	al, ' ' 
                                 
 0A27                           loc_5A06:				; CODE XREF: SCRINP+9j	SCRINP+Dj
				 
 0A27  32 E4                    		xor	ah, ah 
 0A29  5A                       		pop	dx 
 0A2A  50                       		push	ax 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-40
                                                            

 0A2B  EB 2C                    		jmp	short SCRRST 
                                SCRINP		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
 0A2D  90                       		nop 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0A2E                           SCROLL		proc near 
 0A2E  E8 0B32 R                		call	SCRSAV 
 0A31  86 C4                    		xchg	al, ah 
 0A33  86 DF                    		xchg	bl, bh 
 0A35  86 CD                    		xchg	cl, ch 
 0A37  BA 0101                  		mov	dx, 101h 
 0A3A  2B C2                    		sub	ax, dx 
 0A3C  2B DA                    		sub	bx, dx 
 0A3E  2B CA                    		sub	cx, dx 
 0A40  3A E7                    		cmp	ah, bh 
 0A42  75 34                    		jnz	short loc_5A57 
 0A44  3A D8                    		cmp	bl, al 
 0A46  C6 06 000C R 01          		mov	byte ptr ds:var_63c, 1 
 0A4B  72 09                    		jb	short loc_5A35 
 0A4D  C6 06 000C R FF          		mov	byte ptr ds:var_63c, 0FFh 
 0A52  02 C1                    		add	al, cl 
 0A54  02 D9                    		add	bl, cl 
 0A56                           loc_5A35: 
 0A56  E8 0AE6 R                		call	DOSCRL 
 0A59                           SCRRST: 
 0A59  9C                       		pushf 
 0A5A  80 3E 000A R 00          		cmp	byte ptr ds:var_63a, 0 
 0A5F  74 11                    		jz	short loc_5A51 
 0A61  80 3E 0010 R 01          		cmp	byte ptr ds:var_640, 1 
 0A66  74 07                    		jz	short loc_5A4E 
 0A68  80 3E 0010 R 02          		cmp	byte ptr ds:var_640, 2 
 0A6D  75 03                    		jnz	short loc_5A51 
 0A6F                           loc_5A4E: 
 0A6F  E8 0C19 R                		call	sub_5BF8 
 0A72                           loc_5A51: 
 0A72  9D                       		popf 
 0A73  58                       		pop	ax		; Restores registers that SCRSAV save
				d 
 0A74  5B                       		pop	bx 
 0A75  59                       		pop	cx 
 0A76  5A                       		pop	dx 
 0A77  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0A78                           loc_5A57: 
 0A78  3A C3                    		cmp	al, bl 
 0A7A  75 2E                    		jnz	short loc_5A89 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-41
                                                            

 0A7C  E8 0ACF R                		call	SETVPG 
 0A7F  3A FC                    		cmp	bh, ah 
 0A81  73 08                    		jnb	short loc_5A6A 
 0A83  03 C1                    		add	ax, cx 
 0A85  8B CB                    		mov	cx, bx 
 0A87  B3 06                    		mov	bl, 6 
 0A89  EB 05                    		jmp	short loc_5A6F 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0A8B                           loc_5A6A: 
 0A8B  91                       		xchg	ax, cx 
 0A8C  03 C3                    		add	ax, bx 
 0A8E  B3 07                    		mov	bl, 7 
 0A90                           loc_5A6F: 
 0A90  8B D0                    		mov	dx, ax 
 0A92  8A E3                    		mov	ah, bl 
 0A94  B0 01                    		mov	al, 1 
 0A96  8A 3E 0016 R             		mov	bh, ds:var_646 
 0A9A  80 3E 000A R 00          		cmp	byte ptr ds:var_63a, 0 
 0A9F  74 02                    		jz	short loc_5A82 
 0AA1  B7 00                    		mov	bh, 0 
 0AA3                           loc_5A82: 
 0AA3  CD 10                    		int	10h		; - VIDEO - SCROLL PAGE	DOWN 
                                					; AL = number of lines to scroll window	(0
				 = blank whole window) 
                                					; BH = attributes to be	used on	blanked	li
				nes 
                                					; CH,CL	= row,column of	upper left corner 
				of window to scroll 
                                					; DH,DL	= row,column of	lower right corner
				 of window 
 0AA5  E8 0ACF R                		call	SETVPG 
 0AA8  EB AF                    		jmp	short SCRRST 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0AAA                           loc_5A89: 
 0AAA  C6 06 000A R 01          		mov	byte ptr ds:var_63a, 1 
 0AAF  3A D8                    		cmp	bl, al 
 0AB1  72 0B                    		jb	short loc_5A9D 
 0AB3  03 C1                    		add	ax, cx 
 0AB5  03 D9                    		add	bx, cx 
 0AB7  C6 06 000C R FF          		mov	byte ptr ds:var_63c, 0FFh 
 0ABC  FE C5                    		inc	ch 
 0ABE                           loc_5A9D: 
 0ABE  E8 0AE6 R                		call	DOSCRL 
 0AC1  FE CD                    		dec	ch 
 0AC3  74 94                    		jz	short SCRRST 
 0AC5  02 26 000C R             		add	ah, ds:var_63c 
 0AC9  02 3E 000C R             		add	bh, ds:var_63c 
 0ACD  EB EF                    		jmp	short loc_5A9D 
                                SCROLL		endp 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-42
                                                            

                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Set display page 
                                 
 0ACF                           SETVPG		proc near		; CODE XREF: SCROLL+4Ep SCR
				OLL+77p ... 
 0ACF  50                       		push	ax 
 0AD0  A0 000D R                		mov	al, ds:var_63d 
 0AD3  3A 06 0009 R             		cmp	al, ds:var_639 
 0AD7  74 0B                    		jz	short SETVPX 
 0AD9  86 06 0009 R             		xchg	al, ds:var_639 
 0ADD  A2 000D R                		mov	ds:var_63d, al 
 0AE0  B4 05                    		mov	ah, 5 
 0AE2  CD 10                    		int	10h		; - VIDEO - SELECT DISPLAY PAGE 
                                					; AL = display page, 0-7  for modes 0 &	1,
				 0-3	for modes 2 & 3 
 0AE4                           SETVPX: 
 0AE4  58                       		pop	ax 
 0AE5  C3                       		ret 
                                SETVPG		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0AE6                           DOSCRL		proc near		; CODE XREF: SCROLL:loc_5A35
				p 
                                					; SCROLL:loc_5A9Dp 
 0AE6  50                       		push	ax 
 0AE7  53                       		push	bx 
 0AE8  51                       		push	cx 
 0AE9  8B D0                    		mov	dx, ax 
 0AEB  B5 00                    		mov	ch, 0 
 0AED  FE C1                    		inc	cl 
 0AEF  74 14                    		jz	short DOSCRX 
                                 
 0AF1                           NXTCHR:					; CODE XREF: DOSCRL+1Dj 
 0AF1  E8 0B09 R                		call	SCRRDC 
 0AF4  02 16 000C R             		add	dl, ds:var_63c 
 0AF8  87 D3                    		xchg	dx, bx 
 0AFA  E8 0B18 R                		call	SCRWRC 
 0AFD  02 16 000C R             		add	dl, ds:var_63c 
 0B01  87 D3                    		xchg	dx, bx 
 0B03  E2 EC                    		loop	NXTCHR 
                                 
 0B05                           DOSCRX:					; CODE XREF: DOSCRL+9j 
 0B05  59                       		pop	cx 
 0B06  5B                       		pop	bx 
 0B07  58                       		pop	ax 
 0B08  C3                       		ret 
                                DOSCRL		endp 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-43
                                                            

                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0B09                           SCRRDC		proc near		; CODE XREF: DOSCRL:NXTCHRp
				 
 0B09  53                       		push	bx 
 0B0A  8A 3E 0009 R             		mov	bh, ds:var_639 
 0B0E  B4 02                    		mov	ah, 2 
 0B10  CD 10                    		int	10h		; - VIDEO - SET	CURSOR POSITION 
                                					; DH,DL	= row, column (0,0 = upper left) 
                                					; BH = page number 
 0B12  B4 08                    		mov	ah, 8 
 0B14  CD 10                    		int	10h		; - VIDEO - READ ATTRIBUTES/CHARACTE
				R AT CURSOR	POSITION 
                                					; BH = display page 
                                					; Return: AL = character 
                                					; AH = attribute of character (alpha modes
				) 
 0B16  5B                       		pop	bx 
 0B17  C3                       		ret 
                                SCRRDC		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0B18                           SCRWRC		proc near		; CODE XREF: DOSCRL+14p 
 0B18  53                       		push	bx 
 0B19  51                       		push	cx 
 0B1A  50                       		push	ax 
 0B1B  8A 3E 0009 R             		mov	bh, ds:var_639 
 0B1F  B4 02                    		mov	ah, 2 
 0B21  CD 10                    		int	10h		; - VIDEO - SET	CURSOR POSITION 
                                					; DH,DL	= row, column (0,0 = upper left) 
                                					; BH = page number 
 0B23  58                       		pop	ax 
 0B24  B9 0001                  		mov	cx, 1 
 0B27  8A 1E 0016 R             		mov	bl, ds:var_646 
 0B2B  B4 09                    		mov	ah, 9 
 0B2D  CD 10                    		int	10h		; - VIDEO - WRITE ATTRIBUTES/CHARACT
				ERS	AT CURSOR POSITION 
                                					; AL = character, BH = display page 
                                					; BL = attributes of character (alpha mode
				s) or	color (graphics	modes) 
                                					; CX = number of times to write	character 
 0B2F  59                       		pop	cx 
 0B30  5B                       		pop	bx 
 0B31  C3                       		ret 
                                SCRWRC		endp 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-44
                                                            

                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0B32                           SCRSAV		proc near		; CODE XREF: GWINIp GWTERM
				p ... 
 0B32  8F 06 0020 R             		pop	word ptr ds:var_650 
 0B36  52                       		push	dx 
 0B37  51                       		push	cx 
 0B38  53                       		push	bx 
 0B39  50                       		push	ax 
 0B3A  50                       		push	ax 
 0B3B  53                       		push	bx 
 0B3C  51                       		push	cx 
 0B3D  52                       		push	dx 
 0B3E  9C                       		pushf 
 0B3F  B4 0F                    		mov	ah, 0Fh 
 0B41  CD 10                    		int	10h		; - VIDEO - GET	CURRENT	VIDEO MODE 
                                					; Return: AH = number of columns on screen
				 
                                					; AL = current video mode 
                                					; BH = current active display page 
 0B43  88 3E 000D R             		mov	ds:var_63d, bh 
 0B47  88 26 000E R             		mov	ds:var_63e, ah 
 0B4B  A2 000F R                		mov	ds:var_63f, al 
 0B4E  80 3E 000A R 00          		cmp	byte ptr ds:var_63a, 0 
 0B53  74 11                    		jz	short loc_5B45 
 0B55  80 3E 0010 R 01          		cmp	byte ptr ds:var_640, 1 
 0B5A  74 07                    		jz	short loc_5B42 
 0B5C  80 3E 0010 R 02          		cmp	byte ptr ds:var_640, 2 
 0B61  75 03                    		jnz	short loc_5B45 
                                 
 0B63                           loc_5B42:				; CODE XREF: SCRSAV+28j 
 0B63  E8 0C19 R                		call	sub_5BF8 
                                 
 0B66                           loc_5B45:				; CODE XREF: SCRSAV+21j SCRSAV+2F
				j 
 0B66  9D                       		popf 
 0B67  5A                       		pop	dx 
 0B68  59                       		pop	cx 
 0B69  5B                       		pop	bx 
 0B6A  58                       		pop	ax 
 0B6B  FF 36 0020 R             		push	word ptr ds:var_650 
 0B6F  C3                       		ret 
                                SCRSAV		endp ; sp-analysis failed 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0B70                           CLRSCN		proc near 
 0B70  E8 0B32 R                		call	SCRSAV 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-45
                                                            

                                 
 0B73                           DOCLRS: 
 0B73  50                       		push	ax 
 0B74  E8 0ACF R                		call	SETVPG 
 0B77  33 C9                    		xor	cx, cx		; Start	at 0,0 
 0B79  8A 16 000B R             		mov	dl, ds:var_63b 
 0B7D  FE CA                    		dec	dl 
 0B7F  B6 18                    		mov	dh, 24		; End at 24, width 
 0B81  B8 0600                  		mov	ax, 600h 
 0B84  8A 3E 0016 R             		mov	bh, ds:var_646 
 0B88  80 3E 000A R 00          		cmp	byte ptr ds:var_63a, 0 
 0B8D  74 02                    		jz	short SCROL 
 0B8F  B7 00                    		mov	bh, 0 
                                 
 0B91                           SCROL:					; CODE XREF: CLRSCN+1Dj 
 0B91  CD 10                    		int	10h		; - VIDEO - SCROLL PAGE	UP 
                                					; AL = number of lines to scroll window	(0
				 = blank whole window) 
                                					; BH = attributes to be	used on	blanked	li
				nes 
                                					; CH,CL	= row,column of	upper left corner 
				of window to scroll 
                                					; DH,DL	= row,column of	lower right corner
				 of window 
 0B93  E8 0ACF R                		call	SETVPG 
 0B96  58                       		pop	ax 
 0B97  E8 072D R                		call	SCNRST 
 0B9A  E9 0EF9 R                		jmp	SCNOK 
                                CLRSCN		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0B9D                           CLREOL		proc near		; CODE XREF: KEYDSP+Ep	PLIN
				IT+19p 
 0B9D  50                       		push	ax 
 0B9E  53                       		push	bx 
 0B9F  51                       		push	cx 
 0BA0  52                       		push	dx 
 0BA1  81 EA 0101               		sub	dx, 101h 
 0BA5  A0 000B R                		mov	al, ds:var_63b 
 0BA8  2A C6                    		sub	al, dh 
 0BAA  76 18                    		jbe	short CLREOX 
 0BAC  8A C8                    		mov	cl, al 
 0BAE  B5 00                    		mov	ch, 0 
 0BB0  86 D6                    		xchg	dl, dh 
 0BB2  8A 3E 0009 R             		mov	bh, ds:var_639 
 0BB6  B4 02                    		mov	ah, 2 
 0BB8  CD 10                    		int	10h		; - VIDEO - SET	CURSOR POSITION 
                                					; DH,DL	= row, column (0,0 = upper left) 
                                					; BH = page number 
 0BBA  B0 20                    		mov	al, ' ' 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-46
                                                            

 0BBC  8A 1E 0016 R             		mov	bl, ds:var_646 
 0BC0  B4 09                    		mov	ah, 9 
 0BC2  CD 10                    		int	10h		; - VIDEO - WRITE ATTRIBUTES/CHARACT
				ERS	AT CURSOR POSITION 
                                					; AL = character, BH = display page 
                                					; BL = attributes of character (alpha mode
				s) or	color (graphics	modes) 
                                					; CX = number of times to write	character 
 0BC4                           CLREOX: 
 0BC4  5A                       		pop	dx 
 0BC5  59                       		pop	cx 
 0BC6  5B                       		pop	bx 
 0BC7  58                       		pop	ax 
 0BC8  C3                       		ret 
                                CLREOL		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0BC9                           CSRDSP		proc near 
 0BC9  E8 09DB R                		call	SCRSV2 
 0BCC  38 06 0010 R             		cmp	ds:var_640, al 
 0BD0  74 15                    		jz	short loc_5BC6 
 0BD2  A2 0010 R                		mov	ds:var_640, al 
 0BD5  3C 00                    		cmp	al, 0 
 0BD7  75 11                    		jnz	short loc_5BC9 
 0BD9  8B 0E 0013 R             		mov	cx, ds:var_643 
 0BDD  80 CD 20                 		or	ch, 20h 
 0BE0                           SETCUR: 
 0BE0  A2 0012 R                		mov	ds:var_642, al 
 0BE3  B4 01                    		mov	ah, 1 
 0BE5  CD 10                    		int	10h		; - VIDEO - SET	CURSOR CHARACTERISTI
				CS 
                                					; CH bits 0-4 =	start line for cursor in c
				haracter cell 
                                					; bits 5-6 = blink attribute 
                                					; CL bits 0-4 =	end line for cursor in cha
				racter cell 
 0BE7                           loc_5BC6: 
 0BE7  E9 0EF9 R                		jmp	SCNOK 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0BEA                           loc_5BC9: 
 0BEA  3C 01                    		cmp	al, 1 
 0BEC  75 0E                    		jnz	short loc_5BDB 
 0BEE  B9 0407                  		mov	cx, 407h 
 0BF1  80 3E 000F R 07          		cmp	byte ptr ds:var_63f, 7 
 0BF6  75 E8                    		jnz	short SETCUR 
 0BF8  B1 0D                    		mov	cl, 0Dh 
 0BFA  EB E4                    		jmp	short SETCUR 
                                ; ---------------------------------------------
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-47
                                                            

				------------------------------ 
                                 
 0BFC                           loc_5BDB: 
 0BFC  3C 02                    		cmp	al, 2 
 0BFE  75 09                    		jnz	short GOSCUR 
 0C00  8B 0E 0013 R             		mov	cx, ds:var_643 
 0C04  80 E5 DF                 		and	ch, 0DFh 
 0C07  EB D7                    		jmp	short SETCUR 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0C09                           GOSCUR: 
 0C09  8B 0E 0013 R             		mov	cx, ds:var_643 
 0C0D  A0 0011 R                		mov	al, ds:var_641 
 0C10  0A C0                    		or	al, al 
 0C12  75 CC                    		jnz	short SETCUR 
 0C14  80 CD 20                 		or	ch, 20h 
 0C17  EB C7                    		jmp	short SETCUR 
                                CSRDSP		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0C19                           sub_5BF8	proc near		; CODE XREF: SCRSV2:loc_59D
				8p 
                                					; SCROLL:loc_5A4Ep ... 
 0C19  50                       		push	ax 
 0C1A  53                       		push	bx 
 0C1B  51                       		push	cx 
 0C1C  52                       		push	dx 
 0C1D  8B 1E 001E R             		mov	bx, ds:var_64e 
 0C21  B8 0140                  		mov	ax, 320 
 0C24  33 C9                    		xor	cx, cx 
 0C26  86 F9                    		xchg	bh, cl 
 0C28  F7 E1                    		mul	cx 
 0C2A  8A 16 000A R             		mov	dl, ds:var_63a 
 0C2E  80 FA 01                 		cmp	dl, 1 
 0C31  75 02                    		jnz	short loc_5C14 
 0C33  D1 E3                    		shl	bx, 1 
 0C35                           loc_5C14: 
 0C35  03 D8                    		add	bx, ax 
 0C37  81 C3 00F0               		add	bx, 0F0h ; '�' 
 0C3B  B9 0004                  		mov	cx, 4 
 0C3E  80 3E 0010 R 01          		cmp	byte ptr ds:var_640, 1 
 0C43  75 02                    		jnz	short loc_5C26 
 0C45  49                       		dec	cx 
 0C46  49                       		dec	cx 
 0C47                           loc_5C26: 
 0C47  B8 B800                  		mov	ax, 0B800h 
 0C4A  1E                       		push	ds 
 0C4B  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-48
                                                            

 0C4D  B8 FFFF                  		mov	ax, 0FFFFh 
 0C50  80 FA 01                 		cmp	dl, 1 
 0C53  BA 2000                  		mov	dx, 2000h 
 0C56  75 0F                    		jnz	short loc_5C46 
 0C58                           loc_5C37: 
 0C58  03 DA                    		add	bx, dx 
 0C5A  31 07                    		xor	[bx], ax 
 0C5C  2B DA                    		sub	bx, dx 
 0C5E  31 07                    		xor	[bx], ax 
 0C60  83 EB 50                 		sub	bx, 80 
 0C63  E2 F3                    		loop	loc_5C37 
 0C65  EB 0D                    		jmp	short loc_5C53 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0C67                           loc_5C46: 
 0C67  03 DA                    		add	bx, dx 
 0C69  30 07                    		xor	[bx], al 
 0C6B  2B DA                    		sub	bx, dx 
 0C6D  30 07                    		xor	[bx], al 
 0C6F  83 EB 50                 		sub	bx, 80 
 0C72  E2 F3                    		loop	loc_5C46 
 0C74                           loc_5C53: 
 0C74  1F                       		pop	ds 
                                		assume ds:nothing 
 0C75  5A                       		pop	dx 
 0C76  59                       		pop	cx 
 0C77  5B                       		pop	bx 
 0C78  58                       		pop	ax 
 0C79  C3                       		ret 
                                sub_5BF8	endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0C7A                           CSRATR		proc near 
 0C7A  E8 0B32 R                		call	SCRSAV 
 0C7D  0A E4                    		or	ah, ah 
 0C7F  75 03                    		jnz	short loc_5C63 
 0C81  A0 0011 R                		mov	al, ds:var_641 
 0C84                           loc_5C63: 
 0C84  A2 0011 R                		mov	ds:var_641, al 
 0C87  0A FF                    		or	bh, bh 
 0C89  75 05                    		jnz	short loc_5C6F 
 0C8B  A1 0013 R                		mov	ax, ds:var_643 
 0C8E  8A DC                    		mov	bl, ah 
 0C90                           loc_5C6F: 
 0C90  0A ED                    		or	ch, ch 
 0C92  75 06                    		jnz	short loc_5C79 
 0C94  0A FF                    		or	bh, bh 
 0C96  74 10                    		jz	short GSTCUR 
 0C98  8A CB                    		mov	cl, bl 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-49
                                                            

 0C9A                           loc_5C79: 
 0C9A  8A FB                    		mov	bh, bl 
 0C9C  8A D9                    		mov	bl, cl 
 0C9E  F7 C3 E0E0               		test	bx, 0E0E0h 
 0CA2  75 07                    		jnz	short CSRERR 
 0CA4  89 1E 0013 R             		mov	ds:var_643, bx 
 0CA8                           GSTCUR: 
 0CA8  E9 0C09 R                		jmp	GOSCUR 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0CAB                           CSRERR: 
 0CAB  E9 0EFD R                		jmp	SCNERR 
                                CSRATR		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0CAE                           LCPY		proc near 
 0CAE  E8 0B32 R                		call	SCRSAV 
 0CB1  CD 05                    		int	5		;  - PRINT-SCREEN KEY 
                                					; automatically	called by keyboard scanner
				 when	print-screen key is pressed 
 0CB3  E8 0A59 R                		call	SCRRST 
                                LCPY		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0CB6                           SCRATR		proc near 
 0CB6  50                       		push	ax 
 0CB7  51                       		push	cx 
 0CB8  52                       		push	dx 
 0CB9  8A D0                    		mov	dl, al 
 0CBB  8A F3                    		mov	dh, bl 
 0CBD  81 EA 0101               		sub	dx, 101h 
 0CC1  89 16 001E R             		mov	ds:var_64e, dx 
 0CC5  8A 3E 0009 R             		mov	bh, ds:var_639 
 0CC9  B4 02                    		mov	ah, 2 
 0CCB  CD 10                    		int	10h		; - VIDEO - SET	CURSOR POSITION 
                                					; DH,DL	= row, column (0,0 = upper left) 
                                					; BH = page number 
 0CCD  B4 08                    		mov	ah, 8 
 0CCF  CD 10                    		int	10h		; - VIDEO - READ ATTRIBUTES/CHARACTE
				R AT CURSOR	POSITION 
                                					; BH = display page 
                                					; Return: AL = character 
                                					; AH = attribute of character (alpha modes
				) 
 0CD1  B7 00                    		mov	bh, 0 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-50
                                                            

 0CD3  8A DC                    		mov	bl, ah 
 0CD5  5A                       		pop	dx 
 0CD6  59                       		pop	cx 
 0CD7  58                       		pop	ax 
 0CD8  C3                       		ret 
                                SCRATR		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0CD9                           SCRSTT		proc near 
 0CD9  E8 0B32 R                		call	SCRSAV 
 0CDC  8A 0F                    		mov	cl, [bx] 
 0CDE  80 F9 05                 		cmp	cl, 5 
 0CE1  73 16                    		jnb	short loc_5CD8 
 0CE3  43                       		inc	bx 
 0CE4  FE C1                    		inc	cl 
 0CE6  53                       		push	bx 
 0CE7  51                       		push	cx 
 0CE8  8A 16 000A R             		mov	dl, ds:var_63a 
 0CEC  E8 0E7B R                		call	sub_5E5A 
 0CEF  76 0B                    		jbe	short loc_5CDB 
 0CF1  8A D0                    		mov	dl, al 
 0CF3  3C 03                    		cmp	al, 3 
 0CF5  72 05                    		jb	short loc_5CDB 
 0CF7  58                       		pop	ax 
 0CF8  58                       		pop	ax 
 0CF9                           loc_5CD8: 
 0CF9  E9 0EFD R                		jmp	SCNERR 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0CFC                           loc_5CDB: 
 0CFC  E8 0E7B R                		call	sub_5E5A 
 0CFF  E8 0E7B R                		call	sub_5E5A 
 0D02  76 03                    		jbe	short loc_5CE6 
 0D04  E8 0DAB R                		call	sub_5D8A 
 0D07                           loc_5CE6: 
 0D07  E8 0E7B R                		call	sub_5E5A 
 0D0A  76 03                    		jbe	short loc_5CEE 
 0D0C  E8 0DAB R                		call	sub_5D8A 
 0D0F                           loc_5CEE: 
 0D0F  59                       		pop	cx 
 0D10  5B                       		pop	bx 
 0D11  8A 2E 000F R             		mov	ch, ds:var_63f 
 0D15  E8 0E7B R                		call	sub_5E5A 
 0D18  76 4C                    		jbe	short loc_5D45 
 0D1A  A2 000A R                		mov	ds:var_63a, al 
 0D1D  C6 06 0016 R 07          		mov	byte ptr ds:var_646, 7 
 0D22  C6 06 0015 R 07          		mov	byte ptr ds:var_645, 7 
 0D27  3C 00                    		cmp	al, 0 
 0D29  75 13                    		jnz	short loc_5D1D 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-51
                                                            

 0D2B  33 D2                    		xor	dx, dx 
 0D2D  89 16 001C R             		mov	word ptr ds:var_64c, dx 
 0D31  B5 02                    		mov	ch, 2 
 0D33  80 3E 000B R 50          		cmp	byte ptr ds:var_63b, 80 
 0D38  74 28                    		jz	short loc_5D41 
 0D3A  B5 00                    		mov	ch, 0 
 0D3C  EB 24                    		jmp	short loc_5D41 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0D3E                           loc_5D1D: 
 0D3E  B5 04                    		mov	ch, 4 
 0D40  C6 06 000B R 28          		mov	byte ptr ds:var_63b, 40 
 0D45  BA 0140                  		mov	dx, 320 
 0D48  C7 06 001C R 3F02        		mov	word ptr ds:var_64c, 3F02h 
 0D4E  3C 01                    		cmp	al, 1 
 0D50  74 10                    		jz	short loc_5D41 
 0D52  B5 06                    		mov	ch, 6 
 0D54  C6 06 000B R 50          		mov	byte ptr ds:var_63b, 80 
 0D59  BA 0280                  		mov	dx, 640 
 0D5C  C7 06 001C R 7F01        		mov	word ptr ds:var_64c, 7F01h 
 0D62                           loc_5D41: 
 0D62  89 16 0019 R             		mov	ds:var_649, dx 
 0D66                           loc_5D45: 
 0D66  E8 0E7B R                		call	sub_5E5A 
 0D69  76 0F                    		jbe	short loc_5D59 
 0D6B  80 E5 FE                 		and	ch, 0FEh 
 0D6E  3C 00                    		cmp	al, 0 
 0D70  74 08                    		jz	short loc_5D59 
 0D72  80 FD 06                 		cmp	ch, 6 
 0D75  73 03                    		jnb	short loc_5D59 
 0D77  80 CD 01                 		or	ch, 1 
 0D7A                           loc_5D59: 
 0D7A  8A C5                    		mov	al, ch 
 0D7C  3A 06 000F R             		cmp	al, ds:var_63f 
 0D80  74 10                    		jz	short loc_5D71 
 0D82  B4 00                    		mov	ah, 0 
 0D84  CD 10                    		int	10h		; - VIDEO - SET	VIDEO MODE 
                                					; AL = mode 
 0D86  53                       		push	bx 
 0D87  51                       		push	cx 
 0D88  E8 072D R                		call	SCNRST 
 0D8B  59                       		pop	cx 
 0D8C  5B                       		pop	bx 
 0D8D  C6 06 0009 R 00          		mov	byte ptr ds:var_639, 0 
 0D92                           loc_5D71: 
 0D92  E8 0E7B R                		call	sub_5E5A 
 0D95  76 03                    		jbe	short loc_5D79 
 0D97  A2 0009 R                		mov	ds:var_639, al 
 0D9A                           loc_5D79: 
 0D9A  E8 0E7B R                		call	sub_5E5A 
 0D9D  74 02                    		jz	short loc_5D80 
 0D9F  73 03                    		jnb	short loc_5D83 
 0DA1                           loc_5D80: 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-52
                                                            

 0DA1  A0 0009 R                		mov	al, ds:var_639 
 0DA4                           loc_5D83: 
 0DA4  B4 05                    		mov	ah, 5 
 0DA6  CD 10                    		int	10h		; - VIDEO - SELECT DISPLAY PAGE 
                                					; AL = display page, 0-7  for modes 0 &	1,
				 0-3	for modes 2 & 3 
 0DA8  E9 0EF9 R                		jmp	SCNOK 
                                SCRSTT		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0DAB                           sub_5D8A	proc near		; CODE XREF: SCRSTT+2Bp SC
				RSTT+33p 
                                 
                                ; FUNCTION CHUNK AT 5EDC SIZE 00000003 BYTES 
                                 
 0DAB  0A D2                    		or	dl, dl 
 0DAD  75 10                    		jnz	short loc_5D9E 
 0DAF  B4 04                    		mov	ah, 4 
 0DB1  80 3E 000B R 50          		cmp	byte ptr ds:var_63b, 80 
 0DB6  74 02                    		jz	short loc_5D99 
 0DB8  B4 08                    		mov	ah, 8 
                                 
 0DBA                           loc_5D99:				; CODE XREF: sub_5D8A+Bj 
 0DBA  3A C4                    		cmp	al, ah 
 0DBC  73 06                    		jnb	short loc_5DA3 
 0DBE  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0DBF                           loc_5D9E:				; CODE XREF: sub_5D8A+2j 
 0DBF  3C 00                    		cmp	al, 0 
 0DC1  75 01                    		jnz	short loc_5DA3 
 0DC3  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0DC4                           loc_5DA3:				; CODE XREF: sub_5D8A+11j sub_5D8
				A+16j 
 0DC4  58                       		pop	ax 
 0DC5  58                       		pop	ax 
 0DC6  58                       		pop	ax 
 0DC7  E9 0EFD R                		jmp	SCNERR 
                                sub_5D8A	endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0DCA                           SETCLR		proc near 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-53
                                                            

 0DCA  E8 0B32 R                		call	SCRSAV 
 0DCD  8A 0F                    		mov	cl, [bx] 
 0DCF  43                       		inc	bx 
 0DD0  FE C1                    		inc	cl 
 0DD2  8A 2E 0016 R             		mov	ch, ds:var_646 
 0DD6  A0 000A R                		mov	al, ds:var_63a 
 0DD9  3C 00                    		cmp	al, 0 
 0DDB  74 4C                    		jz	short loc_5E08 
 0DDD  3C 01                    		cmp	al, 1 
 0DDF  74 03                    		jz	short loc_5DC3 
 0DE1                           loc_5DC0: 
 0DE1  E9 0EFD R                		jmp	SCNERR 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0DE4                           loc_5DC3: 
 0DE4  80 F9 06                 		cmp	cl, 6 
 0DE7  73 F8                    		jnb	short loc_5DC0 
 0DE9  E8 0E7B R                		call	sub_5E5A 
 0DEC  76 12                    		jbe	short loc_5DDF 
 0DEE  53                       		push	bx 
 0DEF  3C 10                    		cmp	al, 10h 
 0DF1  72 04                    		jb	short loc_5DD6 
 0DF3  24 0F                    		and	al, 0Fh 
 0DF5  0C 10                    		or	al, 10h 
 0DF7                           loc_5DD6: 
 0DF7  8A D8                    		mov	bl, al 
 0DF9  B7 00                    		mov	bh, 0 
 0DFB  B4 0B                    		mov	ah, 0Bh 
 0DFD  CD 10                    		int	10h		; - VIDEO - SET	COLOR PALETTE 
                                					; BH = 00h, BL = border	color 
                                					; BH = 01h, BL = palette (0-3) 
 0DFF  5B                       		pop	bx 
 0E00                           loc_5DDF: 
 0E00  33 D2                    		xor	dx, dx 
 0E02  E8 0E7B R                		call	sub_5E5A 
 0E05  76 04                    		jbe	short loc_5DEA 
 0E07  8A D0                    		mov	dl, al 
 0E09  B6 01                    		mov	dh, 1 
 0E0B                           loc_5DEA: 
 0E0B  E8 0E7B R                		call	sub_5E5A 
 0E0E  76 04                    		jbe	short loc_5DF3 
 0E10  8A D0                    		mov	dl, al 
 0E12  B6 01                    		mov	dh, 1 
 0E14                           loc_5DF3: 
 0E14  E8 0E7B R                		call	sub_5E5A 
 0E17  76 04                    		jbe	short loc_5DFC 
 0E19  8A D0                    		mov	dl, al 
 0E1B  B6 01                    		mov	dh, 1 
 0E1D                           loc_5DFC: 
 0E1D  0A F6                    		or	dh, dh 
 0E1F  74 4C                    		jz	short loc_5E4C 
 0E21  8A C2                    		mov	al, dl 
 0E23  24 01                    		and	al, 1 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-54
                                                            

 0E25  B7 01                    		mov	bh, 1 
 0E27  EB 3E                    		jmp	short loc_5E46 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0E29                           loc_5E08: 
 0E29  80 F9 05                 		cmp	cl, 5 
 0E2C  73 4A                    		jnb	short SETERR 
 0E2E  E8 0E7B R                		call	sub_5E5A 
 0E31  76 11                    		jbe	short loc_5E23 
 0E33  3C 20                    		cmp	al, 20h	; ' ' 
 0E35  73 41                    		jnb	short SETERR 
 0E37  A8 10                    		test	al, 10h 
 0E39  74 04                    		jz	short loc_5E1E 
 0E3B  24 0F                    		and	al, 0Fh 
 0E3D  0C 80                    		or	al, 80h 
 0E3F                           loc_5E1E: 
 0E3F  80 E5 70                 		and	ch, 70h 
 0E42  0A E8                    		or	ch, al 
 0E44                           loc_5E23: 
 0E44  E8 0E7B R                		call	sub_5E5A 
 0E47  76 13                    		jbe	short loc_5E3B 
 0E49  3C 10                    		cmp	al, 10h 
 0E4B  73 2B                    		jnb	short SETERR 
 0E4D  24 07                    		and	al, 7 
 0E4F  D0 E0                    		shl	al, 1 
 0E51  D0 E0                    		shl	al, 1 
 0E53  D0 E0                    		shl	al, 1 
 0E55  D0 E0                    		shl	al, 1 
 0E57  80 E5 8F                 		and	ch, 8Fh 
 0E5A  0A E8                    		or	ch, al 
 0E5C                           loc_5E3B: 
 0E5C  E8 0E7B R                		call	sub_5E5A 
 0E5F  76 0C                    		jbe	short loc_5E4C 
 0E61  3C 10                    		cmp	al, 10h 
 0E63  73 13                    		jnb	short SETERR 
 0E65  B7 00                    		mov	bh, 0 
 0E67                           loc_5E46: 
 0E67  8A D8                    		mov	bl, al 
 0E69  B4 0B                    		mov	ah, 0Bh 
 0E6B  CD 10                    		int	10h		; - VIDEO - SET	COLOR PALETTE 
                                					; BH = 00h, BL = border	color 
                                					; BH = 01h, BL = palette (0-3) 
 0E6D                           loc_5E4C: 
 0E6D  88 2E 0016 R             		mov	ds:var_646, ch 
 0E71  88 2E 0015 R             		mov	ds:var_645, ch 
 0E75  E9 0EF9 R                		jmp	SCNOK 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0E78                           SETERR:					; CODE XREF: SETCLR+62j SETCLR+6B
				j ... 
 0E78  E9 0EFD R                		jmp	SCNERR 
                                SETCLR		endp 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-55
                                                            

                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0E7B                           sub_5E5A	proc near		; CODE XREF: SCRSTT+13p 
                                					; SCRSTT:loc_5CDBp ... 
 0E7B  FE C9                    		dec	cl 
 0E7D  74 09                    		jz	short loc_5E67 
 0E7F  8B 07                    		mov	ax, [bx] 
 0E81  43                       		inc	bx 
 0E82  43                       		inc	bx 
 0E83  0A C0                    		or	al, al 
 0E85  86 E0                    		xchg	ah, al 
 0E87  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0E88                           loc_5E67:				; CODE XREF: sub_5E5A+2j 
 0E88  FE C1                    		inc	cl 
 0E8A  F9                       		stc 
 0E8B  C3                       		ret 
                                sub_5E5A	endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Machine specific routine to set screen width 
                                ; Height in [AL], width	in [CL] 
                                 
 0E8C                           SWIDTH		proc near 
 0E8C  E8 0B32 R                		call	SCRSAV 
 0E8F  BB 0F00 R                		mov	bx, offset MODES40 
 0E92  3C 28                    		cmp	al, 40		; Is the mode 40 characters wide?
				 
 0E94  74 17                    		jz	short WIDE40 
 0E96  3C 50                    		cmp	al, 80		; Or is	it 80 wide? 
 0E98  BB 0F08 R                		mov	bx, offset MODES80 
 0E9B  75 DB                    		jnz	short SETERR	; If not 40 or 80 columns, e
				rror 
 0E9D  A2 000B R                		mov	ds:var_63b, al 
 0EA0  BA 0280                  		mov	dx, 640 
 0EA3  B0 02                    		mov	al, 2 
 0EA5  C7 06 001C R 7F01        		mov	word ptr ds:var_64c, 7F01h 
 0EAB  EB 15                    		jmp	short loc_5EA1 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0EAD                           WIDE40:					; CODE XREF: SWIDTH+8j 
 0EAD  80 3E 000F R 07          		cmp	byte ptr ds:var_63f, 7 
 0EB2  74 45                    		jz	short SCNOK 
 0EB4  A2 000B R                		mov	ds:var_63b, al 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-56
                                                            

 0EB7  BA 0140                  		mov	dx, 320 
 0EBA  B0 01                    		mov	al, 1 
 0EBC  C7 06 001C R 3F02        		mov	word ptr ds:var_64c, 3F02h 
                                 
 0EC2                           loc_5EA1:				; CODE XREF: SWIDTH+1Fj 
 0EC2  80 3E 000A R 00          		cmp	byte ptr ds:var_63a, 0 
 0EC7  74 07                    		jz	short loc_5EAF 
 0EC9  A2 000A R                		mov	ds:var_63a, al 
 0ECC  89 16 0019 R             		mov	ds:var_649, dx 
                                 
 0ED0                           loc_5EAF:				; CODE XREF: SWIDTH+3Bj 
 0ED0  A0 000F R                		mov	al, ds:var_63f 
 0ED3  B4 00                    		mov	ah, 0 
 0ED5  03 D8                    		add	bx, ax 
 0ED7  2E: 8A 07                		mov	al, cs:[bx] 
 0EDA  B4 00                    		mov	ah, 0 
 0EDC  3A 06 000F R             		cmp	al, ds:var_63f 
 0EE0  74 17                    		jz	short SCNOK 
 0EE2  CD 10                    		int	10h		; - VIDEO - SET	VIDEO MODE 
                                					; AL = mode 
 0EE4  E8 072D R                		call	SCNRST 
 0EE7  33 C0                    		xor	ax, ax 
 0EE9  A2 0009 R                		mov	ds:var_639, al 
 0EEC  80 3E 000A R 02          		cmp	byte ptr ds:var_63a, 2 
 0EF1  74 06                    		jz	short SCNOK 
 0EF3  B4 0B                    		mov	ah, 0Bh 
 0EF5  33 DB                    		xor	bx, bx 
 0EF7  CD 10                    		int	10h		; - VIDEO - SET	COLOR PALETTE 
                                					; BH = 00h, BL = border	color 
                                					; BH = 01h, BL = palette (0-3) 
                                 
 0EF9                           SCNOK:					; CODE XREF: CLRSCN+2Aj 
                                					; CSRDSP:loc_5BC6j ... 
 0EF9  F8                       		clc 
                                 
 0EFA                           GOSRST:					; CODE XREF: sub_5D8A+153j 
 0EFA  E9 0A59 R                		jmp	SCRRST 
                                SWIDTH		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
                                ; START	OF FUNCTION CHUNK FOR sub_5D8A 
                                 
 0EFD                           SCNERR:					; CODE XREF: CSRATR:CSRERRj 
                                					; SCRSTT:loc_5CD8j ... 
 0EFD  F9                       		stc 
 0EFE  EB FA                    		jmp	short GOSRST 
                                ; END OF FUNCTION CHUNK	FOR sub_5D8A 
                                ; ---------------------------------------------
				------------------------------ 
                                 
                                PUBLIC  FKYFMT, FKYADV, STOREC, FETCHC 
                                PUBLIC  RIGHTC, LEFTC, UPC, DOWNC 
                                PUBLIC  SCALXY, MAPXYC, SETATR, READC, SETC, NS
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-57
                                                            

				ETCX 
                                PUBLIC  GTASPC, PIXSIZ 
                                PUBLIC  TUPC, TDOWNC, PGINIT, NREAD, NWRITE 
                                PUBLIC  PNTINI, SCANR, SCANL 
                                 
 0F00  00                       MODES40		db    0			; DATA XREF: SWIDTH+3o 
 0F01  01                       		db    1 
 0F02  00                       		db    0 
 0F03  01                       		db    1 
 0F04  04                       		db    4 
 0F05  05                       		db    5 
 0F06  05                       		db    5 
 0F07  07                       		db    7 
 0F08  02                       MODES80		db    2			; DATA XREF: SWIDTH+Co 
 0F09  03                       		db    3 
 0F0A  02                       		db    2 
 0F0B  03                       		db    3 
 0F0C  06                       		db    6 
 0F0D  06                       		db    6 
 0F0E  06                       		db    6 
 0F0F  07                       		db    7 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0F10                           FKYFMT		proc near 
 0F10  BB 0022 R                		mov	bx, offset var_652 
 0F13  80 3E 000B R 28          		cmp	byte ptr ds:var_63b, 40 ; 40 wide? 
 0F18  74 03                    		jz	short FKYFMX 
 0F1A  BB 0025 R                		mov	bx, offset var_655 
 0F1D                           FKYFMX: 
 0F1D  C3                       		ret 
                                FKYFMT		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0F1E                           FKYADV		proc near 
 0F1E  0B E4                    		or	sp, sp 
 0F20  C3                       		ret 
                                FKYADV		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0F21                           STOREC		proc near 
 0F21  A2 001B R                		mov	ds:var_64b, al 
 0F24  89 1E 0017 R             		mov	ds:var_647, bx 
 0F28  C3                       		ret 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-58
                                                            

                                STOREC		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0F29                           FETCHC		proc near 
 0F29  A0 001B R                		mov	al, ds:var_64b 
 0F2C  8B 1E 0017 R             		mov	bx, ds:var_647 
 0F30  C3                       		ret 
                                FETCHC		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0F31                           RIGHTC		proc near		; DATA XREF: DOGRPH+18o 
 0F31  51                       		push	cx 
 0F32  8A 0E 001C R             		mov	cl, ds:var_64c 
 0F36  D2 0E 001B R             		ror	byte ptr ds:var_64b, cl 
 0F3A  72 04                    		jb	short RGHTCX 
 0F3C  FF 06 0017 R             		inc	word ptr ds:var_647 
 0F40                           RGHTCX: 
 0F40  59                       		pop	cx 
 0F41  C3                       		ret 
                                RIGHTC		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0F42                           LEFTC		proc near 
 0F42  51                       		push	cx 
 0F43  8A 0E 001C R             		mov	cl, ds:var_64c 
 0F47  D2 06 001B R             		rol	byte ptr ds:var_64b, cl 
 0F4B  72 04                    		jb	short LEFTCX 
 0F4D  FF 0E 0017 R             		dec	word ptr ds:var_647 
 0F51                           LEFTCX: 
 0F51  59                       		pop	cx 
 0F52  C3                       		ret 
                                LEFTC		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
                                ; START	OF FUNCTION CHUNK FOR TUPC 
                                 
 0F53                           UPC: 
 0F53  B8 2000                  		mov	ax, 2000h 
 0F56  3B 06 0017 R             		cmp	ax, ds:var_647 
 0F5A  76 08                    		jbe	short loc_5F43 
 0F5C  2D 0050                  		sub	ax, 80 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-59
                                                            

 0F5F  01 06 0017 R             		add	ds:var_647, ax 
 0F63  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0F64                           loc_5F43: 
 0F64  29 06 0017 R             		sub	ds:var_647, ax 
 0F68  C3                       		ret 
                                ; END OF FUNCTION CHUNK	FOR TUPC 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0F69                           DOWNC		proc near 
 0F69  B8 2000                  		mov	ax, 2000h 
 0F6C  3B 06 0017 R             		cmp	ax, ds:var_647 
 0F70  76 05                    		jbe	short DOWNCX 
 0F72  01 06 0017 R             		add	ds:var_647, ax 
 0F76  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0F77                           DOWNCX: 
 0F77  2D 0050                  		sub	ax, 80 
 0F7A  29 06 0017 R             		sub	ds:var_647, ax 
 0F7E  C3                       		ret 
                                DOWNC		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0F7F                           SCALXY		proc near 
 0F7F  0A ED                    		or	ch, ch 
 0F81  78 1B                    		js	short loc_5F7D 
 0F83  8B 1E 0019 R             		mov	bx, ds:var_649 
 0F87  3B CB                    		cmp	cx, bx 
 0F89  9F                       		lahf 
 0F8A  72 03                    		jb	short loc_5F6E 
 0F8C  8B CB                    		mov	cx, bx 
 0F8E  49                       		dec	cx 
                                 
 0F8F                           loc_5F6E:				; CODE XREF: SCALXY+Bj	SCALXY+22
				j 
 0F8F  0A F6                    		or	dh, dh 
 0F91  78 10                    		js	short loc_5F82 
 0F93  BB 00C8                  		mov	bx, 200 
 0F96  3B D3                    		cmp	dx, bx 
 0F98  72 0C                    		jb	short loc_5F85 
 0F9A  8B D3                    		mov	dx, bx 
 0F9C  4A                       		dec	dx 
 0F9D  C3                       		ret 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-60
                                                            

                                ; ---------------------------------------------
				------------------------------ 
                                 
 0F9E                           loc_5F7D:				; CODE XREF: SCALXY+2j 
 0F9E  33 C9                    		xor	cx, cx 
 0FA0  9F                       		lahf 
 0FA1  EB EC                    		jmp	short loc_5F6E 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0FA3                           loc_5F82:				; CODE XREF: SCALXY+12j 
 0FA3  33 D2                    		xor	dx, dx 
 0FA5  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0FA6                           loc_5F85:				; CODE XREF: SCALXY+19j 
 0FA6  9E                       		sahf 
 0FA7  C3                       		ret 
                                SCALXY		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0FA8                           MAPXYC		proc near 
 0FA8  8B C1                    		mov	ax, cx 
 0FAA  8A 0E 000A R             		mov	cl, ds:var_63a 
 0FAE  FE C1                    		inc	cl 
 0FB0  D3 C8                    		ror	ax, cl 
 0FB2  50                       		push	ax 
 0FB3  D2 C4                    		rol	ah, cl 
 0FB5  8A EC                    		mov	ch, ah 
 0FB7  33 F6                    		xor	si, si 
 0FB9  8B C2                    		mov	ax, dx 
 0FBB  D1 E8                    		shr	ax, 1 
 0FBD  73 03                    		jnb	short loc_5FA1 
 0FBF  BE 2000                  		mov	si, 2000h 
 0FC2                           loc_5FA1: 
 0FC2  B1 50                    		mov	cl, 80 
 0FC4  F6 E1                    		mul	cl 
 0FC6  5A                       		pop	dx 
 0FC7  B6 00                    		mov	dh, 0 
 0FC9  03 C2                    		add	ax, dx 
 0FCB  03 F0                    		add	si, ax 
 0FCD  89 36 0017 R             		mov	ds:var_647, si 
 0FD1  8A 0E 001C R             		mov	cl, ds:var_64c 
 0FD5  FE C9                    		dec	cl 
 0FD7  D2 E5                    		shl	ch, cl 
 0FD9  8A CD                    		mov	cl, ch 
 0FDB  A0 001D R                		mov	al, ds:var_64d 
 0FDE  D2 C8                    		ror	al, cl 
 0FE0  A2 001B R                		mov	ds:var_64b, al 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-61
                                                            

 0FE3  C3                       		ret 
                                MAPXYC		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0FE4                           SETATR		proc near 
 0FE4  3C 04                    		cmp	al, 4 
 0FE6  73 03                    		jnb	short STATRX 
 0FE8  A2 0030 R                		mov	ds:var_660, al 
 0FEB                           STATRX: 
 0FEB  F8                       		clc 
 0FEC  C3                       		ret 
                                SETATR		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0FED                           READC		proc near 
 0FED  8B 36 0017 R             		mov	si, ds:var_647 
 0FF1  1E                       		push	ds 
 0FF2  B8 B800                  		mov	ax, 0B800h 
 0FF5  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 0FF7  8A 04                    		mov	al, [si] 
 0FF9  1F                       		pop	ds 
                                		assume ds:nothing 
 0FFA  8A 26 001B R             		mov	ah, ds:var_64b 
 0FFE  F6 D4                    		not	ah 
 1000  22 C4                    		and	al, ah 
 1002  8A 0E 001C R             		mov	cl, ds:var_64c 
 1006                           RDCLOP: 
 1006  D3 C0                    		rol	ax, cl 
 1008  73 FC                    		jnb	short RDCLOP 
 100A  8A C4                    		mov	al, ah 
 100C  C3                       		ret 
                                READC		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 100D                           SETC		proc near 
 100D  51                       		push	cx 
 100E  1E                       		push	ds 
 100F  E8 1019 R                		call	SETPTR 
 1012  20 2C                    		and	[si], ch 
 1014  08 04                    		or	[si], al 
 1016  1F                       		pop	ds 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-62
                                                            

 1017  59                       		pop	cx 
 1018  C3                       		ret 
                                SETC		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Set DS:SI to point at	current	"C" 
                                 
 1019                           SETPTR		proc near 
 1019  8A 26 001B R             		mov	ah, ds:var_64b 
 101D  8A EC                    		mov	ch, ah 
 101F  A0 0030 R                		mov	al, ds:var_660 
 1022  80 3E 000A R 01          		cmp	byte ptr ds:var_63a, 1 
 1027  74 02                    		jz	short loc_600A 
 1029  24 01                    		and	al, 1 
 102B                           loc_600A: 
 102B  8A 0E 001C R             		mov	cl, ds:var_64c 
 102F                           loc_600E: 
 102F  D2 C8                    		ror	al, cl 
 1031  D2 C4                    		rol	ah, cl 
 1033  72 FA                    		jb	short loc_600E 
 1035  BE B800                  		mov	si, 0B800h 
 1038  56                       		push	si 
 1039  8B 36 0017 R             		mov	si, ds:var_647 
 103D  1F                       		pop	ds 
 103E  C3                       		ret 
                                SETPTR		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 103F                           NSETCX		proc near 
 103F  1E                       		push	ds 
 1040  E8 1019 R                		call	SETPTR 
 1043  F6 C5 80                 		test	ch, 80h 
 1046  74 0E                    		jz	short loc_6035 
 1048                           loc_6027: 
 1048  4B                       		dec	bx 
 1049  78 41                    		js	short loc_606B 
 104B  20 2C                    		and	[si], ch 
 104D  08 04                    		or	[si], al 
 104F  D2 C8                    		ror	al, cl 
 1051  D2 CD                    		ror	ch, cl 
 1053  72 F3                    		jb	short loc_6027 
 1055  46                       		inc	si 
 1056                           loc_6035: 
 1056  51                       		push	cx 
 1057  50                       		push	ax 
 1058  BA 0007                  		mov	dx, 7 
 105B  8A E0                    		mov	ah, al 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-63
                                                            

 105D                           loc_603C: 
 105D  D2 C8                    		ror	al, cl 
 105F  0A E0                    		or	ah, al 
 1061  4A                       		dec	dx 
 1062  75 F9                    		jnz	short loc_603C 
 1064  8A C4                    		mov	al, ah 
 1066  26: 8A 0E 000A R         		mov	cl, es:var_63a 
 106B  D3 CB                    		ror	bx, cl 
 106D  D1 CB                    		ror	bx, 1 
 106F  D1 CB                    		ror	bx, 1 
 1071  EB 04                    		jmp	short loc_6056 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 1073                           loc_6052: 
 1073  89 04                    		mov	[si], ax 
 1075  46                       		inc	si 
 1076  46                       		inc	si 
 1077                           loc_6056: 
 1077  FE CB                    		dec	bl 
 1079  79 F8                    		jns	short loc_6052 
 107B  D0 E7                    		shl	bh, 1 
 107D  73 03                    		jnb	short loc_6061 
 107F  88 04                    		mov	[si], al 
 1081  46                       		inc	si 
 1082                           loc_6061: 
 1082  B3 00                    		mov	bl, 0 
 1084  D3 C3                    		rol	bx, cl 
 1086  D1 C3                    		rol	bx, 1 
 1088  58                       		pop	ax 
 1089  59                       		pop	cx 
 108A  EB BC                    		jmp	short loc_6027 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 108C                           loc_606B: 
 108C  1F                       		pop	ds 
 108D  C3                       		ret 
                                NSETCX		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Get screen aspect ratio 
                                 
 108E                           GTASPC		proc near 
 108E  BB 00D5                  		mov	bx, 213		; FP number! 
 1091  BA 0133                  		mov	dx, 307 
 1094  80 3E 000A R 01          		cmp	byte ptr ds:var_63a, 1 
 1099  74 06                    		jz	short GTASPX 
 109B  BB 006B                  		mov	bx, 107		; FP number! 
 109E  BA 0267                  		mov	dx, 615 
 10A1                           GTASPX: 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-64
                                                            

 10A1  C3                       		ret 
                                GTASPC		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 10A2                           PIXSIZ		proc near 
 10A2  A0 001C R                		mov	al, ds:var_64c 
 10A5  C3                       		ret 
                                PIXSIZ		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 10A6                           TUPC		proc near 
 10A6  83 3E 0017 R 4F          		cmp	word ptr ds:var_647, 4Fh 
 10AB  76 03                    		jbe	short TUPCX 
 10AD  E9 0F53 R                		jmp	UPC 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 10B0                           TUPCX: 
 10B0  F9                       		stc 
 10B1  C3                       		ret 
                                TUPC		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 10B2                           TDOWNC		proc near 
 10B2  81 3E 0017 R 3EF0        		cmp	word ptr ds:var_647, 3EF0h 
 10B8  73 F6                    		jnb	short TUPCX 
 10BA  E9 0F69 R                		jmp	DOWNC 
                                TDOWNC		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
 10BD  11C0 R                   PGDISP		dw offset FNOR		; DATA XREF: PGINIT+26
				o 
 10BF  11C3 R                   		dw offset FNAND 
 10C1  11C6 R                   		dw offset FNINV 
 10C3  11C8 R                   		dw offset FNSET 
 10C5  11CB R                   		dw offset FNXOR 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-65
                                                            

 10C7                           PGINIT		proc near 
 10C7  9F                       		lahf 
 10C8  89 1E 0031 R             		mov	ds:var_661, bx 
 10CC  51                       		push	cx 
 10CD  D1 E9                    		shr	cx, 1 
 10CF  D1 E9                    		shr	cx, 1 
 10D1  D1 E9                    		shr	cx, 1 
 10D3  89 0E 0033 R             		mov	ds:var_663, cx 
 10D7  59                       		pop	cx 
 10D8  80 E1 07                 		and	cl, 7 
 10DB  B5 08                    		mov	ch, 8 
 10DD  2A E9                    		sub	ch, cl 
 10DF  80 E5 07                 		and	ch, 7 
 10E2  89 0E 0035 R             		mov	WORD PTR ds:var_665, cx 
 10E6  9E                       		sahf 
 10E7  73 13                    		jnb	short PGINIX 
 10E9  3C 05                    		cmp	al, 5 
 10EB  73 0F                    		jnb	short PGINIX 
 10ED  BB 10BD R                		mov	bx, offset PGDISP 
 10F0  B4 00                    		mov	ah, 0 
 10F2  D0 E0                    		shl	al, 1 
 10F4  03 D8                    		add	bx, ax 
 10F6  2E: 8B 07                		mov	ax, cs:[bx] 
 10F9  A3 0037 R                		mov	ds:var_667, ax 
                                 
 10FC                           PGINIX:					; CODE XREF: PGINIT+20j PGINIT+24
				j 
 10FC  C3                       		ret 
                                PGINIT		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 10FD                           NREAD		proc near 
 10FD  1E                       		push	ds 
 10FE  8B 3E 0031 R             		mov	di, ds:var_661 
 1102  8B 1E 0033 R             		mov	bx, ds:var_663 
 1106  E8 1019 R                		call	SETPTR 
 1109  8A 34                    		mov	dh, [si] 
 110B  B4 00                    		mov	ah, 0 
                                 
 110D                           loc_60EC:				; CODE XREF: NREAD+1Bj 
 110D  F6 C5 80                 		test	ch, 80h 
 1110  74 08                    		jz	short loc_60F9 
 1112  D2 C5                    		rol	ch, cl 
 1114  D2 E6                    		shl	dh, cl 
 1116  02 E1                    		add	ah, cl 
 1118  EB F3                    		jmp	short loc_60EC 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 111A                           loc_60F9:				; CODE XREF: NREAD+13j 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-66
                                                            

 111A  8A CC                    		mov	cl, ah 
 111C  EB 06                    		jmp	short loc_6103 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 111E                           loc_60FD:				; CODE XREF: NREAD+32j 
 111E  26: 88 35                		mov	es:[di], dh 
 1121  47                       		inc	di 
 1122  8A F0                    		mov	dh, al 
                                 
 1124                           loc_6103:				; CODE XREF: NREAD+1Fj 
 1124  46                       		inc	si 
 1125  8A 04                    		mov	al, [si] 
 1127  8A E7                    		mov	ah, bh 
 1129  D3 E0                    		shl	ax, cl 
 112B  0A F4                    		or	dh, ah 
 112D  FE CB                    		dec	bl 
 112F  79 ED                    		jns	short loc_60FD 
 1131  26: 8A 0E 0036 R         		mov	cl, es:var_666 
 1136  0A C9                    		or	cl, cl 
 1138  74 08                    		jz	short NREADX 
 113A  D2 EE                    		shr	dh, cl 
 113C  D2 E6                    		shl	dh, cl 
 113E  26: 88 35                		mov	es:[di], dh 
 1141  47                       		inc	di 
                                 
 1142                           NREADX:					; CODE XREF: NREAD+3Bj 
 1142  1F                       		pop	ds 
 1143  89 3E 0031 R             		mov	ds:var_661, di 
 1147  C3                       		ret 
                                NREAD		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 1148                           NWRITE		proc near 
 1148  1E                       		push	ds 
 1149  8B 3E 0031 R             		mov	di, ds:var_661 
 114D  8B 1E 0033 R             		mov	bx, ds:var_663 
 1151  E8 1019 R                		call	SETPTR 
 1154  8B 14                    		mov	dx, [si] 
 1156  B4 00                    		mov	ah, 0 
                                 
 1158                           loc_6137: 
 1158  F6 C5 80                 		test	ch, 80h 
 115B  74 08                    		jz	short loc_6144 
 115D  D2 C5                    		rol	ch, cl 
 115F  D3 C2                    		rol	dx, cl 
 1161  02 E1                    		add	ah, cl 
 1163  EB F3                    		jmp	short loc_6137 
                                ; ---------------------------------------------
				------------------------------ 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-67
                                                            

                                 
 1165                           loc_6144:				; CODE XREF: NWRITE+13j 
 1165  8A CC                    		mov	cl, ah 
 1167  EB 0B                    		jmp	short loc_6153 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 1169                           loc_6148:				; CODE XREF: NWRITE+39j 
 1169  88 14                    		mov	[si], dl 
 116B  46                       		inc	si 
 116C  8A D6                    		mov	dl, dh 
 116E  46                       		inc	si 
 116F  8A 34                    		mov	dh, [si] 
 1171  4E                       		dec	si 
 1172  D3 C2                    		rol	dx, cl 
                                 
 1174                           loc_6153:				; CODE XREF: NWRITE+1Fj 
 1174  26: 8A 05                		mov	al, es:[di] 
 1177  47                       		inc	di 
 1178  26: FF 16 0037 R         		call	word ptr es:var_667 
 117D  D3 CA                    		ror	dx, cl 
 117F  FE CB                    		dec	bl 
 1181  79 E6                    		jns	short loc_6148 
 1183  26: 8A 1E 0035 R         		mov	bl, es:var_665 
 1188  0A DB                    		or	bl, bl 
 118A  75 07                    		jnz	short loc_6172 
 118C  4F                       		dec	di 
 118D  0A C9                    		or	cl, cl 
 118F  74 29                    		jz	short loc_6199 
 1191  EB 11                    		jmp	short loc_6183 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 1193                           loc_6172:				; CODE XREF: NWRITE+42j 
 1193  02 CB                    		add	cl, bl 
 1195  80 F9 08                 		cmp	cl, 8 
 1198  72 0A                    		jb	short loc_6183 
 119A  88 14                    		mov	[si], dl 
 119C  74 1C                    		jz	short loc_6199 
 119E  46                       		inc	si 
 119F  8A D6                    		mov	dl, dh 
 11A1  80 E9 08                 		sub	cl, 8 
                                 
 11A4                           loc_6183:				; CODE XREF: NWRITE+49j NWRITE+50
				j 
 11A4  8A 04                    		mov	al, [si] 
 11A6  D2 E0                    		shl	al, cl 
 11A8  D2 E8                    		shr	al, cl 
 11AA  8A F0                    		mov	dh, al 
 11AC  B5 08                    		mov	ch, 8 
 11AE  2A E9                    		sub	ch, cl 
 11B0  8A CD                    		mov	cl, ch 
 11B2  D2 EA                    		shr	dl, cl 
 11B4  D2 E2                    		shl	dl, cl 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-68
                                                            

 11B6  0A F2                    		or	dh, dl 
 11B8  88 34                    		mov	[si], dh 
                                 
 11BA                           loc_6199:				; CODE XREF: NWRITE+47j NWRITE+54
				j 
 11BA  1F                       		pop	ds 
 11BB  89 3E 0031 R             		mov	ds:var_661, di 
 11BF  C3                       		ret 
                                NWRITE		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 11C0                           FNOR: 
 11C0  0A D0                    		or	dl, al 
 11C2  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 11C3                           FNAND: 
 11C3  22 D0                    		and	dl, al 
 11C5  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 11C6                           FNINV: 
 11C6  34 FF                    		xor	al, 0FFh 
                                 
 11C8                           FNSET: 
 11C8  8A D0                    		mov	dl, al 
 11CA  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 11CB                           FNXOR: 
 11CB  32 D0                    		xor	dl, al 
 11CD  C3                       		ret 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 11CE                           PNTINI		proc near 
 11CE  3C 04                    		cmp	al, 4 
 11D0  72 02                    		jb	short PNTINX 
 11D2  B0 00                    		mov	al, 0 
 11D4                           PNTINX: 
 11D4  A2 0039 R                		mov	ds:var_669, al 
 11D7  F8                       		clc 
 11D8  C3                       		ret 
                                PNTINI		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-69
                                                            

				============================== 
                                 
                                 
 11D9                           SCANR		proc near		; CODE XREF: SCANR1p 
 11D9  1E                       		push	ds 
 11DA  8B FA                    		mov	di, dx 
 11DC  E8 1019 R                		call	SETPTR 
 11DF  E8 1283 R                		call	sub_6262 
 11E2  2A DC                    		sub	bl, ah 
 11E4  8A D3                    		mov	dl, bl 
 11E6  8A 24                    		mov	ah, [si] 
 11E8  51                       		push	cx 
                                 
 11E9                           loc_61C8:				; CODE XREF: SCANR+14j 
 11E9  D2 CC                    		ror	ah, cl 
 11EB  D2 CD                    		ror	ch, cl 
 11ED  72 FA                    		jb	short loc_61C8 
 11EF  59                       		pop	cx 
 11F0  B3 00                    		mov	bl, 0 
 11F2  26: 8A 3E 0039 R         		mov	bh, es:var_669 
 11F7  26: 80 3E 000A R 01      		cmp	byte ptr es:var_63a, 1 
 11FD  74 03                    		jz	short loc_61E1 
 11FF  80 E7 01                 		and	bh, 1 
                                 
 1202                           loc_61E1:				; CODE XREF: SCANR+24j	SCANR+36j
				 ... 
 1202  8A C3                    		mov	al, bl 
 1204  D3 C0                    		rol	ax, cl 
 1206  3A C7                    		cmp	al, bh 
 1208  75 16                    		jnz	short loc_61FF 
 120A  4F                       		dec	di 
 120B  74 0B                    		jz	short loc_61F7 
 120D  D2 CD                    		ror	ch, cl 
 120F  72 F1                    		jb	short loc_61E1 
 1211  46                       		inc	si 
 1212  8A 24                    		mov	ah, [si] 
 1214  FE CA                    		dec	dl 
 1216  75 EA                    		jnz	short loc_61E1 
                                 
 1218                           loc_61F7:				; CODE XREF: SCANR+32j 
 1218  33 DB                    		xor	bx, bx 
 121A  8B D3                    		mov	dx, bx 
 121C  8A CA                    		mov	cl, dl 
 121E  1F                       		pop	ds 
 121F  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 1220                           loc_61FF:				; CODE XREF: SCANR+2Fj 
 1220  26: 89 36 0000 E         		mov	es:CSAVEA, si 
 1225  26: 88 2E 0000 E         		mov	BYTE PTR es:CSAVEM, ch 
 122A  57                       		push	di 
 122B  26: 8A 36 0030 R         		mov	dh, es:var_660 
 1230  8A DE                    		mov	bl, dh 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-70
                                                            

 1232  51                       		push	cx 
 1233  26: 80 3E 000A R 01      		cmp	byte ptr es:var_63a, 1 
 1239  74 09                    		jz	short loc_6223 
 123B  80 E6 01                 		and	dh, 1 
 123E  8A DE                    		mov	bl, dh 
 1240  EB 02                    		jmp	short loc_6223 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 1242                           loc_6221:				; CODE XREF: SCANR+6Dj 
 1242  D2 C6                    		rol	dh, cl 
                                 
 1244                           loc_6223:				; CODE XREF: SCANR+60j	SCANR+67j
				 
 1244  D2 CD                    		ror	ch, cl 
 1246  72 FA                    		jb	short loc_6221 
 1248  59                       		pop	cx 
 1249  33 FF                    		xor	di, di 
 124B  EB 08                    		jmp	short loc_6234 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 124D                           loc_622C:				; CODE XREF: SCANR+8Bj	SCANR+92j
				 
 124D  B0 00                    		mov	al, 0 
 124F  D3 C0                    		rol	ax, cl 
 1251  3A C7                    		cmp	al, bh 
 1253  74 1B                    		jz	short loc_624F 
                                 
 1255                           loc_6234:				; CODE XREF: SCANR+72j 
 1255  3A C3                    		cmp	al, bl 
 1257  74 06                    		jz	short loc_623E 
 1259  20 2C                    		and	[si], ch 
 125B  08 34                    		or	[si], dh 
 125D  B3 FF                    		mov	bl, 0FFh 
                                 
 125F                           loc_623E:				; CODE XREF: SCANR+7Ej 
 125F  47                       		inc	di 
 1260  D2 CE                    		ror	dh, cl 
 1262  D2 CD                    		ror	ch, cl 
 1264  72 E7                    		jb	short loc_622C 
 1266  46                       		inc	si 
 1267  8A 24                    		mov	ah, [si] 
 1269  FE CA                    		dec	dl 
 126B  75 E0                    		jnz	short loc_622C 
 126D  D2 C5                    		rol	ch, cl 
 126F  4E                       		dec	si 
                                 
 1270                           loc_624F:				; CODE XREF: SCANR+7Aj 
 1270  5A                       		pop	dx 
 1271  FE C3                    		inc	bl 
 1273  74 02                    		jz	short loc_6256 
 1275  B1 00                    		mov	cl, 0 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-71
                                                            

 1277                           loc_6256:				; CODE XREF: SCANR+9Aj 
 1277  8B DF                    		mov	bx, di 
 1279  1F                       		pop	ds 
 127A  89 36 0017 R             		mov	ds:var_647, si 
 127E  88 2E 001B R             		mov	ds:var_64b, ch 
 1282  C3                       		ret 
                                SCANR		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 1283                           sub_6262	proc near 
 1283  8B C6                    		mov	ax, si 
 1285  BB 2000                  		mov	bx, 2000h 
 1288  3B C3                    		cmp	ax, bx 
 128A  72 02                    		jb	short loc_626D 
 128C  2B C3                    		sub	ax, bx 
 128E                           loc_626D: 
 128E  B3 50                    		mov	bl, 80 
 1290  F6 F3                    		div	bl 
 1292  C3                       		ret 
                                sub_6262	endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 1293                           SCANL		proc near 
 1293  1E                       		push	ds 
 1294  E8 1019 R                		call	SETPTR 
 1297  8A F0                    		mov	dh, al 
 1299  E8 1283 R                		call	sub_6262 
 129C  8A D4                    		mov	dl, ah 
 129E  8A 24                    		mov	ah, [si] 
 12A0  51                       		push	cx 
 12A1                           loc_6280: 
 12A1  D2 CC                    		ror	ah, cl 
 12A3  D2 CD                    		ror	ch, cl 
 12A5  72 FA                    		jb	short loc_6280 
 12A7  59                       		pop	cx 
 12A8  26: 8A 1E 0030 R         		mov	bl, es:var_660 
 12AD  26: 8A 3E 0039 R         		mov	bh, es:var_669 
 12B2  26: 80 3E 000A R 01      		cmp	byte ptr es:var_63a, 1 
 12B8  74 04                    		jz	short loc_629D 
 12BA  81 E3 0101               		and	bx, 101h 
 12BE                           loc_629D: 
 12BE  D2 CF                    		ror	bh, cl 
 12C0  D2 CB                    		ror	bl, cl 
 12C2  33 FF                    		xor	di, di 
 12C4  EB 13                    		jmp	short loc_62B8 
                                ; ---------------------------------------------
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-72
                                                            

				------------------------------ 
                                 
 12C6                           loc_62A5: 
 12C6  B0 00                    		mov	al, 0 
 12C8  D3 C8                    		ror	ax, cl 
 12CA  3A C7                    		cmp	al, bh 
 12CC  74 18                    		jz	short loc_62C5 
 12CE  3A C3                    		cmp	al, bl 
 12D0  74 06                    		jz	short loc_62B7 
 12D2  20 2C                    		and	[si], ch 
 12D4  08 34                    		or	[si], dh 
 12D6  B3 FF                    		mov	bl, -1 
 12D8                           loc_62B7: 
 12D8  47                       		inc	di 
 12D9                           loc_62B8: 
 12D9  D2 C6                    		rol	dh, cl 
 12DB  D2 C5                    		rol	ch, cl 
 12DD  72 E7                    		jb	short loc_62A5 
 12DF  4E                       		dec	si 
 12E0  8A 24                    		mov	ah, [si] 
 12E2  FE CA                    		dec	dl 
 12E4  79 E0                    		jns	short loc_62A5 
 12E6                           loc_62C5: 
 12E6  8A C3                    		mov	al, bl 
 12E8  8B DF                    		mov	bx, di 
 12EA  0B DB                    		or	bx, bx 
 12EC  75 04                    		jnz	short loc_62D1 
 12EE  B1 00                    		mov	cl, 0 
 12F0  1F                       		pop	ds 
 12F1  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 12F2                           loc_62D1: 
 12F2  D2 CD                    		ror	ch, cl 
 12F4  72 01                    		jb	short loc_62D6 
 12F6  46                       		inc	si 
 12F7                           loc_62D6: 
 12F7  FE C0                    		inc	al 
 12F9  74 02                    		jz	short loc_62DC 
 12FB  B1 00                    		mov	cl, 0 
 12FD                           loc_62DC: 
 12FD  1F                       		pop	ds 
 12FE  88 2E 001B R             		mov	ds:var_64b, ch 
 1302  89 36 0017 R             		mov	ds:var_647, si 
 1306  C3                       		ret 
                                SCANL		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
                                ; Start of another module? 
                                ;		align 10h 
                                 
                                PUBLIC  RDPEN, RDTRIG, RDSTIK, POLLEV 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-73
                                                            

                                 
 1307  00                       ISREVT		db 0			; DATA XREF: CM2ISR:loc_5262w 
                                					; TIMISR+1Aw ... 
 1308  0000                     LPWSDN		dw 0			; DATA XREF: LPENQR+35w RDPEN+C
				o ... 
 130A  0000                     LPLGX		dw 0			; DATA XREF: LPENQR+38w 
 130C  0000                     LPLGY		dw 0			; DATA XREF: LPENQR+3Cw 
 130E  0000                     LPDOWN		dw 0			; DATA XREF: LPENQR+23r LPENQR+
				32w ... 
                                					; -1 if	currently down,	0 if up 
 1310  0000                     LPGX		dw 0			; DATA XREF: LPENQR+Fw 
 1312  0000                     LPGY		dw 0			; DATA XREF: LPENQR+1Fw 
 1314  0001                     LPROW		dw 1			; DATA XREF: LPENQR+40w 
 1316  0001                     LPCOL		dw 1			; DATA XREF: LPENQR+44w 
 1318  0001                     LPLROW		dw 1			; DATA XREF: LPENQR+15w 
 131A  0001                     LPLCOL		dw 1			; DATA XREF: LPENQR+1Bw 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 131C                           LPENQR		proc near 
 131C  1E                       		push	ds 
 131D  0E                       		push	cs 
 131E  1F                       		pop	ds 
                                		assume ds:CSEG 
 131F  50                       		push	ax 
 1320  53                       		push	bx 
 1321  51                       		push	cx 
 1322  52                       		push	dx 
 1323  B4 04                    		mov	ah, 4 
 1325  CD 10                    		int	10h		; - VIDEO - READ LIGHT PEN POSITION 
				(all but PS) 
                                					; Return: AH = 00h light pen switch not	ac
				tivated 
                                					; AH = 01h light pen values in registers 
                                					; DH,DL	= row,columnCH = raster	line (0-19
				9) (EGA) old graphics	modes 
                                					; CX = (EGA) raster line 
                                					; BX = pixel column 
 1327  0A E4                    		or	ah, ah 
 1329  74 3F                    		jz	short NOSWIT 
 132B  89 1E 1310 R             		mov	LPGX, bx 
 132F  FE C6                    		inc	dh 
 1331  88 36 1318 R             		mov	byte ptr LPLROW, dh 
 1335  FE C2                    		inc	dl 
 1337  88 16 131A R             		mov	byte ptr LPLCOL, dl 
 133B  88 2E 1312 R             		mov	byte ptr LPGY, ch 
 133F  83 3E 130E R FF          		cmp	LPDOWN,	-1 
 1344  74 1E                    		jz	short LPENQX 
 1346  C6 06 1307 R 01          		mov	ISREVT,	1 
 134B  B8 FFFF                  		mov	ax, -1 
 134E  A3 130E R                		mov	LPDOWN,	ax 
 1351  A3 1308 R                		mov	LPWSDN,	ax 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-74
                                                            

 1354  89 1E 130A R             		mov	LPLGX, bx 
 1358  88 2E 130C R             		mov	byte ptr LPLGY,	ch 
 135C  88 36 1314 R             		mov	byte ptr LPROW,	dh 
 1360  88 16 1316 R             		mov	byte ptr LPCOL,	dl 
 1364                           LPENQX: 
 1364  5A                       		pop	dx 
 1365  59                       		pop	cx 
 1366  5B                       		pop	bx 
 1367  58                       		pop	ax 
 1368  1F                       		pop	ds 
                                		assume ds:nothing 
 1369  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 136A                           NOSWIT: 
 136A  C7 06 130E R 0000        		mov	ds:LPDOWN, 0 
 1370  EB F2                    		jmp	short LPENQX 
                                LPENQR		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Light	pen control via	[AL] 
                                ;  -2: Pen ON 
                                ;  -1: Pen OFF 
                                ;   0: Return -1 if pen	was down since last pol
				l, else 0. 
                                ;   1: Return X	Graphics Coordinate where pen w
				as last activated. 
                                ;   2: Return Y	Graphics Coordinate where pen w
				as last activated. 
                                ;   3: Return -1 if pen	is currently down, 0 if
					currently up. 
                                ;   4: Return last known valid X Graphics Coord
				inate. 
                                ;   5: Return last known valid Y Graphics Coord
				inate. 
                                ;   6: Return character	row where pen was last 
				activated. 
                                ;   7: Return character	column where pen was la
				st activated. 
                                ;   8: Return last known character row. 
                                ;   9: Return last known character column. 
                                 
 1372                           RDPEN		proc near 
 1372  1E                       		push	ds 
 1373  0E                       		push	cs 
 1374  1F                       		pop	ds 
                                		assume ds:CSEG 
 1375  0A C0                    		or	al, al 
 1377  78 17                    		js	short LPNOFF 
 1379  56                       		push	si 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-75
                                                            

 137A  D0 E0                    		shl	al, 1 
 137C  B4 00                    		mov	ah, 0 
 137E  BE 1308 R                		mov	si, offset LPWSDN 
 1381  03 F0                    		add	si, ax 
 1383  2E: 8B 1C                		mov	bx, cs:[si] 
 1386  0B C0                    		or	ax, ax 
 1388  75 03                    		jnz	short RDPENX 
 138A  A3 1308 R                		mov	LPWSDN,	ax	; Not down since last poll 
 138D                           RDPENX: 
 138D  5E                       		pop	si 
 138E  1F                       		pop	ds 
                                		assume ds:nothing 
 138F  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 1390                           LPNOFF: 
 1390  3C FE                    		cmp	al, -2		; Or should it be ON? 
 1392  74 07                    		jz	short LPNON 
 1394  80 26 0701 R FE          		and	ds:EVTSET, 0FEh	; Disable light	pen readi
				ng 
 1399  1F                       		pop	ds 
 139A  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 139B                           LPNON: 
 139B  80 0E 0701 R 01          		or	ds:EVTSET, 1	; Enable light pen reading 
 13A0  33 C0                    		xor	ax, ax 
 13A2  A3 130E R                		mov	ds:LPDOWN, ax 
 13A5  A3 1308 R                		mov	ds:LPWSDN, ax	; Not down since last poll 
 13A8  1F                       		pop	ds 
 13A9  C3                       		ret 
                                RDPEN		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 13AA                           RDTRIG		proc near 
 13AA  52                       		push	dx 
 13AB  51                       		push	cx 
 13AC  33 C9                    		xor	cx, cx 
 13AE  8A C8                    		mov	cl, al 
 13B0  3C 01                    		cmp	al, 1 
 13B2  75 02                    		jnz	short loc_639F 
 13B4  B1 02                    		mov	cl, 2 
 13B6                           loc_639F: 
 13B6  3C 02                    		cmp	al, 2 
 13B8  75 02                    		jnz	short loc_63A5 
 13BA  B1 01                    		mov	cl, 1 
 13BC                           loc_63A5: 
 13BC  80 C1 04                 		add	cl, 4 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-76
                                                            

 13BF  BA 0201                  		mov	dx, 201h 
 13C2  EC                       		in	al, dx		; Game I/O port 
                                					; bits 0-3: Coordinates	(resistive, time-d
				ependent inputs) 
                                					; bits 4-7: Buttons/Triggers (digital inpu
				ts) 
 13C3  F6 D0                    		not	al 
 13C5  D2 C8                    		ror	al, cl 
 13C7  24 01                    		and	al, 1 
 13C9  0A E4                    		or	ah, ah 
 13CB  74 16                    		jz	short RDTRGX 
 13CD  FB                       		sti 
 13CE  2E: A0 0702 R            		mov	al, cs:LSTRIG 
 13D2  D2 C8                    		ror	al, cl 
 13D4  8A E8                    		mov	ch, al 
 13D6  24 FE                    		and	al, 0FEh 
 13D8  D2 C0                    		rol	al, cl 
 13DA  2E: A2 0702 R            		mov	cs:LSTRIG, al 
 13DE  8A C5                    		mov	al, ch 
 13E0  24 01                    		and	al, 1 
 13E2  FA                       		cli 
 13E3                           RDTRGX: 
 13E3  59                       		pop	cx 
 13E4  5A                       		pop	dx 
 13E5  C3                       		ret 
                                RDTRIG		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 13E6                           RDSTIK		proc near 
 13E6  50                       		push	ax 
 13E7  51                       		push	cx 
 13E8  52                       		push	dx 
 13E9  3C 04                    		cmp	al, 4 
 13EB  F5                       		cmc 
 13EC  72 1D                    		jb	short RDSTKX 
 13EE  8A C8                    		mov	cl, al 
 13F0  B0 01                    		mov	al, 1 
 13F2  D2 E0                    		shl	al, cl 
 13F4  8A C8                    		mov	cl, al 
 13F6  33 DB                    		xor	bx, bx 
 13F8  BA 0201                  		mov	dx, 201h 
 13FB  EC                       		in	al, dx		; Game I/O port 
                                					; bits 0-3: Coordinates	(resistive, time-d
				ependent inputs) 
                                					; bits 4-7: Buttons/Triggers (digital inpu
				ts) 
 13FC  22 C1                    		and	al, cl 
 13FE  75 0B                    		jnz	short RDSTKX 
 1400  4B                       		dec	bx 
 1401  4B                       		dec	bx 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-77
                                                            

 1402  FA                       		cli 
 1403  EE                       		out	dx, al		; Game I/O port 
                                					; bits 0-3: Coordinates	(resistive, time-d
				ependent inputs) 
                                					; bits 4-7: Buttons/Triggers (digital inpu
				ts) 
 1404                           RDSTLP: 
 1404  43                       		inc	bx 
 1405  EC                       		in	al, dx		; Game I/O port 
                                					; bits 0-3: Coordinates	(resistive, time-d
				ependent inputs) 
                                					; bits 4-7: Buttons/Triggers (digital inpu
				ts) 
 1406  22 C1                    		and	al, cl 
 1408  75 FA                    		jnz	short RDSTLP 
 140A  FB                       		sti 
 140B                           RDSTKX: 
 140B  5A                       		pop	dx 
 140C  59                       		pop	cx 
 140D  58                       		pop	ax 
 140E  C3                       		ret 
                                RDSTIK		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 140F                           POLLEV		proc near		; CODE XREF: CHKINT+7p 
 140F  FC                       		cld 
 1410  FA                       		cli 
 1411  2E: 80 3E 1307 R 00      		cmp	cs:ISREVT, 0	; Light	pen event? 
 1417  2E: C6 06 1307 R 00      		mov	cs:ISREVT, 0 
 141D  FB                       		sti 
 141E  75 0D                    		jnz	short POLEVX 
 1420  1E                       		push	ds 
 1421  33 C0                    		xor	ax, ax 
 1423  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 1425  A1 041A                  		mov	ax, ds:41Ah	; Next keyboard	buffer item 
 1428  3B 06 041C               		cmp	ax, ds:41Ch	; Last keyboard	buffer item 
 142C  1F                       		pop	ds 
                                		assume ds:nothing 
                                 
 142D                           POLEVX:					; CODE XREF: POLLEV+Fj 
 142D  C3                       		ret 
                                POLLEV		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
                                ; Start of another module? 
                                ;		align 10h 
                                 
                                PUBLIC  DONOTE 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-78
                                                            

                                 
 142E  0084[                    NTARRY		db 84h dup(   0)	; DATA XREF: TMRISR:lo
				c_6518o 
            00                  
                         ]      
                                
                                					; DONOTE+6Bo 
 14B2  0000                     CURNOT		dw 0			; DATA XREF: TMRISR+2Fr TMRISR+
				48r ... 
 14B4  0000                     NOTPTR		dw 0			; DATA XREF: TMRISR+33r TMRISR+
				4Cr ... 
 14B6  00                       		db    0 
 14B7  00                       		db    0 
 14B8  00                       byte_64AA	db 0			; DATA XREF: TMRISR+28r TMRIS
				R+42w ... 
 14B9  0000                     word_64AB	dw 0			; DATA XREF: TMRISR+21r 
                                					; TMRISR:loc_64EFw ... 
 14BB  00                       byte_64AD	db 0			; DATA XREF: TMRISR+1Cw TMRIS
				R+CBw 
 14BC  00                       ISRCNT		db 0			; DATA XREF: TMRISR:loc_6564w 
                                					; TMRISR:TMRRSTw ... 
                                					; Timer	ISR entry counter. Because the tim
				er ticks 
                                					; faster, only chain to	the previous handl
				er when 
                                					; the counter goes to zero. 
 14BD  00 00 00 00              OLDTMI		dd 0			; DATA XREF: TMRISR+D7r TMRISR+
				F2r ... 
                                					; Previous timer interrupt vector 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 14C1                           TMRISR		proc far		; DATA XREF: DONOTE+A4o 
 14C1  50                       		push	ax 
 14C2  53                       		push	bx 
 14C3  52                       		push	dx 
 14C4  56                       		push	si 
 14C5  1E                       		push	ds 
 14C6  0E                       		push	cs 
 14C7  1F                       		pop	ds 
                                		assume ds:CSEG 
 14C8  F6 06 0701 R 02          		test	EVTSET,	2	; Speaker on? 
 14CD  75 06                    		jnz	short TMRIS1	; If not, turn it off now 
 14CF  E4 61                    		in	al, 61h		; PC/XT	PPI port B bits: 
                                					; 0: Tmr 2 gate	��� OR	03H=spkr ON 
                                					; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF 
                                					; 3: 1=read high switches 
                                					; 4: 0=enable RAM parity checking 
                                					; 5: 0=enable I/O channel check 
                                					; 6: 0=hold keyboard clock low 
                                					; 7: 0=enable kbrd 
 14D1  24 FD                    		and	al, 0FDh 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-79
                                                            

 14D3  E6 61                    		out	61h, al		; PC/XT	PPI port B bits: 
                                					; 0: Tmr 2 gate	��� OR	03H=spkr ON 
                                					; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF 
                                					; 3: 1=read high switches 
                                					; 4: 0=enable RAM parity checking 
                                					; 5: 0=enable I/O channel check 
                                					; 6: 0=hold keyboard clock low 
                                					; 7: 0=enable kbrd 
                                 
 14D5                           TMRIS1:					; CODE XREF: TMRISR+Cj 
 14D5  FB                       		sti 
 14D6  F6 06 0701 R 02          		test	EVTSET,	2	; Speaker on? 
 14DB  74 1D                    		jz	short loc_64EC 
 14DD  C6 06 14BB R 02          		mov	byte_64AD, 2 
 14E2  83 3E 14B9 R 00          		cmp	word_64AB, 0 
 14E7  75 14                    		jnz	short loc_64EF 
 14E9  80 3E 14B8 R 00          		cmp	byte_64AA, 0 
 14EE  75 0D                    		jnz	short loc_64EF 
 14F0  8B 36 14B2 R             		mov	si, CURNOT 
 14F4  3B 36 14B4 R             		cmp	si, NOTPTR 
 14F8  75 28                    		jnz	short loc_6514 
                                 
 14FA                           loc_64EC:				; CODE XREF: TMRISR+1Aj 
 14FA  EB 76                    		jmp	short loc_6564 
                                ; ---------------------------------------------
				------------------------------ 
 14FC  90                       		nop 
                                 
 14FD                           loc_64EF:				; CODE XREF: TMRISR+26j TMRISR+2D
				j 
 14FD  FF 0E 14B9 R             		dec	word_64AB 
 1501  75 6F                    		jnz	short loc_6564 
 1503  FE 0E 14B8 R             		dec	byte_64AA 
 1507  79 69                    		jns	short loc_6564 
 1509  8B 36 14B2 R             		mov	si, CURNOT 
 150D  3B 36 14B4 R             		cmp	si, NOTPTR 
 1511  75 13                    		jnz	short loc_6518 
 1513  80 26 0701 R FD          		and	EVTSET,	0FDh	; Clear	speaker	event bit 
 1518  FA                       		cli 
 1519  E4 61                    		in	al, 61h		; PC/XT	PPI port B bits: 
                                					; 0: Tmr 2 gate	��� OR	03H=spkr ON 
                                					; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF 
                                					; 3: 1=read high switches 
                                					; 4: 0=enable RAM parity checking 
                                					; 5: 0=enable I/O channel check 
                                					; 6: 0=hold keyboard clock low 
                                					; 7: 0=enable kbrd 
 151B  24 FD                    		and	al, 0FDh 
 151D  E6 61                    		out	61h, al		; PC/XT	PPI port B bits: 
                                					; 0: Tmr 2 gate	��� OR	03H=spkr ON 
                                					; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF 
                                					; 3: 1=read high switches 
                                					; 4: 0=enable RAM parity checking 
                                					; 5: 0=enable I/O channel check 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-80
                                                            

                                					; 6: 0=hold keyboard clock low 
                                					; 7: 0=enable kbrd 
 151F  FB                       		sti 
 1520  EB 50                    		jmp	short loc_6564 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 1522                           loc_6514:				; CODE XREF: TMRISR+37j 
 1522  B0 B6                    		mov	al, 0B6h 
 1524  E6 43                    		out	43h, al		; Timer	8253-5 (AT: 8254.2). 
                                 
 1526                           loc_6518:				; CODE XREF: TMRISR+50j 
 1526  BB 142E R                		mov	bx, offset NTARRY 
 1529  8B 00                    		mov	ax, [bx+si] 
 152B  0B C0                    		or	ax, ax 
 152D  75 07                    		jnz	short loc_6528 
 152F  FA                       		cli 
 1530  E4 61                    		in	al, 61h		; PC/XT	PPI port B bits: 
                                					; 0: Tmr 2 gate	��� OR	03H=spkr ON 
                                					; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF 
                                					; 3: 1=read high switches 
                                					; 4: 0=enable RAM parity checking 
                                					; 5: 0=enable I/O channel check 
                                					; 6: 0=hold keyboard clock low 
                                					; 7: 0=enable kbrd 
 1532  24 FD                    		and	al, 0FDh 
 1534  EB 0B                    		jmp	short loc_6533 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 1536                           loc_6528:				; CODE XREF: TMRISR+6Cj 
 1536  E6 42                    		out	42h, al		; Timer	8253-5 (AT: 8254.2). 
 1538  8A C4                    		mov	al, ah 
 153A  E6 42                    		out	42h, al		; Timer	8253-5 (AT: 8254.2). 
 153C  FA                       		cli 
 153D  E4 61                    		in	al, 61h		; PC/XT	PPI port B bits: 
                                					; 0: Tmr 2 gate	��� OR	03H=spkr ON 
                                					; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF 
                                					; 3: 1=read high switches 
                                					; 4: 0=enable RAM parity checking 
                                					; 5: 0=enable I/O channel check 
                                					; 6: 0=hold keyboard clock low 
                                					; 7: 0=enable kbrd 
 153F  0C 03                    		or	al, 3 
                                 
 1541                           loc_6533:				; CODE XREF: TMRISR+73j 
 1541  E6 61                    		out	61h, al		; PC/XT	PPI port B bits: 
                                					; 0: Tmr 2 gate	��� OR	03H=spkr ON 
                                					; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF 
                                					; 3: 1=read high switches 
                                					; 4: 0=enable RAM parity checking 
                                					; 5: 0=enable I/O channel check 
                                					; 6: 0=hold keyboard clock low 
                                					; 7: 0=enable kbrd 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-81
                                                            

 1543  FB                       		sti 
 1544  46                       		inc	si 
 1545  46                       		inc	si 
 1546  8B 00                    		mov	ax, [bx+si] 
 1548  46                       		inc	si 
 1549  46                       		inc	si 
 154A  E8 16C7 R                		call	NXTNOT 
 154D  89 36 14B2 R             		mov	CURNOT,	si 
 1551  BB 1746                  		mov	bx, 5958 
 1554  F7 E3                    		mul	bx 
 1556  B3 00                    		mov	bl, 0 
 1558  D1 E0                    		shl	ax, 1 
 155A  D1 D2                    		rcl	dx, 1 
 155C  D1 E0                    		shl	ax, 1 
 155E  D1 D2                    		rcl	dx, 1 
 1560  D1 E0                    		shl	ax, 1 
 1562  D1 D2                    		rcl	dx, 1 
 1564  D1 E0                    		shl	ax, 1 
 1566  D1 D2                    		rcl	dx, 1 
 1568  D1 D3                    		rcl	bx, 1 
 156A  88 1E 14B8 R             		mov	byte_64AA, bl 
 156E  89 16 14B9 R             		mov	word_64AB, dx 
                                 
 1572                           loc_6564:				; CODE XREF: TMRISR:loc_64ECj 
                                					; TMRISR+40j ... 
 1572  FE 0E 14BC R             		dec	ISRCNT 
 1576  79 0B                    		jns	short CHKSTP 
 1578  B8 0800                  		mov	ax, 2048	; 65536/32 
 157B  E6 40                    		out	40h, al		; Timer	8253-5 (AT: 8254.2). 
 157D  8A C4                    		mov	al, ah 
 157F  E6 40                    		out	40h, al		; Timer	8253-5 (AT: 8254.2). 
 1581  EB 26                    		jmp	short TMRRST 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 1583                           CHKSTP:					; CODE XREF: TMRISR+B5j 
 1583  75 33                    		jnz	short TMRISX 
 1585  F6 06 0701 R 02          		test	EVTSET,	2	; Speaker still	on? 
 158A  75 1D                    		jnz	short TMRRST	; If so, keep going. 
 158C  FE 0E 14BB R             		dec	byte_64AD 
 1590  75 17                    		jnz	short TMRRST 
 1592  33 C0                    		xor	ax, ax		; Reset	timer interval to normal 
 1594  E6 40                    		out	40h, al		; Timer	8253-5 (AT: 8254.2). 
 1596  E6 40                    		out	40h, al		; Timer	8253-5 (AT: 8254.2). 
 1598  C5 16 14BD R             		lds	dx, OLDTMI	; Restore old interrupt	vector
				 
                                		assume ds:nothing 
 159C  1E                       		push	ds 
 159D  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 159F  89 16 0020               		mov	ds:20h,	dx 
 15A3  58                       		pop	ax 
 15A4  A3 0022                  		mov	ds:22h,	ax 
 15A7  EB 05                    		jmp	short TMRCHN 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-82
                                                            

                                ; ---------------------------------------------
				------------------------------ 
                                 
 15A9                           TMRRST:					; CODE XREF: TMRISR+C0j TMRISR+C9
				j ... 
 15A9  C6 06 14BC R 20          		mov	ds:ISRCNT, 32	; Timer	ticks 32x faster; r
				estart period. 
                                 
 15AE                           TMRCHN:					; CODE XREF: TMRISR+E6j 
 15AE  1F                       		pop	ds 
                                		assume ds:nothing 
 15AF  5E                       		pop	si 
 15B0  5A                       		pop	dx 
 15B1  5B                       		pop	bx 
 15B2  58                       		pop	ax 
 15B3  2E: FF 2E 14BD R         		jmp	cs:OLDTMI	; Chain	to previous timer ISR 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 15B8                           TMRISX:					; CODE XREF: TMRISR:CHKSTPj 
 15B8  1F                       		pop	ds 
 15B9  5E                       		pop	si 
 15BA  5A                       		pop	dx 
 15BB  5B                       		pop	bx 
 15BC  B0 20                    		mov	al, 20h		; Send EOI 
 15BE  E6 20                    		out	20h, al		; Interrupt controller,	8259A. 
 15C0  58                       		pop	ax 
 15C1  CF                       		iret 
                                TMRISR		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Queues note for execution, saves all regs. 
                                ; On entry: 
                                ;   AL = voice (0=foreground, 1=back, -1=off) 
                                ;   CX = frequency 
                                ;   DX = duration (1=18.7ms) 
                                ; 
                                 
 15C2                           DONOTE		proc near		; CODE XREF: GWTERM+12p SND
				RST+7p ... 
 15C2  1E                       		push	ds 
 15C3  53                       		push	bx 
 15C4  56                       		push	si 
 15C5  0E                       		push	cs 
 15C6  1F                       		pop	ds 
                                		assume ds:CSEG 
 15C7  3C FF                    		cmp	al, -1		; Note off? 
 15C9  75 21                    		jnz	short DOPLAY 
 15CB  F6 06 0701 R 02          		test	EVTSET,	2	; Speaker on? 
 15D0  74 15                    		jz	short DONOTX 
 15D2  FA                       		cli 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-83
                                                            

 15D3  8B 1E 14B4 R             		mov	bx, NOTPTR 
 15D7  89 1E 14B2 R             		mov	CURNOT,	bx 
 15DB  80 26 0701 R FD          		and	EVTSET,	0FDh	; Clear	event bit 
 15E0  E4 61                    		in	al, 61h		; PC/XT	PPI port B bits: 
                                					; 0: Tmr 2 gate	��� OR	03H=spkr ON 
                                					; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF 
                                					; 3: 1=read high switches 
                                					; 4: 0=enable RAM parity checking 
                                					; 5: 0=enable I/O channel check 
                                					; 6: 0=hold keyboard clock low 
                                					; 7: 0=enable kbrd 
 15E2  24 FD                    		and	al, 0FDh 
 15E4  E6 61                    		out	61h, al		; PC/XT	PPI port B bits: 
                                					; 0: Tmr 2 gate	��� OR	03H=spkr ON 
                                					; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF 
                                					; 3: 1=read high switches 
                                					; 4: 0=enable RAM parity checking 
                                					; 5: 0=enable I/O channel check 
                                					; 6: 0=hold keyboard clock low 
                                					; 7: 0=enable kbrd 
 15E6  FB                       		sti 
                                 
 15E7                           DONOTX:					; CODE XREF: DONOTE+Ej	DONOTE:GONO
				TXj 
 15E7  F8                       		clc 
 15E8  5E                       		pop	si 
 15E9  5B                       		pop	bx 
 15EA  1F                       		pop	ds 
                                		assume ds:nothing 
 15EB  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 15EC                           DOPLAY:					; CODE XREF: DONOTE+7j 
 15EC  50                       		push	ax 
 15ED  52                       		push	dx 
 15EE  B8 0013                  		mov	ax, 19 
 15F1  3B C1                    		cmp	ax, cx 
 15F3  72 04                    		jb	short DODIV 
 15F5  33 C0                    		xor	ax, ax 
 15F7  EB 08                    		jmp	short NXNOTE 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 15F9                           DODIV:					; CODE XREF: DONOTE+31j 
 15F9  BA 0012                  		mov	dx, 12h 
 15FC  B8 34DC                  		mov	ax, 34DCh 
 15FF  F7 F1                    		div	cx		; Divide 1,193,180 by CX 
                                 
 1601                           NXNOTE:					; CODE XREF: DONOTE+35j 
 1601  50                       		push	ax 
 1602  1E                       		push	ds 
 1603  33 C0                    		xor	ax, ax 
 1605  8E D8                    		mov	ds, ax 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-84
                                                            

                                		assume ds:nothing 
 1607  BB 0471                  		mov	bx, 471h	; Ctrl+Break flag 
 160A  88 07                    		mov	[bx], al	; Zero out the flag 
 160C  1F                       		pop	ds 
                                		assume ds:nothing 
 160D  8B 36 14B4 R             		mov	si, ds:NOTPTR 
 1611  56                       		push	si 
 1612  83 C6 04                 		add	si, 4 
 1615  E8 16C7 R                		call	NXTNOT 
                                 
 1618                           WAITLP:					; CODE XREF: DONOTE+67j 
 1618  1E                       		push	ds 
 1619  33 C0                    		xor	ax, ax 
 161B  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 161D  BB 0471                  		mov	bx, 471h	; Ctrl+Break flag 
 1620  3A 07                    		cmp	al, [bx]	; Break	flag set? 
 1622  1F                       		pop	ds 
                                		assume ds:nothing 
 1623  75 06                    		jnz	short WTDONE 
 1625  3B 36 14B2 R             		cmp	si, ds:CURNOT 
 1629  74 ED                    		jz	short WAITLP 
                                 
 162B                           WTDONE:					; CODE XREF: DONOTE+61j 
 162B  5E                       		pop	si 
 162C  58                       		pop	ax 
 162D  BB 142E R                		mov	bx, offset NTARRY 
 1630  89 00                    		mov	[bx+si], ax 
 1632  46                       		inc	si 
 1633  46                       		inc	si 
 1634  58                       		pop	ax 
 1635  89 00                    		mov	[bx+si], ax 
 1637  46                       		inc	si 
 1638  46                       		inc	si 
 1639  E8 16C7 R                		call	NXTNOT 
 163C  89 36 14B4 R             		mov	ds:NOTPTR, si 
 1640  8B F0                    		mov	si, ax 
 1642  FA                       		cli 
 1643  F6 06 0701 R 02          		test	ds:EVTSET, 2	; Speaker on? 
 1648  75 37                    		jnz	short TMISON 
 164A  B8 0001                  		mov	ax, 1 
 164D  A3 14B9 R                		mov	ds:word_64AB, ax 
 1650  48                       		dec	ax 
 1651  A2 14B8 R                		mov	ds:byte_64AA, al 
 1654  3A 06 14BC R             		cmp	al, ds:ISRCNT	; Is the timer ISR still go
				ing? 
 1658  75 27                    		jnz	short TMISON	; If yes, no need to install
				 ISR 
 165A  FE 0E 14BC R             		dec	ds:ISRCNT	; ISRCNT was 0,	now -1 
 165E  06                       		push	es 
 165F  1E                       		push	ds 
 1660  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 1662  C4 06 0020               		les	ax, DWORD PTR DS:[20h]	; Install timer	IS
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-85
                                                            

				R (IRQ0, vector 08h) 
 1666  BA 14C1 R                		mov	dx, offset TMRISR 
 1669  89 16 0020               		mov	ds:20h,	dx 
 166D  0E                       		push	cs 
 166E  5A                       		pop	dx 
 166F  89 16 0022               		mov	ds:22h,	dx 
 1673  1F                       		pop	ds 
                                		assume ds:nothing 
 1674  A3 14BD R                		mov	word ptr ds:OLDTMI, ax 
 1677  8C C0                    		mov	ax, es 
 1679  A3 14BF R                		mov	word ptr ds:OLDTMI+2, ax 
 167C  07                       		pop	es 
 167D  B0 B6                    		mov	al, 0B6h 
 167F  E6 43                    		out	43h, al		; Timer	8253-5 (AT: 8254.2). 
                                 
 1681                           TMISON:					; CODE XREF: DONOTE+86j DONOTE+96
				j 
 1681  80 0E 0701 R 02          		or	ds:EVTSET, 2	; Speaker on! 
 1686  FB                       		sti 
 1687  58                       		pop	ax 
 1688  3C 00                    		cmp	al, 0		; Play in the foreground? 
 168A  75 38                    		jnz	short GONOTX 
                                 
 168C                           FGNDLP:					; CODE XREF: DONOTE+E2j DONOTE+F2
				j ... 
 168C  1E                       		push	ds 
 168D  33 C0                    		xor	ax, ax 
 168F  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 1691  BB 0471                  		mov	bx, 471h	; Ctrl+Break flag 
 1694  3A 07                    		cmp	al, [bx]	; Break	flag set? 
 1696  1F                       		pop	ds 
                                		assume ds:nothing 
 1697  75 2B                    		jnz	short GONOTX 
 1699  A1 14B2 R                		mov	ax, ds:CURNOT 
 169C  3B 06 14B4 R             		cmp	ax, ds:NOTPTR 
 16A0  74 22                    		jz	short GONOTX 
 16A2  0B F6                    		or	si, si 
 16A4  74 E6                    		jz	short FGNDLP 
 16A6  05 0004                  		add	ax, 4		; Advance pointer 
 16A9  3D 0084                  		cmp	ax, 84h		; Wrapping around? 
 16AC  75 02                    		jnz	short HAVPTR 
 16AE  33 C0                    		xor	ax, ax		; If yes, pointer wraps	to zero 
                                 
 16B0                           HAVPTR:					; CODE XREF: DONOTE+EAj 
 16B0  3B 06 14B4 R             		cmp	ax, ds:NOTPTR 
 16B4  75 D6                    		jnz	short FGNDLP 
 16B6  80 3E 14B8 R 00          		cmp	ds:byte_64AA, 0 
 16BB  75 CF                    		jnz	short FGNDLP 
 16BD  83 3E 14B9 R 06          		cmp	ds:word_64AB, 6 
 16C2  73 C8                    		jnb	short FGNDLP 
                                 
 16C4                           GONOTX:					; CODE XREF: DONOTE+C8j DONOTE+D5
				j ... 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Page     1-86
                                                            

 16C4  E9 15E7 R                		jmp	DONOTX 
                                DONOTE		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 16C7                           NXTNOT		proc near		; CODE XREF: TMRISR+89p DON
				OTE+53p ... 
 16C7  81 FE 0084               		cmp	si, 84h 
 16CB  74 01                    		jz	short WRAP 
 16CD  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 16CE                           WRAP:					; CODE XREF: NXTNOT+4j 
 16CE  BE 0000                  		mov	si, 0 
 16D1  C3                       		ret 
                                NXTNOT		endp 
                                 
 16D2                           CSEG    ENDS 
                                        END 
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Symbols-1
                                                             

Segments and Groups:

                N a m e         	Size	Align	Combine Class

CSEG . . . . . . . . . . . . . .  	16D2	PARA	PUBLIC	'CODESG'
DSEG . . . . . . . . . . . . . .  	003A	PARA	PUBLIC	'DATASG'

Symbols:            

                N a m e         	Type	Value	Attr         

BADFNM . . . . . . . . . . . . .  	L NEAR	03EF	CSEG
BADMAP . . . . . . . . . . . . .  	L NEAR	0083	CSEG
BASDAT . . . . . . . . . . . . .  	L NEAR	017D	CSEG
BAUDTB . . . . . . . . . . . . .  	L WORD 	01C6	CSEG
BRKFLG . . . . . . . . . . . . .  	L BYTE 	0703	CSEG
BYTE_5095  . . . . . . . . . . .  	L BYTE 	00BE	CSEG
BYTE_64AA  . . . . . . . . . . .  	L BYTE 	14B8	CSEG
BYTE_64AD  . . . . . . . . . . .  	L BYTE 	14BB	CSEG

CBFSEG . . . . . . . . . . . . .  	L WORD 	023A	CSEG
CBFSIZ . . . . . . . . . . . . .  	L WORD 	023C	CSEG
CBKINT . . . . . . . . . . . . .  	L WORD 	0001	DSEG
CBREAK . . . . . . . . . . . . .  	L NEAR	0845	CSEG
CBRKSG . . . . . . . . . . . . .  	L WORD 	0003	DSEG
CHKESC . . . . . . . . . . . . .  	L NEAR	0866	CSEG
CHKSTP . . . . . . . . . . . . .  	L NEAR	1583	CSEG
CKCOM1 . . . . . . . . . . . . .  	L NEAR	0380	CSEG
CKCOM2 . . . . . . . . . . . . .  	L NEAR	03BA	CSEG
CLREOL . . . . . . . . . . . . .  	N PROC	0B9D	CSEG	Global	Length = 002C
CLREOX . . . . . . . . . . . . .  	L NEAR	0BC4	CSEG
CLRSCN . . . . . . . . . . . . .  	N PROC	0B70	CSEG	Global	Length = 002D
CM1CTL . . . . . . . . . . . . .  	L BYTE 	01F6	CSEG
CM1ISR . . . . . . . . . . . . .  	L NEAR	0246	CSEG
CM2CTL . . . . . . . . . . . . .  	L BYTE 	0218	CSEG
CM2ISR . . . . . . . . . . . . .  	F PROC	024C	CSEG	Length = 0117
CMPREP . . . . . . . . . . . . .  	N PROC	06E6	CSEG	Length = 001B
COMDLY . . . . . . . . . . . . .  	N PROC	06D0	CSEG	Length = 0016
COMEOI . . . . . . . . . . . . .  	L NEAR	029F	CSEG
COMERR . . . . . . . . . . . . .  	L NEAR	03F4	CSEG
COMISR . . . . . . . . . . . . .  	L NEAR	0250	CSEG
COMTBL . . . . . . . . . . . . .  	L WORD 	01F2	CSEG
CSAVEA . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
CSAVEM . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
CSRATR . . . . . . . . . . . . .  	N PROC	0C7A	CSEG	Global	Length = 0034
CSRDSP . . . . . . . . . . . . .  	N PROC	0BC9	CSEG	Global	Length = 0050
CSRERR . . . . . . . . . . . . .  	L NEAR	0CAB	CSEG
CTLBRK . . . . . . . . . . . . .  	F PROC	0726	CSEG	Length = 0007
CURNOT . . . . . . . . . . . . .  	L WORD 	14B2	CSEG

DEBUG  . . . . . . . . . . . . .  	Text  		
DELAY  . . . . . . . . . . . . .  	L NEAR	06D6	CSEG
DOCLRS . . . . . . . . . . . . .  	L NEAR	0B73	CSEG
DODIV  . . . . . . . . . . . . .  	L NEAR	15F9	CSEG
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Symbols-2
                                                             

DONOTE . . . . . . . . . . . . .  	N PROC	15C2	CSEG	Global	Length = 0105
DONOTX . . . . . . . . . . . . .  	L NEAR	15E7	CSEG
DOPFLT . . . . . . . . . . . . .  	L NEAR	015A	CSEG
DOPLAY . . . . . . . . . . . . .  	L NEAR	15EC	CSEG
DOSCRL . . . . . . . . . . . . .  	N PROC	0AE6	CSEG	Length = 0023
DOSCRX . . . . . . . . . . . . .  	L NEAR	0B05	CSEG
DOVEC  . . . . . . . . . . . . .  	L NEAR	07B7	CSEG
DOWNC  . . . . . . . . . . . . .  	N PROC	0F69	CSEG	Global	Length = 0016
DOWNCX . . . . . . . . . . . . .  	L NEAR	0F77	CSEG

EDTMAP . . . . . . . . . . . . .  	N PROC	0956	CSEG	Global	Length = 0058
EQUIP  . . . . . . . . . . . . .  	L BYTE 	073E	CSEG
EVTSET . . . . . . . . . . . . .  	L BYTE 	0701	CSEG

FETCHC . . . . . . . . . . . . .  	N PROC	0F29	CSEG	Global	Length = 0008
FGNDLP . . . . . . . . . . . . .  	L NEAR	168C	CSEG
FKYADV . . . . . . . . . . . . .  	N PROC	0F1E	CSEG	Global	Length = 0003
FKYFMT . . . . . . . . . . . . .  	N PROC	0F10	CSEG	Global	Length = 000E
FKYFMX . . . . . . . . . . . . .  	L NEAR	0F1D	CSEG
FNAND  . . . . . . . . . . . . .  	L NEAR	11C3	CSEG
FNINV  . . . . . . . . . . . . .  	L NEAR	11C6	CSEG
FNOR . . . . . . . . . . . . . .  	L NEAR	11C0	CSEG
FNSET  . . . . . . . . . . . . .  	L NEAR	11C8	CSEG
FNXOR  . . . . . . . . . . . . .  	L NEAR	11CB	CSEG

GETFBC . . . . . . . . . . . . .  	N PROC	00A0	CSEG	Global	Length = 001E
GETHED . . . . . . . . . . . . .  	N PROC	005A	CSEG	Global	Length = 0006
GONOTX . . . . . . . . . . . . .  	L NEAR	16C4	CSEG
GOSCUR . . . . . . . . . . . . .  	L NEAR	0C09	CSEG
GOSRST . . . . . . . . . . . . .  	L NEAR	0EFA	CSEG
GRPINI . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
GRPSIZ . . . . . . . . . . . . .  	N PROC	0104	CSEG	Global	Length = 000D
GSTCUR . . . . . . . . . . . . .  	L NEAR	0CA8	CSEG
GTASPC . . . . . . . . . . . . .  	N PROC	108E	CSEG	Global	Length = 0014
GTASPX . . . . . . . . . . . . .  	L NEAR	10A1	CSEG
GWINI  . . . . . . . . . . . . .  	N PROC	073F	CSEG	Global	Length = 0068
GWINIX . . . . . . . . . . . . .  	L NEAR	07A4	CSEG
GWTERM . . . . . . . . . . . . .  	N PROC	07C4	CSEG	Global	Length = 0063

HAVBSZ . . . . . . . . . . . . .  	L NEAR	0371	CSEG
HAVPTR . . . . . . . . . . . . .  	L NEAR	16B0	CSEG
HEIGHT . . . . . . . . . . . . .  	L NEAR	010D	CSEG

INFMAP . . . . . . . . . . . . .  	N PROC	094D	CSEG	Global	Length = 0009
INICMX . . . . . . . . . . . . .  	L NEAR	0515	CSEG
INICOM . . . . . . . . . . . . .  	N PROC	03F9	CSEG	Global	Length = 0120
INILPT . . . . . . . . . . . . .  	L NEAR	076F	CSEG
INKMAP . . . . . . . . . . . . .  	N PROC	08EB	CSEG	Global	Length = 0062
ISRCNT . . . . . . . . . . . . .  	L BYTE 	14BC	CSEG
ISRDSP . . . . . . . . . . . . .  	L WORD 	023E	CSEG
ISREVT . . . . . . . . . . . . .  	L BYTE 	1307	CSEG
ISRFN0 . . . . . . . . . . . . .  	L NEAR	0329	CSEG
ISRFN1 . . . . . . . . . . . . .  	L NEAR	02F0	CSEG
ISRFN2 . . . . . . . . . . . . .  	L NEAR	026E	CSEG
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Symbols-3
                                                             

ISRFN3 . . . . . . . . . . . . .  	L NEAR	031D	CSEG
ISRX . . . . . . . . . . . . . .  	L NEAR	02E7	CSEG

KEYINP . . . . . . . . . . . . .  	N PROC	0827	CSEG	Global	Length = 008B
KEYINX . . . . . . . . . . . . .  	L NEAR	0871	CSEG
KYBCLR . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External

LCPY . . . . . . . . . . . . . .  	N PROC	0CAE	CSEG	Global	Length = 0008
LEFTC  . . . . . . . . . . . . .  	N PROC	0F42	CSEG	Global	Length = 0011
LEFTCX . . . . . . . . . . . . .  	L NEAR	0F51	CSEG
LOC_5044 . . . . . . . . . . . .  	L NEAR	006D	CSEG
LOC_5060 . . . . . . . . . . . .  	L NEAR	0089	CSEG
LOC_506E . . . . . . . . . . . .  	L NEAR	0097	CSEG
LOC_5073 . . . . . . . . . . . .  	L NEAR	009C	CSEG
LOC_50CB . . . . . . . . . . . .  	L NEAR	00F4	CSEG
LOC_50CE . . . . . . . . . . . .  	L NEAR	00F7	CSEG
LOC_5187 . . . . . . . . . . . .  	L NEAR	01B0	CSEG
LOC_518F . . . . . . . . . . . .  	L NEAR	01B8	CSEG
LOC_5192 . . . . . . . . . . . .  	L NEAR	01BB	CSEG
LOC_523B . . . . . . . . . . . .  	L NEAR	0261	CSEG
LOC_5257 . . . . . . . . . . . .  	L NEAR	027D	CSEG
LOC_5262 . . . . . . . . . . . .  	L NEAR	0288	CSEG
LOC_52DC . . . . . . . . . . . .  	L NEAR	0302	CSEG
LOC_52F2 . . . . . . . . . . . .  	L NEAR	0318	CSEG
LOC_5330 . . . . . . . . . . . .  	L NEAR	0356	CSEG
LOC_5333 . . . . . . . . . . . .  	L NEAR	0359	CSEG
LOC_5418 . . . . . . . . . . . .  	L NEAR	043E	CSEG
LOC_542A . . . . . . . . . . . .  	L NEAR	0450	CSEG
LOC_543D . . . . . . . . . . . .  	L NEAR	0463	CSEG
LOC_5446 . . . . . . . . . . . .  	L NEAR	046C	CSEG
LOC_5457 . . . . . . . . . . . .  	L NEAR	047D	CSEG
LOC_5463 . . . . . . . . . . . .  	L NEAR	0489	CSEG
LOC_546F . . . . . . . . . . . .  	L NEAR	0495	CSEG
LOC_5479 . . . . . . . . . . . .  	L NEAR	049F	CSEG
LOC_54DC . . . . . . . . . . . .  	L NEAR	0502	CSEG
LOC_551B . . . . . . . . . . . .  	L NEAR	0541	CSEG
LOC_552C . . . . . . . . . . . .  	L NEAR	0552	CSEG
LOC_5555 . . . . . . . . . . . .  	L NEAR	057B	CSEG
LOC_557D . . . . . . . . . . . .  	L NEAR	05A3	CSEG
LOC_55A3 . . . . . . . . . . . .  	L NEAR	05C9	CSEG
LOC_55B5 . . . . . . . . . . . .  	L NEAR	05DB	CSEG
LOC_55D4 . . . . . . . . . . . .  	L NEAR	05FA	CSEG
LOC_55DD . . . . . . . . . . . .  	L NEAR	0603	CSEG
LOC_55DF . . . . . . . . . . . .  	L NEAR	0605	CSEG
LOC_55F5 . . . . . . . . . . . .  	L NEAR	061B	CSEG
LOC_55F9 . . . . . . . . . . . .  	L NEAR	061F	CSEG
LOC_5606 . . . . . . . . . . . .  	L NEAR	062C	CSEG
LOC_560D . . . . . . . . . . . .  	L NEAR	0633	CSEG
LOC_563C . . . . . . . . . . . .  	L NEAR	0662	CSEG
LOC_5654 . . . . . . . . . . . .  	L NEAR	067A	CSEG
LOC_5662 . . . . . . . . . . . .  	L NEAR	0688	CSEG
LOC_5673 . . . . . . . . . . . .  	L NEAR	0699	CSEG
LOC_5684 . . . . . . . . . . . .  	L NEAR	06AA	CSEG
LOC_568D . . . . . . . . . . . .  	L NEAR	06B3	CSEG
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Symbols-4
                                                             

LOC_5696 . . . . . . . . . . . .  	L NEAR	06BC	CSEG
LOC_569F . . . . . . . . . . . .  	L NEAR	06C5	CSEG
LOC_56A6 . . . . . . . . . . . .  	L NEAR	06CC	CSEG
LOC_56EE . . . . . . . . . . . .  	L NEAR	070F	CSEG
LOC_57E7 . . . . . . . . . . . .  	L NEAR	0808	CSEG
LOC_57E9 . . . . . . . . . . . .  	L NEAR	080A	CSEG
LOC_5871 . . . . . . . . . . . .  	L NEAR	0892	CSEG
LOC_5884 . . . . . . . . . . . .  	L NEAR	08A5	CSEG
LOC_58D3 . . . . . . . . . . . .  	L NEAR	08F4	CSEG
LOC_58DA . . . . . . . . . . . .  	L NEAR	08FB	CSEG
LOC_58DC . . . . . . . . . . . .  	L NEAR	08FD	CSEG
LOC_58DE . . . . . . . . . . . .  	L NEAR	08FF	CSEG
LOC_58EA . . . . . . . . . . . .  	L NEAR	090B	CSEG
LOC_58F2 . . . . . . . . . . . .  	L NEAR	0913	CSEG
LOC_590A . . . . . . . . . . . .  	L NEAR	092B	CSEG
LOC_5912 . . . . . . . . . . . .  	L NEAR	0933	CSEG
LOC_5928 . . . . . . . . . . . .  	L NEAR	0949	CSEG
LOC_5933 . . . . . . . . . . . .  	L NEAR	0954	CSEG
LOC_594D . . . . . . . . . . . .  	L NEAR	096E	CSEG
LOC_595D . . . . . . . . . . . .  	L NEAR	097E	CSEG
LOC_5965 . . . . . . . . . . . .  	L NEAR	0986	CSEG
LOC_5983 . . . . . . . . . . . .  	L NEAR	09A4	CSEG
LOC_5989 . . . . . . . . . . . .  	L NEAR	09AA	CSEG
LOC_598B . . . . . . . . . . . .  	L NEAR	09AC	CSEG
LOC_59D8 . . . . . . . . . . . .  	L NEAR	09F9	CSEG
LOC_59DB . . . . . . . . . . . .  	L NEAR	09FC	CSEG
LOC_5A06 . . . . . . . . . . . .  	L NEAR	0A27	CSEG
LOC_5A35 . . . . . . . . . . . .  	L NEAR	0A56	CSEG
LOC_5A4E . . . . . . . . . . . .  	L NEAR	0A6F	CSEG
LOC_5A51 . . . . . . . . . . . .  	L NEAR	0A72	CSEG
LOC_5A57 . . . . . . . . . . . .  	L NEAR	0A78	CSEG
LOC_5A6A . . . . . . . . . . . .  	L NEAR	0A8B	CSEG
LOC_5A6F . . . . . . . . . . . .  	L NEAR	0A90	CSEG
LOC_5A82 . . . . . . . . . . . .  	L NEAR	0AA3	CSEG
LOC_5A89 . . . . . . . . . . . .  	L NEAR	0AAA	CSEG
LOC_5A9D . . . . . . . . . . . .  	L NEAR	0ABE	CSEG
LOC_5B42 . . . . . . . . . . . .  	L NEAR	0B63	CSEG
LOC_5B45 . . . . . . . . . . . .  	L NEAR	0B66	CSEG
LOC_5BC6 . . . . . . . . . . . .  	L NEAR	0BE7	CSEG
LOC_5BC9 . . . . . . . . . . . .  	L NEAR	0BEA	CSEG
LOC_5BDB . . . . . . . . . . . .  	L NEAR	0BFC	CSEG
LOC_5C14 . . . . . . . . . . . .  	L NEAR	0C35	CSEG
LOC_5C26 . . . . . . . . . . . .  	L NEAR	0C47	CSEG
LOC_5C37 . . . . . . . . . . . .  	L NEAR	0C58	CSEG
LOC_5C46 . . . . . . . . . . . .  	L NEAR	0C67	CSEG
LOC_5C53 . . . . . . . . . . . .  	L NEAR	0C74	CSEG
LOC_5C63 . . . . . . . . . . . .  	L NEAR	0C84	CSEG
LOC_5C6F . . . . . . . . . . . .  	L NEAR	0C90	CSEG
LOC_5C79 . . . . . . . . . . . .  	L NEAR	0C9A	CSEG
LOC_5CD8 . . . . . . . . . . . .  	L NEAR	0CF9	CSEG
LOC_5CDB . . . . . . . . . . . .  	L NEAR	0CFC	CSEG
LOC_5CE6 . . . . . . . . . . . .  	L NEAR	0D07	CSEG
LOC_5CEE . . . . . . . . . . . .  	L NEAR	0D0F	CSEG
LOC_5D1D . . . . . . . . . . . .  	L NEAR	0D3E	CSEG
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Symbols-5
                                                             

LOC_5D41 . . . . . . . . . . . .  	L NEAR	0D62	CSEG
LOC_5D45 . . . . . . . . . . . .  	L NEAR	0D66	CSEG
LOC_5D59 . . . . . . . . . . . .  	L NEAR	0D7A	CSEG
LOC_5D71 . . . . . . . . . . . .  	L NEAR	0D92	CSEG
LOC_5D79 . . . . . . . . . . . .  	L NEAR	0D9A	CSEG
LOC_5D80 . . . . . . . . . . . .  	L NEAR	0DA1	CSEG
LOC_5D83 . . . . . . . . . . . .  	L NEAR	0DA4	CSEG
LOC_5D99 . . . . . . . . . . . .  	L NEAR	0DBA	CSEG
LOC_5D9E . . . . . . . . . . . .  	L NEAR	0DBF	CSEG
LOC_5DA3 . . . . . . . . . . . .  	L NEAR	0DC4	CSEG
LOC_5DC0 . . . . . . . . . . . .  	L NEAR	0DE1	CSEG
LOC_5DC3 . . . . . . . . . . . .  	L NEAR	0DE4	CSEG
LOC_5DD6 . . . . . . . . . . . .  	L NEAR	0DF7	CSEG
LOC_5DDF . . . . . . . . . . . .  	L NEAR	0E00	CSEG
LOC_5DEA . . . . . . . . . . . .  	L NEAR	0E0B	CSEG
LOC_5DF3 . . . . . . . . . . . .  	L NEAR	0E14	CSEG
LOC_5DFC . . . . . . . . . . . .  	L NEAR	0E1D	CSEG
LOC_5E08 . . . . . . . . . . . .  	L NEAR	0E29	CSEG
LOC_5E1E . . . . . . . . . . . .  	L NEAR	0E3F	CSEG
LOC_5E23 . . . . . . . . . . . .  	L NEAR	0E44	CSEG
LOC_5E3B . . . . . . . . . . . .  	L NEAR	0E5C	CSEG
LOC_5E46 . . . . . . . . . . . .  	L NEAR	0E67	CSEG
LOC_5E4C . . . . . . . . . . . .  	L NEAR	0E6D	CSEG
LOC_5E67 . . . . . . . . . . . .  	L NEAR	0E88	CSEG
LOC_5EA1 . . . . . . . . . . . .  	L NEAR	0EC2	CSEG
LOC_5EAF . . . . . . . . . . . .  	L NEAR	0ED0	CSEG
LOC_5F43 . . . . . . . . . . . .  	L NEAR	0F64	CSEG
LOC_5F6E . . . . . . . . . . . .  	L NEAR	0F8F	CSEG
LOC_5F7D . . . . . . . . . . . .  	L NEAR	0F9E	CSEG
LOC_5F82 . . . . . . . . . . . .  	L NEAR	0FA3	CSEG
LOC_5F85 . . . . . . . . . . . .  	L NEAR	0FA6	CSEG
LOC_5FA1 . . . . . . . . . . . .  	L NEAR	0FC2	CSEG
LOC_600A . . . . . . . . . . . .  	L NEAR	102B	CSEG
LOC_600E . . . . . . . . . . . .  	L NEAR	102F	CSEG
LOC_6027 . . . . . . . . . . . .  	L NEAR	1048	CSEG
LOC_6035 . . . . . . . . . . . .  	L NEAR	1056	CSEG
LOC_603C . . . . . . . . . . . .  	L NEAR	105D	CSEG
LOC_6052 . . . . . . . . . . . .  	L NEAR	1073	CSEG
LOC_6056 . . . . . . . . . . . .  	L NEAR	1077	CSEG
LOC_6061 . . . . . . . . . . . .  	L NEAR	1082	CSEG
LOC_606B . . . . . . . . . . . .  	L NEAR	108C	CSEG
LOC_60EC . . . . . . . . . . . .  	L NEAR	110D	CSEG
LOC_60F9 . . . . . . . . . . . .  	L NEAR	111A	CSEG
LOC_60FD . . . . . . . . . . . .  	L NEAR	111E	CSEG
LOC_6103 . . . . . . . . . . . .  	L NEAR	1124	CSEG
LOC_6137 . . . . . . . . . . . .  	L NEAR	1158	CSEG
LOC_6144 . . . . . . . . . . . .  	L NEAR	1165	CSEG
LOC_6148 . . . . . . . . . . . .  	L NEAR	1169	CSEG
LOC_6153 . . . . . . . . . . . .  	L NEAR	1174	CSEG
LOC_6172 . . . . . . . . . . . .  	L NEAR	1193	CSEG
LOC_6183 . . . . . . . . . . . .  	L NEAR	11A4	CSEG
LOC_6199 . . . . . . . . . . . .  	L NEAR	11BA	CSEG
LOC_61C8 . . . . . . . . . . . .  	L NEAR	11E9	CSEG
LOC_61E1 . . . . . . . . . . . .  	L NEAR	1202	CSEG
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Symbols-6
                                                             

LOC_61F7 . . . . . . . . . . . .  	L NEAR	1218	CSEG
LOC_61FF . . . . . . . . . . . .  	L NEAR	1220	CSEG
LOC_6221 . . . . . . . . . . . .  	L NEAR	1242	CSEG
LOC_6223 . . . . . . . . . . . .  	L NEAR	1244	CSEG
LOC_622C . . . . . . . . . . . .  	L NEAR	124D	CSEG
LOC_6234 . . . . . . . . . . . .  	L NEAR	1255	CSEG
LOC_623E . . . . . . . . . . . .  	L NEAR	125F	CSEG
LOC_624F . . . . . . . . . . . .  	L NEAR	1270	CSEG
LOC_6256 . . . . . . . . . . . .  	L NEAR	1277	CSEG
LOC_626D . . . . . . . . . . . .  	L NEAR	128E	CSEG
LOC_6280 . . . . . . . . . . . .  	L NEAR	12A1	CSEG
LOC_629D . . . . . . . . . . . .  	L NEAR	12BE	CSEG
LOC_62A5 . . . . . . . . . . . .  	L NEAR	12C6	CSEG
LOC_62B7 . . . . . . . . . . . .  	L NEAR	12D8	CSEG
LOC_62B8 . . . . . . . . . . . .  	L NEAR	12D9	CSEG
LOC_62C5 . . . . . . . . . . . .  	L NEAR	12E6	CSEG
LOC_62D1 . . . . . . . . . . . .  	L NEAR	12F2	CSEG
LOC_62D6 . . . . . . . . . . . .  	L NEAR	12F7	CSEG
LOC_62DC . . . . . . . . . . . .  	L NEAR	12FD	CSEG
LOC_639F . . . . . . . . . . . .  	L NEAR	13B6	CSEG
LOC_63A5 . . . . . . . . . . . .  	L NEAR	13BC	CSEG
LOC_64EC . . . . . . . . . . . .  	L NEAR	14FA	CSEG
LOC_64EF . . . . . . . . . . . .  	L NEAR	14FD	CSEG
LOC_6514 . . . . . . . . . . . .  	L NEAR	1522	CSEG
LOC_6518 . . . . . . . . . . . .  	L NEAR	1526	CSEG
LOC_6528 . . . . . . . . . . . .  	L NEAR	1536	CSEG
LOC_6533 . . . . . . . . . . . .  	L NEAR	1541	CSEG
LOC_6564 . . . . . . . . . . . .  	L NEAR	1572	CSEG
LPCOL  . . . . . . . . . . . . .  	L WORD 	1316	CSEG
LPDOWN . . . . . . . . . . . . .  	L WORD 	130E	CSEG
LPENQR . . . . . . . . . . . . .  	N PROC	131C	CSEG	Length = 0056
LPENQX . . . . . . . . . . . . .  	L NEAR	1364	CSEG
LPGX . . . . . . . . . . . . . .  	L WORD 	1310	CSEG
LPGY . . . . . . . . . . . . . .  	L WORD 	1312	CSEG
LPLCOL . . . . . . . . . . . . .  	L WORD 	131A	CSEG
LPLGX  . . . . . . . . . . . . .  	L WORD 	130A	CSEG
LPLGY  . . . . . . . . . . . . .  	L WORD 	130C	CSEG
LPLROW . . . . . . . . . . . . .  	L WORD 	1318	CSEG
LPNOFF . . . . . . . . . . . . .  	L NEAR	1390	CSEG
LPNON  . . . . . . . . . . . . .  	L NEAR	139B	CSEG
LPROW  . . . . . . . . . . . . .  	L WORD 	1314	CSEG
LPWSDN . . . . . . . . . . . . .  	L WORD 	1308	CSEG
LSTRIG . . . . . . . . . . . . .  	L BYTE 	0702	CSEG

MAPSUP . . . . . . . . . . . . .  	N PROC	09AF	CSEG	Global	Length = 0003
MAPXYC . . . . . . . . . . . . .  	N PROC	0FA8	CSEG	Global	Length = 003C
MASKS? . . . . . . . . . . . . .  	L BYTE 	01EE	CSEG
MODES40  . . . . . . . . . . . .  	L BYTE 	0F00	CSEG
MODES80  . . . . . . . . . . . .  	L BYTE 	0F08	CSEG

NOBRK  . . . . . . . . . . . . .  	L NEAR	084A	CSEG
NONASC . . . . . . . . . . . . .  	L NEAR	0876	CSEG
NOSWIT . . . . . . . . . . . . .  	L NEAR	136A	CSEG
NOTPTR . . . . . . . . . . . . .  	L WORD 	14B4	CSEG
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Symbols-7
                                                             

NOTTAB . . . . . . . . . . . . .  	L NEAR	0899	CSEG
NREAD  . . . . . . . . . . . . .  	N PROC	10FD	CSEG	Global	Length = 004B
NREADX . . . . . . . . . . . . .  	L NEAR	1142	CSEG
NSETCX . . . . . . . . . . . . .  	N PROC	103F	CSEG	Global	Length = 004F
NTARRY . . . . . . . . . . . . .  	L BYTE 	142E	CSEG	Length = 0084
NWRITE . . . . . . . . . . . . .  	N PROC	1148	CSEG	Global	Length = 0078
NXNOTE . . . . . . . . . . . . .  	L NEAR	1601	CSEG
NXTCHR . . . . . . . . . . . . .  	L NEAR	0AF1	CSEG
NXTNOT . . . . . . . . . . . . .  	N PROC	16C7	CSEG	Length = 000B

OEMHED . . . . . . . . . . . . .  	L BYTE 	0017	CSEG
OFF_5101 . . . . . . . . . . . .  	L WORD 	012A	CSEG
OLDTMI . . . . . . . . . . . . .  	L DWORD	14BD	CSEG
ONEKEY . . . . . . . . . . . . .  	L NEAR	086F	CSEG

PEKFLT . . . . . . . . . . . . .  	N PROC	0142	CSEG	Global	Length = 000E
PEKPOK . . . . . . . . . . . . .  	L BYTE 	0111	CSEG
PFLTX  . . . . . . . . . . . . .  	L NEAR	01BF	CSEG
PGDISP . . . . . . . . . . . . .  	L WORD 	10BD	CSEG
PGINIT . . . . . . . . . . . . .  	N PROC	10C7	CSEG	Global	Length = 0036
PGINIX . . . . . . . . . . . . .  	L NEAR	10FC	CSEG
PIXSIZ . . . . . . . . . . . . .  	N PROC	10A2	CSEG	Global	Length = 0004
PNTINI . . . . . . . . . . . . .  	N PROC	11CE	CSEG	Global	Length = 000B
PNTINX . . . . . . . . . . . . .  	L NEAR	11D4	CSEG
POKFLT . . . . . . . . . . . . .  	N PROC	0150	CSEG	Global	Length = 0076
POLEVX . . . . . . . . . . . . .  	L NEAR	142D	CSEG
POLLEV . . . . . . . . . . . . .  	N PROC	140F	CSEG	Global	Length = 001F
PRTMAP . . . . . . . . . . . . .  	N PROC	0060	CSEG	Global	Length = 0040

RDCLOP . . . . . . . . . . . . .  	L NEAR	1006	CSEG
RDPEN  . . . . . . . . . . . . .  	N PROC	1372	CSEG	Global	Length = 0038
RDPENX . . . . . . . . . . . . .  	L NEAR	138D	CSEG
RDSTIK . . . . . . . . . . . . .  	N PROC	13E6	CSEG	Global	Length = 0029
RDSTKX . . . . . . . . . . . . .  	L NEAR	140B	CSEG
RDSTLP . . . . . . . . . . . . .  	L NEAR	1404	CSEG
RDTRGX . . . . . . . . . . . . .  	L NEAR	13E3	CSEG
RDTRIG . . . . . . . . . . . . .  	N PROC	13AA	CSEG	Global	Length = 003C
READC  . . . . . . . . . . . . .  	N PROC	0FED	CSEG	Global	Length = 0020
RECCOM . . . . . . . . . . . . .  	N PROC	0519	CSEG	Global	Length = 0040
RGHTCX . . . . . . . . . . . . .  	L NEAR	0F40	CSEG
RIGHTC . . . . . . . . . . . . .  	N PROC	0F31	CSEG	Global	Length = 0011

SCALXY . . . . . . . . . . . . .  	N PROC	0F7F	CSEG	Global	Length = 0029
SCANL  . . . . . . . . . . . . .  	N PROC	1293	CSEG	Global	Length = 0074
SCANR  . . . . . . . . . . . . .  	N PROC	11D9	CSEG	Global	Length = 00AA
SCBFX  . . . . . . . . . . . . .  	L NEAR	03E0	CSEG
SCNCLR . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
SCNERR . . . . . . . . . . . . .  	L NEAR	0EFD	CSEG
SCNOK  . . . . . . . . . . . . .  	L NEAR	0EF9	CSEG
SCNRST . . . . . . . . . . . . .  	N PROC	072D	CSEG	Global	Length = 0011
SCNSWI . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
SCNXLT . . . . . . . . . . . . .  	L BYTE 	08B2	CSEG
SCRATR . . . . . . . . . . . . .  	N PROC	0CB6	CSEG	Global	Length = 0023
SCRINP . . . . . . . . . . . . .  	N PROC	0A16	CSEG	Global	Length = 0017
Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Symbols-8
                                                             

SCROL  . . . . . . . . . . . . .  	L NEAR	0B91	CSEG
SCROLL . . . . . . . . . . . . .  	N PROC	0A2E	CSEG	Global	Length = 00A1
SCROUT . . . . . . . . . . . . .  	N PROC	09B2	CSEG	Global	Length = 0029
SCRRDC . . . . . . . . . . . . .  	N PROC	0B09	CSEG	Length = 000F
SCRRST . . . . . . . . . . . . .  	L NEAR	0A59	CSEG
SCRSAV . . . . . . . . . . . . .  	N PROC	0B32	CSEG	Length = 003E
SCRSTT . . . . . . . . . . . . .  	N PROC	0CD9	CSEG	Global	Length = 00D2
SCRSV2 . . . . . . . . . . . . .  	N PROC	09DB	CSEG	Length = 003B
SCRWRC . . . . . . . . . . . . .  	N PROC	0B18	CSEG	Length = 001A
SEGINI . . . . . . . . . . . . .  	N PROC	0000	CSEG	Global	Length = 0017
SETATR . . . . . . . . . . . . .  	N PROC	0FE4	CSEG	Global	Length = 0009
SETC . . . . . . . . . . . . . .  	N PROC	100D	CSEG	Global	Length = 000C
SETCBF . . . . . . . . . . . . .  	N PROC	0363	CSEG	Global	Length = 008C
SETCLR . . . . . . . . . . . . .  	N PROC	0DCA	CSEG	Global	Length = 00B1
SETCSR . . . . . . . . . . . . .  	L NEAR	07E6	CSEG
SETCUR . . . . . . . . . . . . .  	L NEAR	0BE0	CSEG
SETERR . . . . . . . . . . . . .  	L NEAR	0E78	CSEG
SETFBC . . . . . . . . . . . . .  	N PROC	00BF	CSEG	Global	Length = 003B
SETPTR . . . . . . . . . . . . .  	N PROC	1019	CSEG	Length = 0026
SETVPG . . . . . . . . . . . . .  	N PROC	0ACF	CSEG	Length = 0017
SETVPX . . . . . . . . . . . . .  	L NEAR	0AE4	CSEG
SNDCMX . . . . . . . . . . . . .  	L NEAR	05A9	CSEG
SNDCOM . . . . . . . . . . . . .  	N PROC	0559	CSEG	Global	Length = 0058
SNDLOP . . . . . . . . . . . . .  	L NEAR	056E	CSEG
SNDLPT . . . . . . . . . . . . .  	N PROC	05E0	CSEG	Global	Length = 0028
SNERR  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
SPCTAB . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
STACOM . . . . . . . . . . . . .  	N PROC	05B1	CSEG	Global	Length = 002F
STATRX . . . . . . . . . . . . .  	L NEAR	0FEB	CSEG
STOREC . . . . . . . . . . . . .  	N PROC	0F21	CSEG	Global	Length = 0008
SUB_5643 . . . . . . . . . . . .  	N PROC	0669	CSEG	Length = 0022
SUB_5665 . . . . . . . . . . . .  	N PROC	068B	CSEG	Length = 0045
SUB_5BF8 . . . . . . . . . . . .  	N PROC	0C19	CSEG	Length = 0061
SUB_5D8A . . . . . . . . . . . .  	N PROC	0DAB	CSEG	Length = 001F
SUB_5E5A . . . . . . . . . . . .  	N PROC	0E7B	CSEG	Length = 0011
SUB_6262 . . . . . . . . . . . .  	N PROC	1283	CSEG	Length = 0010
SWIDTH . . . . . . . . . . . . .  	N PROC	0E8C	CSEG	Global	Length = 0071
SWPVEC . . . . . . . . . . . . .  	N PROC	07A7	CSEG	Length = 001D

TDOWNC . . . . . . . . . . . . .  	N PROC	10B2	CSEG	Global	Length = 000B
TIMISR . . . . . . . . . . . . .  	F PROC	0704	CSEG	Length = 0022
TIMRSG . . . . . . . . . . . . .  	L WORD 	0007	DSEG
TMISON . . . . . . . . . . . . .  	L NEAR	1681	CSEG
TMRCHN . . . . . . . . . . . . .  	L NEAR	15AE	CSEG
TMRIS1 . . . . . . . . . . . . .  	L NEAR	14D5	CSEG
TMRISR . . . . . . . . . . . . .  	F PROC	14C1	CSEG	Length = 0101
TMRISX . . . . . . . . . . . . .  	L NEAR	15B8	CSEG
TMRRST . . . . . . . . . . . . .  	L NEAR	15A9	CSEG
TRMCOM . . . . . . . . . . . . .  	N PROC	0608	CSEG	Global	Length = 0061
TUPC . . . . . . . . . . . . . .  	N PROC	10A6	CSEG	Global	Length = 000C
TUPCX  . . . . . . . . . . . . .  	L NEAR	10B0	CSEG
TWOKEY . . . . . . . . . . . . .  	L NEAR	0894	CSEG
TXTATR . . . . . . . . . . . . .  	L NEAR	00B7	CSEG

Microsoft (R) Macro Assembler  Version 4.00                 7/13/20 13:03:16

                                                            Symbols-9
                                                             

UPC  . . . . . . . . . . . . . .  	L NEAR	0F53	CSEG	Global

VAR_630  . . . . . . . . . . . .  	L BYTE 	0000	DSEG
VAR_639  . . . . . . . . . . . .  	L BYTE 	0009	DSEG
VAR_63A  . . . . . . . . . . . .  	L BYTE 	000A	DSEG
VAR_63B  . . . . . . . . . . . .  	L BYTE 	000B	DSEG
VAR_63C  . . . . . . . . . . . .  	L BYTE 	000C	DSEG
VAR_63D  . . . . . . . . . . . .  	L BYTE 	000D	DSEG
VAR_63E  . . . . . . . . . . . .  	L BYTE 	000E	DSEG
VAR_63F  . . . . . . . . . . . .  	L BYTE 	000F	DSEG
VAR_640  . . . . . . . . . . . .  	L BYTE 	0010	DSEG
VAR_641  . . . . . . . . . . . .  	L BYTE 	0011	DSEG
VAR_642  . . . . . . . . . . . .  	L BYTE 	0012	DSEG
VAR_643  . . . . . . . . . . . .  	L WORD 	0013	DSEG
VAR_645  . . . . . . . . . . . .  	L BYTE 	0015	DSEG
VAR_646  . . . . . . . . . . . .  	L BYTE 	0016	DSEG
VAR_647  . . . . . . . . . . . .  	L WORD 	0017	DSEG
VAR_649  . . . . . . . . . . . .  	L WORD 	0019	DSEG
VAR_64B  . . . . . . . . . . . .  	L BYTE 	001B	DSEG
VAR_64C  . . . . . . . . . . . .  	L BYTE 	001C	DSEG
VAR_64D  . . . . . . . . . . . .  	L BYTE 	001D	DSEG
VAR_64E  . . . . . . . . . . . .  	L WORD 	001E	DSEG
VAR_650  . . . . . . . . . . . .  	L BYTE 	0020	DSEG
VAR_652  . . . . . . . . . . . .  	L BYTE 	0022	DSEG
VAR_655  . . . . . . . . . . . .  	L BYTE 	0025	DSEG
VAR_660  . . . . . . . . . . . .  	L BYTE 	0030	DSEG
VAR_661  . . . . . . . . . . . .  	L WORD 	0031	DSEG
VAR_663  . . . . . . . . . . . .  	L WORD 	0033	DSEG
VAR_665  . . . . . . . . . . . .  	L BYTE 	0035	DSEG
VAR_666  . . . . . . . . . . . .  	L BYTE 	0036	DSEG
VAR_667  . . . . . . . . . . . .  	L WORD 	0037	DSEG
VAR_669  . . . . . . . . . . . .  	L BYTE 	0039	DSEG
VIDPGE . . . . . . . . . . . . .  	L NEAR	0768	CSEG

WAITLP . . . . . . . . . . . . .  	L NEAR	1618	CSEG
WIDE40 . . . . . . . . . . . . .  	L NEAR	0EAD	CSEG
WORD_50E9  . . . . . . . . . . .  	L WORD 	0112	CSEG
WORD_64AB  . . . . . . . . . . .  	L WORD 	14B9	CSEG
WRAP . . . . . . . . . . . . . .  	L NEAR	16CE	CSEG
WTDONE . . . . . . . . . . . . .  	L NEAR	162B	CSEG


   4221 Source  Lines
   4221 Total   Lines
    467 Symbols

  34834 Bytes symbol space free

      0 Warning Errors
      0 Severe  Errors

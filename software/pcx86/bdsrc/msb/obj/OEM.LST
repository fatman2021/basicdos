Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-1
                                                            

                                ; 
                                ; Reversed-engineered OEM.ASM, courtesy of Mich
				al Necasek 2020-07-13 
                                ; 
 0000                           DSEG    SEGMENT PUBLIC 'DATASG' 
                                 
                                ; Defined elsewhere 
                                EXTRN   CSAVEA:WORD,CSAVEM:WORD 
                                 
                                ; Data defined by the OEM module 
                                 
 0000  00                       OVMODE  db      0       ; Old video mode 
 0001  073E R                   CBKINT  dw      offset  CTLBRK 
 0003  0000                     CBRKSG  dw      0 
 0005  071C R                           dw      offset  TIMISR 
 0007  0000                     TIMRSG  dw      0 
 0009  00                       CVPAGE  db      0       ; Currently selected vi
				deo page 
 000A  00                       var_63a db      0 
 000B  50                       var_63b db      80      ; Screen width in colum
				ns (40/80) 
 000C  00                       var_63c db      0 
 000D  00                       VISVPG  db      0       ; Currently visible vid
				eo page 
 000E  00                       var_63e db      0       ; Initial/saved number 
				of columns 
 000F  00                       CVMODE  db      0       ; Currently set video m
				ode 
 0010  00                       var_640 db      0 
 0011  00                       var_641 db      0 
 0012  00                       var_642 db      0 
 0013  0707                     var_643 dw      0707h   ; Cursor shape 
 0015  07                       var_645 db      7       ; Saved text attributes
				 
 0016  07                       var_646 db      7       ; Current text attribut
				es 
 0017  0000                     var_647 dw      0       ; Current video memory 
				offset 
 0019  0000                     var_649 dw      0       ; Screen width in pixel
				s? 
 001B  00                       var_64b db      0       ; Current character col
				umn? 
 001C  00                       var_64c db      0 
 001D  00                       var_64d db      0 
 001E  0000                     var_64e dw      0 
 0020  00                       var_650 db      0 
 0021  00                               db      0 
 0022  06                       var_652 db      6 
 0023  05                               db      5 
 0024  01                               db      1 
 0025  06                       var_655 db      6 
 0026  0A                               db      10 
 0027  01                               db      1 
 0028  00                               db      0       ; Likely unused 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-2
                                                            

 0029  00                               db      0 
 002A  00                               db      0 
 002B  00                               db      0 
 002C  00                               db      0 
 002D  00                               db      0 
 002E  00                               db      0 
 002F  00                               db      0 
 0030  03                       var_660 db      3 
 0031  0000                     var_661 dw      0       ; Current offset into s
				creen? 
 0033  0000                     var_663 dw      0       ; Some other offset? 
 0035  00                       var_665 db      0 
 0036  00                       var_666 db      0 
 0037  0000                     var_667 dw      0       ; Function pointer 
 0039  00                       var_669 db      0 
                                 
 003A                           DSEG    ENDS 
                                 
 0000                           CSEG	SEGMENT PUBLIC 'CODESG' 
                                	ASSUME  CS:CSEG 
                                 
                                ; GW-BASIC routines that OEM code calls into. 
                                 
                                EXTRN   KYBCLR:NEAR 
                                EXTRN   SCNCLR:NEAR 
                                EXTRN   SCNSWI:NEAR 
                                EXTRN   GRPINI:NEAR 
                                 
                                EXTRN   SPCTAB:NEAR 
                                EXTRN   SNERR:NEAR 
                                 
                                PUBLIC  SEGINI, GETHED, PRTMAP, GETFBC, SETFBC,
				 GRPSIZ, POKFLT, PEKFLT 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0000                           SEGINI		proc near 
 0000  1E                       		push	ds 
 0001  33 C0                    		xor	ax, ax 
 0003  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 0005  8C C8                    		mov	ax, cs 
 0007  A3 006E                  		mov	ds:6Eh,	ax	; Adjust segment for vector 1B
				h 
 000A  A3 0072                  		mov	ds:72h,	ax	; Adjust segment for vector 1C
				h 
 000D  A3 0092                  		mov	ds:92h,	ax	; Adjust segment for vector 24
				h 
 0010  8C C0                    		mov	ax, es 
 0012  A3 0510                  		mov	ds:510h, ax	; Stash	away BASIC data	segme
				nt 
 0015  1F                       		pop	ds 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-3
                                                            

                                		assume ds:nothing 
 0016  C3                       		ret 
                                SEGINI		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
 0017  0D 0A                    OEMHED		db 0Dh,0Ah 
 0019  4D 69 63 72 6F 73 6F     		db 'Microsoft BASIC',0Dh,0Ah 
       66 74 20 42 41 53 49     
       43 0D 0A                 
 002A  4F 45 4D 2E 41 53 4D     		db 'OEM.ASM by OS/2 Museum, July 2020',0Dh,0A
				h 
       20 62 79 20 4F 53 2F     
       32 20 4D 75 73 65 75     
       6D 2C 20 4A 75 6C 79     
       20 32 30 32 30 0D 0A     
 004D  68 74 74 70 73 3A 2F     		db 'https://github.com/microsoft/GW-BASIC' 
       2F 67 69 74 68 75 62     
       2E 63 6F 6D 2F 6D 69     
       63 72 6F 73 6F 66 74     
       2F 47 57 2D 42 41 53     
       49 43                    
 0072  00                                       db 0 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0073                           GETHED		proc near 
 0073  3A C0                    		cmp	al, al 
 0075  BB 0017 R                		mov	bx, offset OEMHED 
 0078  C3                       		ret 
                                GETHED		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Map print function/output character codes 
                                 
 0079                           PRTMAP		proc near 
 0079  3C FF                    		cmp	al, 0FFh 
 007B  75 09                    		jnz	short loc_5044 
 007D  80 3E 000A R 00          		cmp	byte ptr ds:var_63a, 0 
 0082  74 18                    		jz	short BADMAP 
 0084  B0 20                    		mov	al, ' ' 
 0086                           loc_5044: 
 0086  3C 07                    		cmp	al, 7		; BEL 
 0088  74 12                    		jz	short BADMAP 
 008A  3C 20                    		cmp	al, ' ' 
 008C  73 22                    		jnb	short loc_506E 
 008E  3C 09                    		cmp	al, 9 
 0090  72 1E                    		jb	short loc_506E 
 0092  74 21                    		jz	short loc_5073 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-4
                                                            

 0094  3C 0E                    		cmp	al, 0Eh 
 0096  72 04                    		jb	short BADMAP 
 0098  3C 1C                    		cmp	al, 1Ch 
 009A  72 14                    		jb	short loc_506E 
 009C                           BADMAP: 
 009C  B4 FF                    		mov	ah, 0FFh 
 009E  0A C0                    		or	al, al 
 00A0  F9                       		stc 
 00A1  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 00A2                           loc_5060: 
 00A2  B0 20                    		mov	al, ' ' 
 00A4  80 3E 000A R 00          		cmp	byte ptr ds:var_63a, 0 
 00A9  75 05                    		jnz	short loc_506E 
 00AB  0A C0                    		or	al, al 
 00AD  B0 00                    		mov	al, 0 
 00AF  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 00B0                           loc_506E: 
 00B0  0A C0                    		or	al, al 
 00B2  74 EE                    		jz	short loc_5060 
 00B4  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 00B5                           loc_5073: 
 00B5  B0 0F                    		mov	al, 0Fh 
 00B7  EB E3                    		jmp	short BADMAP 
                                PRTMAP		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Get foreground/background colors 
                                ; On entry: 
                                ;   CF set  : Graphics 
                                ;   CF clear: Text mode 
                                 
 00B9                           GETFBC		proc near 
 00B9  72 15                    		jb	short TXTATR 
 00BB  A0 0016 R                		mov	al, ds:var_646 
 00BE  8A D8                    		mov	bl, al 
 00C0  D0 EB                    		shr	bl, 1 
 00C2  D0 EB                    		shr	bl, 1 
 00C4  D0 EB                    		shr	bl, 1 
 00C6  D0 EB                    		shr	bl, 1 
 00C8  25 008F                  		and	ax, 8Fh 
 00CB  81 E3 0007               		and	bx, 7 
 00CF  C3                       		ret 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-5
                                                            

                                ; ---------------------------------------------
				------------------------------ 
                                 
 00D0                           TXTATR: 
 00D0  33 C0                    		xor	ax, ax 
 00D2  8B D8                    		mov	bx, ax 
 00D4  B0 03                    		mov	al, 3 
 00D6  C3                       		ret 
                                GETFBC		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
 00D7  00                       byte_5095	db 0 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Set foreground/background colors 
                                 
 00D8                           SETFBC		proc near 
 00D8  50                       		push	ax 
 00D9  53                       		push	bx 
 00DA  80 3E 000A R 00          		cmp	byte ptr ds:var_63a, 0 
 00DF  75 2F                    		jnz	short loc_50CE 
 00E1  D0 E3                    		shl	bl, 1 
 00E3  D0 E3                    		shl	bl, 1 
 00E5  D0 E3                    		shl	bl, 1 
 00E7  D0 E3                    		shl	bl, 1 
 00E9  0A C3                    		or	al, bl 
 00EB  2E: 80 3E 00D7 R 00      		cmp	cs:byte_5095, 0 
 00F1  2E: C6 06 00D7 R 00      		mov	cs:byte_5095, 0 
 00F7  A0 0015 R                		mov	al, ds:var_645 
 00FA  75 11                    		jnz	short loc_50CB 
 00FC  2E: C6 06 00D7 R 01      		mov	cs:byte_5095, 1 
 0102  B0 70                    		mov	al, 70h	; 'p' 
 0104  80 3E 0015 R 07          		cmp	byte ptr ds:var_645, 7 
 0109  74 02                    		jz	short loc_50CB 
 010B  B0 07                    		mov	al, 7 
 010D                           loc_50CB: 
 010D  A2 0016 R                		mov	ds:var_646, al 
 0110                           loc_50CE: 
 0110  5B                       		pop	bx 
 0111  58                       		pop	ax 
 0112  C3                       		ret 
                                SETFBC		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
 0113  8A 0E 000B R             		mov	cl, ds:var_63b 
 0117  B5 00                    		mov	ch, 0 
 0119  BA 0019                  		mov	dx, 25 
 011C  C3                       		ret 
                                 
                                ; =============== S U B	R O U T	I N E =========
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-6
                                                            

				============================== 
                                 
                                ; Get screen pixel dimensions 
                                 
 011D                           GRPSIZ		proc near 
 011D  8B 0E 0019 R             		mov	cx, ds:var_649 
 0121  0B C9                    		or	cx, cx 
 0123  74 01                    		jz	short HEIGHT 
 0125  49                       		dec	cx		; Decrement unless zero 
 0126                           HEIGHT: 
 0126  BA 00C7                  		mov	dx, 199 
 0129  C3                       		ret 
                                GRPSIZ		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
 012A  00                       PEKPOK		db 0                    ; Is it	a PEEK 
				(0) or POKE (255)? 
 012B  002E                     word_50E9	dw 2Eh 
 012D  002F                     		dw 2Fh 
 012F  0347                     		dw 347h 
 0131  0348                     		dw 348h 
 0133  0030                     		dw 30h 
 0135  0031                     		dw 31h 
 0137  0358                     		dw 358h 
 0139  0359                     		dw 359h 
 013B  004E                     		dw 4Eh 
 013D  002C                     		dw 2Ch 
 013F  002D                     		dw 2Dh 
 0141  006A                     		dw 6Ah 
 0143  01D4 R                   off_5101	dw offset loc_5192 
 0145  0153                     		dw 153h 
 0147  0152                     		dw 152h 
 0149  0646                     		dw 646h         ; var_646 ??? 
 014B  048F                     		dw 48Fh 
 014D  048E                     		dw 48Eh 
 014F  0157                     		dw 157h 
 0151  0156                     		dw 156h 
 0153  047E                     		dw 47Eh 
 0155  047D                     		dw 47Dh 
 0157  0155                     		dw 155h 
 0159  0154                     		dw 154h 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Filter PEEKs for "special" addresses 
                                 
 015B                           PEKFLT		proc near 
 015B  50                       		push	ax 
 015C  51                       		push	cx 
 015D  53                       		push	bx 
 015E  52                       		push	dx 
 015F  8B D3                    		mov	dx, bx 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-7
                                                            

 0161  2E: C6 06 012A R 00      		mov	cs:PEKPOK, 0	; It's a peek 
 0167  EB 0A                    		jmp	short DOPFLT 
                                PEKFLT		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Filter POKEs for "special" addresses 
                                ; On entry: Address in ES:DX 
                                ; On exit : ZF clear if	poke should be done 
                                 
 0169                           POKFLT		proc near 
 0169  50                       		push	ax 
 016A  51                       		push	cx 
 016B  53                       		push	bx 
 016C  52                       		push	dx 
 016D  2E: C6 06 012A R FF      		mov	cs:PEKPOK, -1	; It's a poke 
 0173                           DOPFLT: 
 0173  57                       		push	di 
 0174  06                       		push	es 
 0175  FC                       		cld 
 0176  8C D8                    		mov	ax, ds 
 0178  8C C1                    		mov	cx, es 
 017A  3B C8                    		cmp	cx, ax		; Is it	the BASIC data segment? 
 017C  74 18                    		jz	short BASDAT 
 017E  83 F9 00                 		cmp	cx, 0		; Zero segment? 
 0181  75 55                    		jnz	short PFLTX 
 0183  81 FA 041A               		cmp	dx, 41Ah	; Is it	the pointer into the key
				board buffer? 
 0187  75 4F                    		jnz	short PFLTX 
 0189  2E: 80 3E 012A R FF      		cmp	cs:PEKPOK, -1	; Is it	a POKE? 
 018F  75 47                    		jnz	short PFLTX 
 0191  E8 0000 E                		call	KYBCLR 
 0194  EB 42                    		jmp	short PFLTX 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0196                           BASDAT: 
 0196  BF 012B R                		mov	di, offset word_50E9 
 0199  8B C2                    		mov	ax, dx 
 019B  B9 0018                  		mov	cx, 18h 
 019E  D1 E9                    		shr	cx, 1 
 01A0  0E                       		push	cs 
 01A1  07                       		pop	es 
                                		assume es:CSEG 
 01A2  F2/ AF                   		repne scasw 
 01A4  75 32                    		jnz	short PFLTX 
 01A6  D1 E1                    		shl	cx, 1 
 01A8  BB 0143 R                		mov	bx, offset off_5101 
 01AB  03 D9                    		add	bx, cx 
 01AD  2E: 8B 07                		mov	ax, cs:[bx] 
 01B0  07                       		pop	es 
                                		assume es:nothing 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-8
                                                            

 01B1  5F                       		pop	di 
 01B2  5A                       		pop	dx 
 01B3  5B                       		pop	bx 
 01B4  83 F9 02                 		cmp	cx, 2 
 01B7  72 18                    		jb	short loc_518F 
 01B9  2E: 80 3E 012A R 00      		cmp	cs:PEKPOK, 0	; Is it	a PEEK? 
 01BF  74 08                    		jz	short loc_5187 
 01C1  8B D0                    		mov	dx, ax 
 01C3  0D FFFF                  		or	ax, 0FFFFh 
 01C6  59                       		pop	cx 
 01C7  58                       		pop	ax 
 01C8  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 01C9                           loc_5187: 
 01C9  8B D8                    		mov	bx, ax 
 01CB  0D FFFF                  		or	ax, 0FFFFh 
 01CE  59                       		pop	cx 
 01CF  58                       		pop	ax 
 01D0  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 01D1                           loc_518F: 
 01D1  59                       		pop	cx 
 01D2  FF E0                    		jmp	ax 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 01D4                           loc_5192: 
 01D4  33 C0                    		xor	ax, ax 
 01D6  58                       		pop	ax 
 01D7  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 01D8                           PFLTX: 
 01D8  07                       		pop	es 
 01D9  5F                       		pop	di 
 01DA  5A                       		pop	dx 
 01DB  5B                       		pop	bx 
 01DC  59                       		pop	cx 
 01DD  58                       		pop	ax 
 01DE  C3                       		ret 
                                POKFLT		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
                                ; Start of another module? 
                                ;		align 4 
                                 
                                PUBLIC  SETCBF, INICOM, RECCOM, SNDCOM, STACOM,
				 TRMCOM, SNDLPT 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-9
                                                            

                                 
 01DF  2580                     BAUDTB  	dw 9600 
 01E1  12C0                     		dw 4800 
 01E3  0960                     		dw 2400 
 01E5  0708                     		dw 1800 
 01E7  04B0                     		dw 1200 
 01E9  0258                     		dw 600 
 01EB  012C                     		dw 300 
 01ED  0096                     		dw 150 
 01EF  006E                     		dw 110 
 01F1  004B                     		dw 75 
 01F3  000C                     		dw 12 
 01F5  0018                     		dw 24 
 01F7  0030                     		dw 48 
 01F9  0040                     		dw 64 
 01FB  0060                     		dw 96 
 01FD  00C0                     		dw 192 
 01FF  0180                     		dw 384 
 0201  0300                     		dw 768 
 0203  0417                     		dw 1047 
 0205  0600                     		dw 1536 
 0207  08                       masks?		db 8 
 0208  18                       		db 18h 
 0209  28                       		db 28h 
 020A  38                       		db 38h 
 020B  020F R                   COMTBL		dw offset CM1CTL 
 020D  0231 R                   		dw offset CM2CTL 
 020F  00                       CM1CTL		db    0		; Control structure for	first 
				COM port 
 0210  00                       		db    0 
 0211  00                       		db    0 
 0212  00                       		db    0 
 0213  00                       		db    0 
 0214  00                       		db    0 
 0215  00                       		db    0 
 0216  00                       		db    0 
 0217  00                       		db    0 
 0218  00                       		db    0 
 0219  00                       		db    0 
 021A  00                       		db    0 
 021B  00                       		db    0 
 021C  00                       		db    0 
 021D  00                       		db    0 
 021E  00                       		db    0 
 021F  00                       		db    0 
 0220  00                       		db    0 
 0221  00                       		db    0 
 0222  00                       		db    0 
 0223  00                       		db    0 
 0224  00                       		db    0 
 0225  00                       		db    0 
 0226  00                       		db    0 
 0227  00                       		db    0 
 0228  00                       		db    0 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-10
                                                            

 0229  00                       		db    0 
 022A  00                       		db    0 
 022B  00                       		db    0 
 022C  00                       		db    0 
 022D  00                       		db    0 
 022E  00                       		db    0 
 022F  025F R                   		dw offset CM1ISR 
 0231  00                       CM2CTL		db    0         ; Control structure for
					second COM port 
 0232  00                       		db    0 
 0233  00                       		db    0 
 0234  00                       		db    0 
 0235  00                       		db    0 
 0236  00                       		db    0 
 0237  00                       		db    0 
 0238  00                       		db    0 
 0239  00                       		db    0 
 023A  00                       		db    0 
 023B  00                       		db    0 
 023C  00                       		db    0 
 023D  00                       		db    0 
 023E  00                       		db    0 
 023F  00                       		db    0 
 0240  00                       		db    0 
 0241  00                       		db    0 
 0242  00                       		db    0 
 0243  00                       		db    0 
 0244  00                       		db    0 
 0245  00                       		db    0 
 0246  00                       		db    0 
 0247  00                       		db    0 
 0248  00                       		db    0 
 0249  00                       		db    0 
 024A  00                       		db    0 
 024B  00                       		db    0 
 024C  00                       		db    0 
 024D  00                       		db    0 
 024E  00                       		db    0 
 024F  00                       		db    0 
 0250  00                       		db    0 
 0251  0265 R                   		dw offset CM2ISR 
 0253  0000                     CBFSEG		dw 0 
 0255  0000                     CBFSIZ		dw 0 
 0257  0342 R                   ISRDSP		dw offset ISRFN0 
 0259  0309 R                   		dw offset ISRFN1 
 025B  0287 R                   		dw offset ISRFN2 
 025D  0336 R                   		dw offset ISRFN3 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 025F                           CM1ISR: 
 025F  53                       		push	bx 
 0260  BB 020F R                		mov	bx, offset CM1CTL 
 0263  EB 04                    		jmp	short COMISR 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-11
                                                            

                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0265                           CM2ISR		proc far 
 0265  53                       		push	bx 
 0266  BB 0231 R                		mov	bx, offset CM2CTL 
                                 
 0269                           COMISR: 
 0269  51                       		push	cx 
 026A  52                       		push	dx 
 026B  56                       		push	si 
 026C  57                       		push	di 
 026D  1E                       		push	ds 
 026E  0E                       		push	cs 
 026F  1F                       		pop	ds 
                                		assume ds:CSEG 
 0270  50                       		push	ax 
 0271  C6 47 1D 00              		mov	byte ptr [bx+1Dh], 0 
 0275  8B 17                    		mov	dx, [bx] 
 0277  42                       		inc	dx 
 0278  42                       		inc	dx 
 0279  EC                       		in	al, dx 
 027A                           loc_523B: 
 027A  24 06                    		and	al, 6 
 027C  FE 47 1D                 		inc	byte ptr [bx+1Dh] 
 027F  B4 00                    		mov	ah, 0 
 0281  8B F0                    		mov	si, ax 
 0283  FF A4 0257 R             		jmp	ISRDSP[si] 
 0287                           ISRFN2: 
 0287  4A                       		dec	dx 
 0288  4A                       		dec	dx 
 0289  EC                       		in	al, dx 
 028A  8B 77 0A                 		mov	si, [bx+0Ah] 
 028D  46                       		inc	si 
 028E  3B 36 0255 R             		cmp	si, CBFSIZ 
 0292  76 02                    		jbe	short loc_5257 
 0294  33 F6                    		xor	si, si 
 0296                           loc_5257: 
 0296  3B 77 08                 		cmp	si, [bx+8] 
 0299  75 06                    		jnz	short loc_5262 
 029B  80 4F 18 01              		or	byte ptr [bx+18h], 1 
 029F  EB 17                    		jmp	short COMEOI 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 02A1                           loc_5262: 
 02A1  C6 06 131E R 01          		mov	BYTE PTR ISREVT, 1 
 02A6  89 77 0A                 		mov	[bx+0Ah], si 
 02A9  1E                       		push	ds 
 02AA  53                       		push	bx 
 02AB  8B 5F 14                 		mov	bx, [bx+14h] 
 02AE  8B 3E 0253 R             		mov	di, CBFSEG 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-12
                                                            

 02B2  8E DF                    		mov	ds, di 
                                		assume ds:nothing 
 02B4  88 00                    		mov	[bx+si], al 
 02B6  5B                       		pop	bx 
 02B7  1F                       		pop	ds 
 02B8                           COMEOI: 
 02B8  B0 20                    		mov	al, 20h		; Send EOI 
 02BA  E6 20                    		out	20h, al		; Interrupt controller,	8259A. 
 02BC  8B 17                    		mov	dx, [bx] 
 02BE  42                       		inc	dx 
 02BF  42                       		inc	dx 
 02C0  EC                       		in	al, dx 
 02C1  A8 01                    		test	al, 1 
 02C3  75 3B                    		jnz	short ISRX 
 02C5  80 7F 1D 08              		cmp	byte ptr [bx+1Dh], 8 
 02C9  72 AF                    		jb	short loc_523B 
 02CB  80 4F 19 01              		or	byte ptr [bx+19h], 1 
 02CF  1E                       		push	ds 
 02D0  33 C0                    		xor	ax, ax 
 02D2  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 02D4  2E: 8B 77 1E             		mov	si, cs:[bx+1Eh]	; Messing with the IVT! 
 02D8  2E: 8B 47 10             		mov	ax, cs:[bx+10h] 
 02DC  89 04                    		mov	[si], ax 
 02DE  2E: 8B 47 12             		mov	ax, cs:[bx+12h] 
 02E2  89 44 02                 		mov	[si+2],	ax 
 02E5  33 C0                    		xor	ax, ax 
 02E7  2E: 89 47 10             		mov	cs:[bx+10h], ax 
 02EB  2E: 89 47 12             		mov	cs:[bx+12h], ax 
 02EF  1F                       		pop	ds 
                                		assume ds:nothing 
 02F0  42                       		inc	dx 
 02F1  42                       		inc	dx 
 02F2  B0 00                    		mov	al, 0		; Read interrupt mask 
 02F4  EE                       		out	dx, al 
 02F5  E4 21                    		in	al, 21h		; Interrupt controller,	8259A. 
 02F7  0A 47 1C                 		or	al, [bx+1Ch]	; Mask this port's IRQ again 
 02FA  E6 21                    		out	21h, al		; Interrupt controller,	8259A. 
 02FC  B0 20                    		mov	al, 20h		; One more EOI for good	measure?
				 
 02FE  E6 20                    		out	20h, al		; Interrupt controller,	8259A. 
 0300                           ISRX: 
 0300  58                       		pop	ax 
 0301  1F                       		pop	ds 
 0302  5F                       		pop	di 
 0303  5E                       		pop	si 
 0304  5A                       		pop	dx 
 0305  59                       		pop	cx 
 0306  5B                       		pop	bx 
 0307  FB                       		sti 
 0308  CF                       		iret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-13
                                                            

 0309                           ISRFN1: 
 0309  4A                       		dec	dx 
 030A  8B 77 0C                 		mov	si, [bx+0Ch] 
 030D  3B 77 0E                 		cmp	si, [bx+0Eh] 
 0310  74 1F                    		jz	short loc_52F2 
 0312  46                       		inc	si 
 0313  81 FE 0080               		cmp	si, 80h	; '�' 
 0317  76 02                    		jbe	short loc_52DC 
 0319  33 F6                    		xor	si, si 
 031B                           loc_52DC: 
 031B  89 77 0C                 		mov	[bx+0Ch], si 
 031E  53                       		push	bx 
 031F  1E                       		push	ds 
 0320  8B 5F 16                 		mov	bx, [bx+16h] 
 0323  8B 3E 0253 R             		mov	di, ds:CBFSEG 
 0327  8E DF                    		mov	ds, di 
 0329  8A 00                    		mov	al, [bx+si] 
 032B  1F                       		pop	ds 
 032C  5B                       		pop	bx 
 032D  4A                       		dec	dx 
 032E  EE                       		out	dx, al 
 032F  EB 87                    		jmp	short COMEOI 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0331                           loc_52F2: 
 0331  B0 0D                    		mov	al, 0Dh 
 0333  EE                       		out	dx, al 
 0334  EB 82                    		jmp	short COMEOI 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0336                           ISRFN3: 
 0336  83 C2 03                 		add	dx, 3 
 0339  EC                       		in	al, dx 
 033A  24 0A                    		and	al, 0Ah 
 033C  08 47 18                 		or	[bx+18h], al 
 033F  E9 02B8 R                		jmp	COMEOI 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0342                           ISRFN0: 
 0342  83 C2 04                 		add	dx, 4 
 0345  EC                       		in	al, dx 
 0346  83 EA 05                 		sub	dx, 5 
 0349  8A 4F 1A                 		mov	cl, [bx+1Ah] 
 034C  F6 D0                    		not	al 
 034E  22 C1                    		and	al, cl 
 0350  8A 67 19                 		mov	ah, [bx+19h] 
 0353  8A EC                    		mov	ch, ah 
 0355  80 E4 F0                 		and	ah, 0F0h 
 0358  3A E0                    		cmp	ah, al 
 035A  74 13                    		jz	short loc_5330 
 035C  80 E5 0F                 		and	ch, 0Fh 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-14
                                                            

 035F  0A C5                    		or	al, ch 
 0361  88 47 19                 		mov	[bx+19h], al 
 0364  22 C1                    		and	al, cl 
 0366  74 0A                    		jz	short loc_5333 
 0368  80 4F 19 02              		or	byte ptr [bx+19h], 2 
 036C  B0 0D                    		mov	al, 0Dh 
 036E  EE                       		out	dx, al 
 036F                           loc_5330: 
 036F  E9 02B8 R                		jmp	COMEOI 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0372                           loc_5333: 
 0372  80 67 19 FD              		and	byte ptr [bx+19h], 0FDh 
 0376  B0 0F                    		mov	al, 0Fh 
 0378  EE                       		out	dx, al 
 0379  E9 02B8 R                		jmp	COMEOI 
                                CM2ISR		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Set OEM COM Buffer (size & location) 
                                ; On entry: CX = COM buffer segment 
                                ;	    DX = COM buffer size if ZF set 
                                ;	    ZF set   = use buffer size in DX 
                                ;	    ZF clear = use default buffer size 
                                ; 
                                ; On return: DX	= COM buffer size 
                                ;	     CF	set on error 
                                 
 037C                           SETCBF		proc near 
 037C  53                       		push	bx 
 037D  50                       		push	ax 
 037E  1E                       		push	ds 
 037F  56                       		push	si 
 0380  2E: 89 0E 0253 R         		mov	cs:CBFSEG, cx 
 0385  75 03                    		jnz	short HAVBSZ	; ZF set if COM	buffer size 
				was 
                                					; given	on the command line (/C:xxx) 
 0387  BA 0100                  		mov	dx, 256		; Default COM buffer size 
 038A                           HAVBSZ: 
 038A  33 F6                    		xor	si, si 
 038C  0B D2                    		or	dx, dx 
 038E  74 69                    		jz	short SCBFX	; Bail if zero buffer size 
 0390  81 FA 7F70               		cmp	dx, 7F70h	; Buffer size too big? 
 0394  76 03                    		jbe	short CKCOM1 
 0396  BA 7F70                  		mov	dx, 7F70h	; Maximum COM buffer size 
 0399                           CKCOM1: 
 0399  2E: 89 16 0255 R         		mov	cs:CBFSIZ, dx 
 039E  42                       		inc	dx 
 039F  8E DE                    		mov	ds, si 
                                		assume ds:nothing 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-15
                                                            

 03A1  BB 020F R                		mov	bx, offset CM1CTL 
 03A4  A1 0400                  		mov	ax, ds:400h	; Read COM1 base from BDA 
 03A7  3D 03F8                  		cmp	ax, 3F8h	; Does it match	the first UART? 
 03AA  75 27                    		jnz	short CKCOM2 
 03AC  2E: C7 47 1E 0030        		mov	word ptr cs:[bx+1Eh], 30h ; Address of IR
				Q4 vector 
 03B2  2E: C6 47 1B EF          		mov	byte ptr cs:[bx+1Bh], 0EFh ; IRQ4 mask 
 03B7  2E: C6 47 1C 10          		mov	byte ptr cs:[bx+1Ch], 10h ; IRQ4 bit 
 03BC  2E: 89 07                		mov	cs:[bx], ax 
 03BF  2E: 89 77 16             		mov	cs:[bx+16h], si 
 03C3  81 C6 0081               		add	si, 81h	; '�' 
 03C7  2E: 89 77 14             		mov	cs:[bx+14h], si 
 03CB  03 F2                    		add	si, dx 
 03CD  BB 0231 R                		mov	bx, offset CM2CTL 
 03D0  A1 0402                  		mov	ax, ds:402h	; Read COM2 base from BDA 
 03D3                           CKCOM2: 
 03D3  3D 02F8                  		cmp	ax, 2F8h	; Is it	the second UART? 
 03D6  75 21                    		jnz	short SCBFX 
 03D8  2E: C7 47 1E 002C        		mov	word ptr cs:[bx+1Eh], 2Ch ; Address of IR
				Q3 vector 
 03DE  2E: C6 47 1B F7          		mov	byte ptr cs:[bx+1Bh], 0F7h ; IRQ3 mask 
 03E3  2E: C6 47 1C 08          		mov	byte ptr cs:[bx+1Ch], 8	; IRQ3 bit 
 03E8  2E: 89 07                		mov	cs:[bx], ax 
 03EB  2E: 89 77 16             		mov	cs:[bx+16h], si 
 03EF  81 C6 0081               		add	si, 81h	; '�' 
 03F3  2E: 89 77 14             		mov	cs:[bx+14h], si 
 03F7  03 F2                    		add	si, dx 
 03F9                           SCBFX: 
 03F9  8B D6                    		mov	dx, si 
 03FB  83 C2 0F                 		add	dx, 0Fh		; Round	up to next para 
 03FE  81 E2 FFF0               		and	dx, 0FFF0h 
 0402  5E                       		pop	si 
 0403  1F                       		pop	ds 
                                		assume ds:nothing 
 0404  58                       		pop	ax 
 0405  5B                       		pop	bx 
 0406  F8                       		clc 
 0407  C3                       		ret 
                                SETCBF		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
                                ; START	OF FUNCTION CHUNK FOR INICOM 
                                 
 0408                           BADFNM: 
 0408  B4 FF                    		mov	ah, -1		; Bad file name 
 040A  E9 052E R                		jmp	INICMX 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 040D                           COMERR: 
 040D  B4 FE                    		mov	ah, -2 
 040F  E9 052E R                		jmp	INICMX 
                                ; END OF FUNCTION CHUNK	FOR INICOM 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-16
                                                            

                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Machine dependent COM	OPEN routine 
                                 
 0412                           INICOM		proc near 
                                 
 0412  56                       		push	si 
 0413  57                       		push	di 
 0414  1E                       		push	ds 
 0415  0E                       		push	cs 
 0416  1F                       		pop	ds 
                                		assume ds:CSEG 
 0417  8B F3                    		mov	si, bx 
 0419  FC                       		cld 
 041A  26: AC                   		lods	byte ptr es:[si] 
 041C  8A E0                    		mov	ah, al 
 041E  E8 06FE R                		call	CMPREP 
 0421  0B D2                    		or	dx, dx 
 0423  74 E8                    		jz	short COMERR 
 0425  26: AD                   		lods	word ptr es:[si] 
 0427  BF 01DF R                		mov	di, offset BAUDTB 
 042A  B9 000A                  		mov	cx, 0Ah 
 042D  06                       		push	es 
 042E  0E                       		push	cs 
 042F  07                       		pop	es 
                                		assume es:CSEG 
 0430  F2/ AF                   		repne scasw 
 0432  07                       		pop	es 
                                		assume es:nothing 
 0433  75 D3                    		jnz	short BADFNM 
 0435  83 C7 12                 		add	di, 12h 
 0438  83 C2 03                 		add	dx, 3 
 043B  B0 80                    		mov	al, 80h	; '�' 
 043D  EE                       		out	dx, al 
 043E  83 EA 03                 		sub	dx, 3 
 0441  8B 05                    		mov	ax, [di] 
 0443  EE                       		out	dx, al 
 0444  42                       		inc	dx 
 0445  8A C4                    		mov	al, ah 
 0447  EE                       		out	dx, al 
 0448  83 C2 02                 		add	dx, 2 
 044B  26: AC                   		lods	byte ptr es:[si] 
 044D  2C 04                    		sub	al, 4 
 044F  8A E0                    		mov	ah, al 
 0451  72 B5                    		jb	short BADFNM 
 0453  74 02                    		jz	short loc_5418 
 0455  FE C8                    		dec	al 
                                 
 0457                           loc_5418: 
 0457  3C 03                    		cmp	al, 3 
 0459  77 AD                    		ja	short BADFNM 
 045B  8A C8                    		mov	cl, al 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-17
                                                            

 045D  26: AC                   		lods	byte ptr es:[si] 
 045F  75 08                    		jnz	short loc_542A 
 0461  3C 02                    		cmp	al, 2 
 0463  74 04                    		jz	short loc_542A 
 0465  0A C0                    		or	al, al 
 0467  75 9F                    		jnz	short BADFNM 
                                 
 0469                           loc_542A: 
 0469  0A E0                    		or	ah, al 
 046B  74 9B                    		jz	short BADFNM 
 046D  FE C8                    		dec	al 
 046F  78 0B                    		js	short loc_543D 
 0471  B4 00                    		mov	ah, 0 
 0473  53                       		push	bx 
 0474  BB 0207 R                		mov	bx, offset masks? 
 0477  03 D8                    		add	bx, ax 
 0479  0A 0F                    		or	cl, [bx] 
 047B  5B                       		pop	bx 
                                 
 047C                           loc_543D: 
 047C  26: AC                   		lods	byte ptr es:[si] 
 047E  0A C0                    		or	al, al 
 0480  74 03                    		jz	short loc_5446 
 0482  80 C9 04                 		or	cl, 4 
                                 
 0485                           loc_5446: 
 0485  8A C1                    		mov	al, cl 
 0487  EE                       		out	dx, al 
 0488  26: AD                   		lods	word ptr es:[si] 
 048A  B1 00                    		mov	cl, 0 
 048C  89 47 02                 		mov	[bx+2],	ax 
 048F  0B C0                    		or	ax, ax 
 0491  74 03                    		jz	short loc_5457 
 0493  80 C9 80                 		or	cl, 80h 
                                 
 0496                           loc_5457: 
 0496  26: AD                   		lods	word ptr es:[si] 
 0498  89 47 04                 		mov	[bx+4],	ax 
 049B  0B C0                    		or	ax, ax 
 049D  74 03                    		jz	short loc_5463 
 049F  80 C9 10                 		or	cl, 10h 
                                 
 04A2                           loc_5463: 
 04A2  26: AD                   		lods	word ptr es:[si] 
 04A4  89 47 06                 		mov	[bx+6],	ax 
 04A7  0B C0                    		or	ax, ax 
 04A9  74 03                    		jz	short loc_546F 
 04AB  80 C9 20                 		or	cl, 20h 
                                 
 04AE                           loc_546F: 
 04AE  26: AC                   		lods	byte ptr es:[si] 
 04B0  A8 02                    		test	al, 2 
 04B2  B0 03                    		mov	al, 3 
 04B4  74 02                    		jz	short loc_5479 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-18
                                                            

 04B6  B0 01                    		mov	al, 1 
                                 
 04B8                           loc_5479: 
 04B8  42                       		inc	dx 
 04B9  EE                       		out	dx, al 
 04BA  32 C0                    		xor	al, al 
 04BC  88 4F 1A                 		mov	[bx+1Ah], cl 
 04BF  88 47 18                 		mov	[bx+18h], al 
 04C2  C7 47 08 0000            		mov	word ptr [bx+8], 0 
 04C7  C7 47 0A 0000            		mov	word ptr [bx+0Ah], 0 
 04CC  C7 47 0C 0000            		mov	word ptr [bx+0Ch], 0 
 04D1  C7 47 0E 0000            		mov	word ptr [bx+0Eh], 0 
 04D6  83 7F 10 00              		cmp	word ptr [bx+10h], 0 
 04DA  75 3F                    		jnz	short loc_54DC 
 04DC  83 EA 04                 		sub	dx, 4 
 04DF  1E                       		push	ds 
 04E0  33 C0                    		xor	ax, ax 
 04E2  8E D8                    		mov	ds, ax 
 04E4  2E: 8B 77 1E             		mov	si, cs:[bx+1Eh]	; IVT manipulation! 
 04E8  8B 04                    		mov	ax, [si] 
 04EA  2E: 89 47 10             		mov	cs:[bx+10h], ax 
 04EE  8B 44 02                 		mov	ax, [si+2] 
 04F1  2E: 89 47 12             		mov	cs:[bx+12h], ax 
 04F5  2E: 8B 47 20             		mov	ax, cs:[bx+20h] 
 04F9  89 04                    		mov	[si], ax 
 04FB  8C C8                    		mov	ax, cs 
 04FD  89 44 02                 		mov	[si+2],	ax 
 0500  1F                       		pop	ds 
                                		assume ds:nothing 
 0501  42                       		inc	dx 
 0502  42                       		inc	dx 
 0503  EC                       		in	al, dx 
 0504  4A                       		dec	dx 
 0505  4A                       		dec	dx 
 0506  EC                       		in	al, dx 
 0507  83 C2 05                 		add	dx, 5 
 050A  EC                       		in	al, dx 
 050B  83 EA 04                 		sub	dx, 4 
 050E  B0 0D                    		mov	al, 0Dh 
 0510  EE                       		out	dx, al 
 0511  E4 21                    		in	al, 21h		; Interrupt controller,	8259A. 
 0513  22 47 1B                 		and	al, [bx+1Bh]	; Unmask IRQ 
 0516  E6 21                    		out	21h, al		; Interrupt controller,	8259A. 
 0518  83 C2 03                 		add	dx, 3 
                                 
 051B                           loc_54DC: 
 051B  EC                       		in	al, dx 
 051C  0C 08                    		or	al, 8 
 051E  EE                       		out	dx, al 
 051F  42                       		inc	dx 
 0520  42                       		inc	dx 
 0521  FA                       		cli 
 0522  EC                       		in	al, dx 
 0523  F6 D0                    		not	al 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-19
                                                            

 0525  22 C1                    		and	al, cl 
 0527  88 47 19                 		mov	[bx+19h], al 
 052A  FB                       		sti 
 052B  E8 06A3 R                		call	sub_5665 
                                 
 052E                           INICMX: 
 052E  1F                       		pop	ds 
 052F  5F                       		pop	di 
 0530  5E                       		pop	si 
 0531  C3                       		ret 
                                INICOM		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Read Char from COM to	[AL] if	ready 
                                 
 0532                           RECCOM		proc near 
 0532  53                       		push	bx 
 0533  51                       		push	cx 
 0534  52                       		push	dx 
 0535  56                       		push	si 
 0536  57                       		push	di 
 0537  1E                       		push	ds 
 0538  0E                       		push	cs 
 0539  1F                       		pop	ds 
                                		assume ds:CSEG 
 053A  50                       		push	ax 
 053B  E8 06FE R                		call	CMPREP 
 053E  B1 00                    		mov	cl, 0 
 0540  E8 0681 R                		call	sub_5643 
 0543  59                       		pop	cx 
 0544  8A C1                    		mov	al, cl 
 0546  75 23                    		jnz	short loc_552C 
 0548  FA                       		cli 
 0549  8B 77 08                 		mov	si, [bx+8] 
 054C  3B 77 0A                 		cmp	si, [bx+0Ah] 
 054F  74 1A                    		jz	short loc_552C 
 0551  46                       		inc	si 
 0552  3B 36 0255 R             		cmp	si, CBFSIZ 
 0556  76 02                    		jbe	short loc_551B 
 0558  33 F6                    		xor	si, si 
                                 
 055A                           loc_551B: 
 055A  89 77 08                 		mov	[bx+8],	si 
 055D  8B 5F 14                 		mov	bx, [bx+14h] 
 0560  8B 3E 0253 R             		mov	di, CBFSEG 
 0564  8E DF                    		mov	ds, di 
                                		assume ds:nothing 
 0566  8A 00                    		mov	al, [bx+si] 
 0568  FB                       		sti 
 0569  0B D2                    		or	dx, dx 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-20
                                                            

 056B                           loc_552C: 
 056B  1F                       		pop	ds 
 056C  5F                       		pop	di 
 056D  5E                       		pop	si 
 056E  5A                       		pop	dx 
 056F  59                       		pop	cx 
 0570  5B                       		pop	bx 
 0571  C3                       		ret 
                                RECCOM		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Send [AL] to COM 
                                 
 0572                           SNDCOM		proc near 
 0572  53                       		push	bx 
 0573  51                       		push	cx 
 0574  52                       		push	dx 
 0575  56                       		push	si 
 0576  57                       		push	di 
 0577  1E                       		push	ds 
 0578  0E                       		push	cs 
 0579  1F                       		pop	ds 
                                		assume ds:CSEG 
 057A  50                       		push	ax 
 057B  E8 06FE R                		call	CMPREP 
 057E  8A 4F 1A                 		mov	cl, [bx+1Ah] 
 0581  E8 0681 R                		call	sub_5643 
 0584  59                       		pop	cx 
 0585  75 3B                    		jnz	short SNDCMX 
                                 
 0587                           SNDLOP: 
 0587  FA                       		cli 
 0588  8B 77 0E                 		mov	si, [bx+0Eh] 
 058B  46                       		inc	si 
 058C  81 FE 0080               		cmp	si, 80h	; '�' 
 0590  76 02                    		jbe	short loc_5555 
 0592  33 F6                    		xor	si, si 
                                 
 0594                           loc_5555: 
 0594  3B 77 0C                 		cmp	si, [bx+0Ch] 
 0597  74 23                    		jz	short loc_557D 
 0599  1E                       		push	ds 
 059A  53                       		push	bx 
 059B  89 77 0E                 		mov	[bx+0Eh], si 
 059E  8B 5F 16                 		mov	bx, [bx+16h] 
 05A1  8B 3E 0253 R             		mov	di, CBFSEG 
 05A5  8E DF                    		mov	ds, di 
                                		assume ds:nothing 
 05A7  88 08                    		mov	[bx+si], cl 
 05A9  5B                       		pop	bx 
 05AA  1F                       		pop	ds 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-21
                                                            

 05AB  42                       		inc	dx 
 05AC  EC                       		in	al, dx 
 05AD  A8 02                    		test	al, 2 
 05AF  75 11                    		jnz	short SNDCMX 
 05B1  F6 47 19 02              		test	byte ptr [bx+19h], 2 
 05B5  75 0B                    		jnz	short SNDCMX 
 05B7  B0 0F                    		mov	al, 0Fh 
 05B9  EE                       		out	dx, al 
 05BA  EB 06                    		jmp	short SNDCMX 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 05BC                           loc_557D: 
 05BC  FB                       		sti 
 05BD  E8 06E8 R                		call	COMDLY 
 05C0  74 C5                    		jz	short SNDLOP	; Next char unless Ctrl+Break
				 pressed 
 05C2                           SNDCMX: 
 05C2  FB                       		sti 
 05C3  1F                       		pop	ds 
 05C4  5F                       		pop	di 
 05C5  5E                       		pop	si 
 05C6  5A                       		pop	dx 
 05C7  59                       		pop	cx 
 05C8  5B                       		pop	bx 
 05C9  C3                       		ret 
                                SNDCOM		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Get COM bytes	in queue 
                                ;	 On entry: AH =	unit number 
                                ;	 On return: DX=bytes in	queue 
                                ;		    CX=free bytes in queue 
                                ;		    AH = non-zero if error 
                                 
 05CA                           STACOM		proc near 
 05CA  53                       		push	bx 
 05CB  56                       		push	si 
 05CC  57                       		push	di 
 05CD  1E                       		push	ds 
 05CE  0E                       		push	cs 
 05CF  1F                       		pop	ds 
                                		assume ds:CSEG 
 05D0  E8 06FE R                		call	CMPREP 
 05D3  32 E4                    		xor	ah, ah 
 05D5  8B 57 0A                 		mov	dx, [bx+0Ah] 
 05D8  3B 57 08                 		cmp	dx, [bx+8] 
 05DB  73 05                    		jnb	short loc_55A3 
 05DD  03 16 0255 R             		add	dx, CBFSIZ 
 05E1  42                       		inc	dx 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-22
                                                            

 05E2                           loc_55A3: 
 05E2  2B 57 08                 		sub	dx, [bx+8] 
 05E5  8B 0E 0255 R             		mov	cx, CBFSIZ 
 05E9  2B CA                    		sub	cx, dx 
 05EB  81 FA 00FF               		cmp	dx, 0FFh 
 05EF  76 03                    		jbe	short loc_55B5 
 05F1  BA 00FF                  		mov	dx, 0FFh 
                                 
 05F4                           loc_55B5: 
 05F4  1F                       		pop	ds 
                                		assume ds:nothing 
 05F5  5F                       		pop	di 
 05F6  5E                       		pop	si 
 05F7  5B                       		pop	bx 
 05F8  C3                       		ret 
                                STACOM		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 05F9                           SNDLPT		proc near 
 05F9  51                       		push	cx 
 05FA  52                       		push	dx 
 05FB  33 D2                    		xor	dx, dx 
 05FD  86 D4                    		xchg	dl, ah 
 05FF  CD 17                    		int	17h 
 0601  80 E4 01                 		and	ah, 1 
 0604  74 18                    		jz	short loc_55DF 
 0606  B4 02                    		mov	ah, 2 
 0608  CD 17                    		int	17h		; PRINTER - GET	STATUS 
                                					; DX = printer port (0-3) 
                                					; Return: AH = status 
 060A  80 FC 28                 		cmp	ah, 28h	; '(' 
 060D  75 04                    		jnz	short loc_55D4 
 060F  B4 03                    		mov	ah, 3 
 0611  EB 0B                    		jmp	short loc_55DF 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0613                           loc_55D4: 
 0613  80 FC 08                 		cmp	ah, 8 
 0616  75 04                    		jnz	short loc_55DD 
 0618  B4 04                    		mov	ah, 4 
 061A  EB 02                    		jmp	short loc_55DF 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 061C                           loc_55DD: 
 061C  B4 02                    		mov	ah, 2 
                                 
 061E                           loc_55DF: 
 061E  5A                       		pop	dx 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-23
                                                            

 061F  59                       		pop	cx 
 0620  C3                       		ret 
                                SNDLPT		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Terminate COM	channel 
                                 
 0621                           TRMCOM		proc near 
 0621  53                       		push	bx 
 0622  51                       		push	cx 
 0623  52                       		push	dx 
 0624  56                       		push	si 
 0625  57                       		push	di 
 0626  1E                       		push	ds 
 0627  0E                       		push	cs 
 0628  1F                       		pop	ds 
                                		assume ds:CSEG 
 0629  E8 06FE R                		call	CMPREP 
 062C  0B D2                    		or	dx, dx 
 062E  75 04                    		jnz	short loc_55F5 
 0630  B4 FF                    		mov	ah, 0FFh 
 0632  EB 46                    		jmp	short loc_563C 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0634                           loc_55F5: 
 0634  42                       		inc	dx 
 0635  B9 0096                  		mov	cx, 150 
 0638                           loc_55F9: 
 0638  EC                       		in	al, dx 
 0639  A8 02                    		test	al, 2 
 063B  74 07                    		jz	short loc_5606 
 063D  E8 06E8 R                		call	COMDLY 
 0640  74 F6                    		jz	short loc_55F9 
 0642  EB 07                    		jmp	short loc_560D 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0644                           loc_5606: 
 0644  E8 06E8 R                		call	COMDLY 
 0647  75 02                    		jnz	short loc_560D 
 0649  E2 F9                    		loop	loc_5606 
 064B                           loc_560D: 
 064B  B0 00                    		mov	al, 0 
 064D  EE                       		out	dx, al 
 064E  83 C2 03                 		add	dx, 3 
 0651  EE                       		out	dx, al 
 0652  E4 21                    		in	al, 21h		; Interrupt controller,	8259A. 
 0654  0A 47 1C                 		or	al, [bx+1Ch] 
 0657  E6 21                    		out	21h, al		; Interrupt controller,	8259A. 
 0659  33 C0                    		xor	ax, ax 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-24
                                                            

 065B  8E D8                    		mov	ds, ax		; IVT manipulation! 
 065D  2E: 8B 77 1E             		mov	si, cs:[bx+1Eh] 
 0661  2E: 8B 47 10             		mov	ax, cs:[bx+10h] 
 0665  89 04                    		mov	[si], ax 
 0667  2E: 8B 47 12             		mov	ax, cs:[bx+12h] 
 066B  89 44 02                 		mov	[si+2],	ax 
 066E  33 C0                    		xor	ax, ax 
 0670  2E: 89 47 10             		mov	cs:[bx+10h], ax 
 0674  2E: 89 47 12             		mov	cs:[bx+12h], ax 
 0678  B4 00                    		mov	ah, 0 
 067A                           loc_563C: 
 067A  1F                       		pop	ds 
                                		assume ds:nothing 
 067B  5F                       		pop	di 
 067C  5E                       		pop	si 
 067D  5A                       		pop	dx 
 067E  59                       		pop	cx 
 067F  5B                       		pop	bx 
 0680  C3                       		ret 
                                TRMCOM		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0681                           sub_5643	proc near 
 0681  FA                       		cli 
 0682  8A 47 18                 		mov	al, [bx+18h] 
 0685  C6 47 18 00              		mov	byte ptr [bx+18h], 0 
 0689  FB                       		sti 
 068A  0A C0                    		or	al, al 
 068C  75 04                    		jnz	short loc_5654 
 068E  E8 06A3 R                		call	sub_5665 
 0691  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0692                           loc_5654: 
 0692  B4 01                    		mov	ah, 1 
 0694  A8 01                    		test	al, 1 
 0696  75 08                    		jnz	short loc_5662 
 0698  B4 06                    		mov	ah, 6 
 069A  A8 02                    		test	al, 2 
 069C  75 02                    		jnz	short loc_5662 
 069E  B4 07                    		mov	ah, 7 
 06A0                           loc_5662: 
 06A0  0A E4                    		or	ah, ah 
 06A2  C3                       		ret 
                                sub_5643	endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-25
                                                            

                                 
                                 
 06A3                           sub_5665	proc near 
 06A3  FE C1                    		inc	cl 
 06A5  55                       		push	bp 
 06A6  8B 77 04                 		mov	si, [bx+4] 
 06A9  8B EE                    		mov	bp, si 
 06AB  8B 7F 02                 		mov	di, [bx+2] 
 06AE  8B 77 06                 		mov	si, [bx+6] 
 06B1                           loc_5673: 
 06B1  8A 47 19                 		mov	al, [bx+19h] 
 06B4  32 E4                    		xor	ah, ah 
 06B6  22 C1                    		and	al, cl 
 06B8  74 2A                    		jz	short loc_56A6 
 06BA  A8 01                    		test	al, 1 
 06BC  74 04                    		jz	short loc_5684 
 06BE  B4 FF                    		mov	ah, 0FFh 
 06C0  EB 22                    		jmp	short loc_56A6 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 06C2                           loc_5684: 
 06C2  A8 80                    		test	al, 80h 
 06C4  74 05                    		jz	short loc_568D 
 06C6  4F                       		dec	di 
 06C7  B4 05                    		mov	ah, 5 
 06C9  74 19                    		jz	short loc_56A6 
 06CB                           loc_568D: 
 06CB  A8 20                    		test	al, 20h 
 06CD  74 05                    		jz	short loc_5696 
 06CF  4E                       		dec	si 
 06D0  B4 04                    		mov	ah, 4 
 06D2  74 10                    		jz	short loc_56A6 
 06D4                           loc_5696: 
 06D4  A8 10                    		test	al, 10h 
 06D6  74 05                    		jz	short loc_569F 
 06D8  4D                       		dec	bp 
 06D9  B4 03                    		mov	ah, 3 
 06DB  74 07                    		jz	short loc_56A6 
 06DD                           loc_569F: 
 06DD  E8 06E8 R                		call	COMDLY 
 06E0  74 CF                    		jz	short loc_5673 
 06E2  B4 FF                    		mov	ah, 0FFh 
 06E4                           loc_56A6: 
 06E4  5D                       		pop	bp 
 06E5  0A E4                    		or	ah, ah 
 06E7  C3                       		ret 
                                sub_5665	endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-26
                                                            

 06E8                           COMDLY		proc near 
 06E8  50                       		push	ax 
 06E9  53                       		push	bx 
 06EA  51                       		push	cx 
 06EB  B9 00F2                  		mov	cx, 242 
 06EE                           DELAY: 
 06EE  E2 FE                    		loop	DELAY 
 06F0  59                       		pop	cx 
 06F1  33 C0                    		xor	ax, ax 
 06F3  1E                       		push	ds 
 06F4  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 06F6  3A 06 0471               		cmp	al, ds:471h	; Check	Ctrl+Break flag 
 06FA  1F                       		pop	ds 
                                		assume ds:nothing 
 06FB  5B                       		pop	bx 
 06FC  58                       		pop	ax 
 06FD  C3                       		ret 
                                COMDLY		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 06FE                           CMPREP		proc near 
 06FE  8A C4                    		mov	al, ah 
 0700  D0 E0                    		shl	al, 1 
 0702  B4 00                    		mov	ah, 0 
 0704  56                       		push	si 
 0705  BE 020B R                		mov	si, offset COMTBL 
 0708  03 F0                    		add	si, ax 
 070A  8B 1C                    		mov	bx, [si] 
 070C  8B 17                    		mov	dx, [bx] 
 070E  33 C0                    		xor	ax, ax 
 0710  1E                       		push	ds 
 0711  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 0713  A2 0471                  		mov	ds:471h, al	; Zero out Ctrl+Break flag 
 0716  1F                       		pop	ds 
                                		assume ds:nothing 
 0717  5E                       		pop	si 
 0718  C3                       		ret 
                                CMPREP		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
                                ; Start of another module? 
                                ;		align 8 
                                PUBLIC  SCNRST, GWINI, GWTERM, KEYINP, INKMAP, 
				INFMAP, EDTMAP, MAPSUP 
                                PUBLIC  SCROUT, SCRINP, SCROLL, CLRSCN, CLREOL 
                                PUBLIC  CSRDSP, CSRATR, LCPY, SCRATR, SCRSTT, S
				ETCLR, SWIDTH 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-27
                                                            

                                 
 0719  00                       EVTSET		db 0 
 071A  00                       LSTRIG		db 0 
 071B  FF                       BRKFLG		db -1 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 071C                           TIMISR		proc far 
 071C  2E: F6 06 0719 R 01      		test	cs:EVTSET, 1	; Light	pen enabled? 
 0722  74 03                    		jz	short loc_56EE 
 0724  E8 1333 R                		call	LPENQR 
                                 
 0727                           loc_56EE: 
 0727  50                       		push	ax 
 0728  52                       		push	dx 
 0729  BA 0201                  		mov	dx, 201h 
 072C  EC                       		in	al, dx		; Game I/O port 
                                					; bits 0-3: Coordinates	(resistive, time-d
				ependent inputs) 
                                					; bits 4-7: Buttons/Triggers (digital inpu
				ts) 
 072D  F6 D0                    		not	al 
 072F  2E: 08 06 071A R         		or	cs:LSTRIG, al 
 0734  24 F0                    		and	al, 0F0h 
 0736  2E: 08 06 131E R         		or	cs:ISREVT, al 
 073B  5A                       		pop	dx 
 073C  58                       		pop	ax 
 073D  CF                       		iret 
                                TIMISR		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 073E                           CTLBRK		proc far 
 073E  2E: C6 06 071B R 00      		mov	cs:BRKFLG, 0	; 0 = Ctrl+Break, -1 = no br
				eak 
 0744  CF                       		iret 
                                CTLBRK		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Reset	screen related state 
                                 
 0745                           SCNRST		proc near 
 0745  B4 00                    		mov	ah, 0 
 0747  A0 000B R                		mov	al, ds:var_63b 
 074A  B1 19                    		mov	cl, 25 
 074C  E8 0000 E                		call	SCNSWI 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-28
                                                            

 074F  E8 0000 E                		call	SCNCLR 
 0752  E8 0000 E                		call	GRPINI 
 0755  C3                       		ret 
                                SCNRST		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
 0756  00                       EQUIP		db 0 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0757                           GWINI		proc near 
 0757  E8 0B49 R                		call	SCRSAV 
 075A  1E                       		push	ds 
 075B  33 C0                    		xor	ax, ax 
 075D  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 075F  A0 0410                  		mov	al, ds:410h	; Read equipment word (low by
				te) 
 0762  2E: A2 0756 R            		mov	cs:EQUIP, al 
 0766  1F                       		pop	ds 
                                		assume ds:nothing 
 0767  A0 000F R                		mov	al, ds:CVMODE 
 076A  A2 0000 R                		mov	ds:OVMODE, al 
 076D  A0 000E R                		mov	al, ds:var_63e 
 0770  A2 000B R                		mov	ds:var_63b, al 
 0773  80 3E 000F R 07          		cmp	byte ptr ds:CVMODE, 7 
 0778  75 06                    		jnz	short VIDPGE 
 077A  C7 06 0013 R 0C0D        		mov	word ptr ds:var_643, 0C0Dh 
 0780                           VIDPGE: 
 0780  B8 0500                  		mov	ax, 500h 
 0783  CD 10                    		int	10h		; - VIDEO - SELECT DISPLAY PAGE 
                                					; AL = display page, 0-7  for modes 0 &	1,
				 0-3	for modes 2 & 3 
 0785  33 D2                    		xor	dx, dx 
 0787                           INILPT: 
 0787  B4 01                    		mov	ah, 1 
 0789  52                       		push	dx 
 078A  CD 17                    		int	17h		; PRINTER - INITIALIZE 
                                					; DX = printer port (0-3) 
                                					; Return: AH = status 
 078C  5A                       		pop	dx 
 078D  42                       		inc	dx 
 078E  83 FA 03                 		cmp	dx, 3 
 0791  75 F4                    		jnz	short INILPT 
 0793  8C C8                    		mov	ax, cs		; Set segments for interrupt vect
				ors 
 0795  A3 0003 R                		mov	ds:CBRKSG, ax 
 0798  A3 0007 R                		mov	ds:TIMRSG, ax 
 079B  E8 07BF R                		call	SWPVEC		; Install INT 1Bh/1Ch vectors 
 079E  1E                       		push	ds 
 079F  33 C0                    		xor	ax, ax 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-29
                                                            

 07A1  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 07A3  58                       		pop	ax 
 07A4  50                       		push	ax 
 07A5  A3 0510                  		mov	ds:510h, ax     ; Set initial BASIC data 
				segment 
 07A8  A0 0300                  		mov	al, ds:300h 
 07AB  1F                       		pop	ds 
                                		assume ds:nothing 
 07AC  3C 00                    		cmp	al, 0 
 07AE  74 0C                    		jz	short GWINIX 
 07B0  BB 0000 E                		mov	bx, offset SPCTAB 
 07B3  83 C3 39                 		add	bx, 39h		; Offset of PLAYS entry	in STMDS
				X 
 07B6  B8 0000 E                		mov	ax, offset SNERR ; Disable PLAY	statement
				? 
 07B9  2E: 89 07                		mov	cs:[bx], ax 
 07BC                           GWINIX: 
 07BC  E9 0B8A R                		jmp	DOCLRS 
                                GWINI		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 07BF                           SWPVEC		proc near 
 07BF  B9 0004                  		mov	cx, 4		; 4 words (two vectors) 
 07C2  1E                       		push	ds 
 07C3  33 C0                    		xor	ax, ax 
 07C5  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 07C7  BE 006C                  		mov	si, 6Ch		; Offset of vector 1Bh (Ctrl+Bre
				ak) 
 07CA  BF 0001 R                		mov	di, OFFSET CBKINT 
 07CD  FA                       		cli 
 07CE  FC                       		cld 
 07CF                           DOVEC: 
 07CF  26: 8B 05                		mov	ax, es:[di]	; Read in new offset 
 07D2  87 04                    		xchg	ax, [si]	; Swap in new offset 
 07D4  AB                       		stosw			; Save old offset 
 07D5  46                       		inc	si		; Skip over segment 
 07D6  46                       		inc	si 
 07D7  E2 F6                    		loop	DOVEC 
 07D9  FB                       		sti 
 07DA  1F                       		pop	ds 
                                		assume ds:nothing 
 07DB  C3                       		ret 
                                SWPVEC		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-30
                                                            

                                 
 07DC                           GWTERM		proc near 
 07DC  E8 0B49 R                		call	SCRSAV 
 07DF  1E                       		push	ds 
 07E0  33 C0                    		xor	ax, ax 
 07E2  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 07E4  2E: A0 0756 R            		mov	al, cs:EQUIP	; Restore equipment word 
 07E8  A2 0410                  		mov	ds:410h, al 
 07EB  1F                       		pop	ds 
                                		assume ds:nothing 
 07EC  B0 FF                    		mov	al, -1 
 07EE  E8 15D8 R                		call	DONOTE 
 07F1  B9 0607                  		mov	cx, 607h	; 8x8 cursor 
 07F4  80 3E 000F R 07          		cmp	byte ptr ds:CVMODE, 7 
 07F9  75 03                    		jnz	short SETCSR 
 07FB  B9 0C0D                  		mov	cx, 0C0Dh	; 8x14 cursor 
 07FE                           SETCSR: 
 07FE  B4 01                    		mov	ah, 1 
 0800  CD 10                    		int	10h		; - VIDEO - SET	CURSOR CHARACTERISTI
				CS 
                                					; CH bits 0-4 =	start line for cursor in c
				haracter cell 
                                					; bits 5-6 = blink attribute 
                                					; CL bits 0-4 =	end line for cursor in cha
				racter cell 
 0802  80 3E 000F R 07          		cmp	byte ptr ds:CVMODE, 7 
 0807  74 19                    		jz	short loc_57E9 
 0809  33 C0                    		xor	ax, ax 
 080B  A0 0000 R                		mov	al, ds:OVMODE 
 080E  3A 26 000D R             		cmp	ah, ds:VISVPG 
 0812  75 0C                    		jnz	short SETVMD 
 0814  3A 26 0009 R             		cmp	ah, ds:CVPAGE 
 0818  75 06                    		jnz	short SETVMD 
 081A  3A 06 000F R             		cmp	al, ds:CVMODE 
 081E  74 02                    		jz	short loc_57E9 
 0820                           SETVMD: 
 0820  CD 10                    		int	10h		; - VIDEO - SET	VIDEO MODE 
                                					; AL = mode 
 0822                           loc_57E9: 
 0822  C6 06 0016 R 07          		mov	byte ptr ds:var_646, 7 
 0827  C6 06 000A R 00          		mov	byte ptr ds:var_63a, 0 
 082C  BA 1700                  		mov	dx, 1700h 
 082F  89 16 001E R             		mov	ds:var_64e, dx 
 0833  B7 00                    		mov	bh, 0 
 0835  B4 02                    		mov	ah, 2 
 0837  CD 10                    		int	10h		; - VIDEO - SET	CURSOR POSITION 
                                					; DH,DL	= row, column (0,0 = upper left) 
                                					; BH = page number 
 0839  E8 07BF R                		call	SWPVEC 
 083C  E9 0A70 R                		jmp	SCRRST 
                                GWTERM		endp 
                                 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-31
                                                            

                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Keyboard input routine 
                                ; On exit: 
                                ;   ZF set if key available 
                                ;   ZF clear if	no keyboard input 
                                ;   CF set if two bytes	available (AX) 
                                ;   CF clear if	one byte available (AL) 
                                 
 083F                           KEYINP		proc near 
 083F  06                       		push	es 
 0840  0E                       		push	cs 
 0841  07                       		pop	es 
                                		assume es:CSEG 
 0842  53                       		push	bx 
 0843  51                       		push	cx 
 0844  57                       		push	di 
 0845  FC                       		cld 
 0846  2E: 80 3E 071B R 00      		cmp	cs:BRKFLG, 0	; Zero if Ctrl+Break was sig
				naled 
 084C  75 14                    		jnz	short NOBRK 
 084E  2E: FE 0E 071B R         		dec	cs:BRKFLG	; Clear	Ctrl+Break flag 
 0853  B4 01                    		mov	ah, 1 
 0855  CD 16                    		int	16h		; KEYBOARD - CHECK BUFFER, DO NOT CL
				EAR 
                                					; Return: ZF clear if character	in buffer 
                                					; AH = scan code, AL = character 
                                					; ZF set if no character in buffer 
 0857  74 04                    		jz	short CBREAK 
 0859  32 E4                    		xor	ah, ah 
 085B  CD 16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, 
				WAIT IF EMPTY 
                                					; Return: AH = scan code, AL = character 
 085D                           CBREAK: 
 085D  B8 FF03                  		mov	ax, 0FF03h	; CTLBRK aka Ctrl+Break 
 0860  EB 4A                    		jmp	short TWOKEY 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0862                           NOBRK: 
 0862  B4 01                    		mov	ah, 1 
 0864  CD 16                    		int	16h		; KEYBOARD - CHECK BUFFER, DO NOT CL
				EAR 
                                					; Return: ZF clear if character	in buffer 
                                					; AH = scan code, AL = character 
                                					; ZF set if no character in buffer 
 0866  74 21                    		jz	short KEYINX 
 0868  32 E4                    		xor	ah, ah 
 086A  CD 16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, 
				WAIT IF EMPTY 
                                					; Return: AH = scan code, AL = character 
 086C  0A C0                    		or	al, al 
 086E  74 1E                    		jz	short NONASC 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-32
                                                            

 0870  B4 00                    		mov	ah, 0 
 0872  3C FE                    		cmp	al, 0FEh ; '�' 
 0874  72 08                    		jb	short CHKESC 
 0876  B4 FF                    		mov	ah, 0FFh 
 0878  75 32                    		jnz	short TWOKEY 
 087A  B0 18                    		mov	al, 18h 
 087C  EB 2E                    		jmp	short TWOKEY 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 087E                           CHKESC: 
 087E  3C 1B                    		cmp	al, 1Bh		; ESC key? 
 0880  75 05                    		jnz	short ONEKEY 
 0882  B8 FF15                  		mov	ax, 0FF15h 
 0885  EB 25                    		jmp	short TWOKEY 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0887                           ONEKEY: 
 0887  0B E4                    		or	sp, sp 
 0889                           KEYINX: 
 0889  5F                       		pop	di 
 088A  59                       		pop	cx 
 088B  5B                       		pop	bx 
 088C  07                       		pop	es 
                                		assume es:nothing 
 088D  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 088E                           NONASC: 
 088E  86 C4                    		xchg	al, ah 
 0890  BF 08CA R                		mov	di, offset SCNXLT 
 0893  B9 0039                  		mov	cx, 57 
 0896  FC                       		cld 
 0897  F2/ AE                   		repne scasb 
 0899  75 16                    		jnz	short NOTTAB 
 089B  81 EF 08CA R             		sub	di, offset SCNXLT 
 089F  8B C7                    		mov	ax, di 
 08A1  3D 0020                  		cmp	ax, 20h 
 08A4  B4 FF                    		mov	ah, 0FFh 
 08A6  72 04                    		jb	short TWOKEY 
 08A8  04 21                    		add	al, 21h	; '!' 
 08AA                           loc_5871: 
 08AA  B4 80                    		mov	ah, 80h 
 08AC                           TWOKEY: 
 08AC  0B E4                    		or	sp, sp 
 08AE  F9                       		stc 
 08AF  EB D8                    		jmp	short KEYINX 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 08B1                           NOTTAB: 
 08B1  3C 3B                    		cmp	al, 3Bh	; ';' 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-33
                                                            

 08B3  72 08                    		jb	short loc_5884 
 08B5  3C 45                    		cmp	al, 45h	; 'E' 
 08B7  73 04                    		jnb	short loc_5884 
 08B9  2C 1B                    		sub	al, 1Bh 
 08BB  EB ED                    		jmp	short loc_5871 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 08BD                           loc_5884: 
 08BD  3C 53                    		cmp	al, 53h	; 'S' 
 08BF  8B D0                    		mov	dx, ax 
 08C1  B0 FE                    		mov	al, 0FEh 
 08C3  75 C2                    		jnz	short ONEKEY 
 08C5  B8 FF7F                  		mov	ax, 0FF7Fh 
 08C8  EB E2                    		jmp	short TWOKEY 
                                KEYINP		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
 08CA  FA 73                    SCNXLT		db 0FAh, 73h, 2	dup(0FAh), 75h,	74h, 4 
				dup(0F9h), 47h 
       0002[                    SCNXLT		db 0FAh, 73h, 2	dup(0FAh), 75h,	74h, 4 
				dup(0F9h), 47h 
            FA                  
                         ]      
       0004[   75 74            
            F9                  
                         ]      
               47               
 08D5  77 F9 4F F9              		db 77h,	0F9h, 4Fh, 0F9h, 2 dup(0FAh), 52h, 2 
				dup(0FAh) 
       0002[                    		db 77h,	0F9h, 4Fh, 0F9h, 2 dup(0FAh), 52h, 2 
				dup(0FAh) 
            FA                  
                         ]      
       0002[   52               
            FA                  
                         ]      
                                
 08DE  F9                       		db 0F9h, 2 dup(0FAh), 0FEh, 3 dup(0FAh), 4Dh,
				 4Bh, 48h 
       0002[                    		db 0F9h, 2 dup(0FAh), 0FEh, 3 dup(0FAh), 4Dh,
				 4Bh, 48h 
            FA                  
                         ]      
       0003[   FE               
            FA                  
                         ]      
               4D 4B 48         
 08E8  50 1E 30 2E 20 12 21     		db 50h,	1Eh, 30h, 2Eh, 20h, 12h, 21h, 22h, 23
				h,	17h, 24h 
       22 23 17 24              
 08F3  25 26 32 31 18 19 10     		db 25h,	26h, 32h, 31h, 18h, 19h, 10h, 13h, 1F
				h,	14h, 16h 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-34
                                                            

       13 1F 14 16              
 08FE  2F 11 2D 15 2C           		db 2Fh,	11h, 2Dh, 15h, 2Ch 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; OEM map routine for INKEY$ 
                                 
 0903                           INKMAP		proc near 
 0903  53                       		push	bx 
 0904  72 11                    		jb	short loc_58DE 
 0906  3C FE                    		cmp	al, 0FEh ; '�' 
 0908  75 09                    		jnz	short loc_58DA 
 090A  8B C2                    		mov	ax, dx 
 090C                           loc_58D3: 
 090C  B4 00                    		mov	ah, 0 
 090E  0B E4                    		or	sp, sp 
 0910  F9                       		stc 
 0911  5B                       		pop	bx 
 0912  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0913                           loc_58DA: 
 0913  0B E4                    		or	sp, sp 
 0915                           loc_58DC: 
 0915  5B                       		pop	bx 
 0916  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0917                           loc_58DE: 
 0917  3C FF                    		cmp	al, 0FFh 
 0919  74 F8                    		jz	short loc_58DA 
 091B  3C 15                    		cmp	al, 15h 
 091D  75 04                    		jnz	short loc_58EA 
 091F  B0 1B                    		mov	al, 1Bh 
 0921  EB F0                    		jmp	short loc_58DA 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0923                           loc_58EA: 
 0923  3C 7F                    		cmp	al, 7Fh	; '' 
 0925  75 04                    		jnz	short loc_58F2 
 0927  B0 53                    		mov	al, 53h	; 'S' 
 0929  EB E1                    		jmp	short loc_58D3 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 092B                           loc_58F2: 
 092B  3C 20                    		cmp	al, 20h	; ' ' 
 092D  73 14                    		jnb	short loc_590A 
 092F  BB 08C9 R                		mov	bx, offset SCNXLT-1 
 0932  B4 00                    		mov	ah, 0 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-35
                                                            

 0934  03 D8                    		add	bx, ax 
 0936  2E: 8A 07                		mov	al, cs:[bx] 
 0939  3C FA                    		cmp	al, 0FAh ; '�' 
 093B  74 D8                    		jz	short loc_58DC 
 093D  3C FE                    		cmp	al, 0FEh ; '�' 
 093F  72 CB                    		jb	short loc_58D3 
 0941  EB D0                    		jmp	short loc_58DA 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0943                           loc_590A: 
 0943  3C 2A                    		cmp	al, 2Ah	; '*' 
 0945  73 04                    		jnb	short loc_5912 
 0947  04 1B                    		add	al, 1Bh 
 0949  EB C1                    		jmp	short loc_58D3 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 094B                           loc_5912: 
 094B  3C 41                    		cmp	al, 'A' 
 094D  72 12                    		jb	short loc_5928 
 094F  3C 5B                    		cmp	al, 5Bh	; '[' 
 0951  73 0E                    		jnb	short loc_5928 
 0953  2C 41                    		sub	al, 'A' 
 0955  B4 00                    		mov	ah, 0 
 0957  BB 08E9 R                		mov	bx, (offset SCNXLT+1Fh) 
 095A  03 D8                    		add	bx, ax 
 095C  2E: 8A 07                		mov	al, cs:[bx] 
 095F  EB AB                    		jmp	short loc_58D3 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0961                           loc_5928: 
 0961  3A C0                    		cmp	al, al 
 0963  EB B0                    		jmp	short loc_58DC 
                                INKMAP		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; OEM fixed length input map routine 
                                 
 0965                           INFMAP		proc near 
 0965  E8 0903 R                		call	INKMAP 
 0968  73 02                    		jnb	short INMAPX 
 096A  B0 00                    		mov	al, 0 
 096C                           INMAPX: 
 096C  F8                       		clc 
 096D  C3                       		ret 
                                INFMAP		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-36
                                                            

				============================== 
                                 
                                ; Map edit function/output character code 
                                 
 096E                           EDTMAP		proc near 
 096E  C6 06 0011 R 00          		mov	byte ptr ds:var_641, 0 
 0973  3D 0003                  		cmp	ax, 3 
 0976  74 44                    		jz	short loc_5983 
 0978  80 FC FF                 		cmp	ah, 0FFh 
 097B  75 19                    		jnz	short loc_595D 
 097D  3C 18                    		cmp	al, 18h 
 097F  75 05                    		jnz	short loc_594D 
 0981  B8 00FE                  		mov	ax, 0FEh 
 0984  EB 3C                    		jmp	short loc_5989 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0986                           loc_594D: 
 0986  3C FF                    		cmp	al, 0FFh 
 0988  75 32                    		jnz	short loc_5983 
 098A  80 3E 000A R 00          		cmp	byte ptr ds:var_63a, 0 
 098F  74 2B                    		jz	short loc_5983 
 0991  B8 0020                  		mov	ax, ' ' 
 0994  EB 2C                    		jmp	short loc_5989 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0996                           loc_595D: 
 0996  3C 1B                    		cmp	al, 1Bh 
 0998  75 04                    		jnz	short loc_5965 
 099A  B0 15                    		mov	al, 15h 
 099C  EB 1E                    		jmp	short loc_5983 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 099E                           loc_5965: 
 099E  3C FF                    		cmp	al, 0FFh 
 09A0  74 1A                    		jz	short loc_5983 
 09A2  3C 7F                    		cmp	al, 7Fh 
 09A4  74 16                    		jz	short loc_5983 
 09A6  3C 20                    		cmp	al, ' ' 
 09A8  73 18                    		jnb	short loc_5989 
 09AA  50                       		push	ax 
 09AB  53                       		push	bx 
 09AC  B4 00                    		mov	ah, 0 
 09AE  BB 08C9 R                		mov	bx, offset SCNXLT-1 
 09B1  03 D8                    		add	bx, ax 
 09B3  2E: 8A 07                		mov	al, cs:[bx] 
 09B6  3C FA                    		cmp	al, 0FAh 
 09B8  5B                       		pop	bx 
 09B9  58                       		pop	ax 
 09BA  74 08                    		jz	short loc_598B 
 09BC                           loc_5983: 
 09BC  B4 FF                    		mov	ah, 0FFh 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-37
                                                            

 09BE  0B E4                    		or	sp, sp 
 09C0  F9                       		stc 
 09C1  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 09C2                           loc_5989: 
 09C2  0B E4                    		or	sp, sp 
 09C4                           loc_598B: 
 09C4  F8                       		clc 
 09C5  C3                       		ret 
                                EDTMAP		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
 09C6  C3                       		ret 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Map super shift key to letter	in [AL]	and cou
				nt in [CH] 
                                 
 09C7                           MAPSUP		proc near 
 09C7  B5 01                    		mov	ch, 1 
 09C9  C3                       		ret 
                                MAPSUP		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Write	the character in [AL] at (DH,DL) 
                                 
 09CA                           SCROUT		proc near 
 09CA  50                       		push	ax 
 09CB  53                       		push	bx 
 09CC  51                       		push	cx 
 09CD  52                       		push	dx 
 09CE  81 EA 0101               		sub	dx, 101h 
 09D2  86 D6                    		xchg	dl, dh 
 09D4  50                       		push	ax 
 09D5  89 16 001E R             		mov	ds:var_64e, dx 
 09D9  8A 3E 0009 R             		mov	bh, ds:CVPAGE 
 09DD  B4 02                    		mov	ah, 2 
 09DF  CD 10                    		int	10h		; - VIDEO - SET	CURSOR POSITION 
                                					; DH,DL	= row, column (0,0 = upper left) 
                                					; BH = page number 
 09E1  58                       		pop	ax 
 09E2  B9 0001                  		mov	cx, 1 
 09E5  8A 1E 0016 R             		mov	bl, ds:var_646 
 09E9  B4 09                    		mov	ah, 9 
 09EB  CD 10                    		int	10h		; - VIDEO - WRITE ATTRIBUTES/CHARACT
				ERS	AT CURSOR POSITION 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-38
                                                            

                                					; AL = character, BH = display page 
                                					; BL = attributes of character (alpha mode
				s) or	color (graphics	modes) 
                                					; CX = number of times to write	character 
 09ED  F8                       		clc 
 09EE  5A                       		pop	dx 
 09EF  59                       		pop	cx 
 09F0  5B                       		pop	bx 
 09F1  58                       		pop	ax 
 09F2  C3                       		ret 
                                SCROUT		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 09F3                           SCRSV2		proc near 
 09F3  8F 06 0020 R             		pop	word ptr ds:var_650 
 09F7  52                       		push	dx 
 09F8  51                       		push	cx 
 09F9  53                       		push	bx 
 09FA  50                       		push	ax 
 09FB  9C                       		pushf 
 09FC  80 3E 000A R 00          		cmp	byte ptr ds:var_63a, 0 
 0A01  74 11                    		jz	short loc_59DB 
 0A03  80 3E 0010 R 01          		cmp	byte ptr ds:var_640, 1 
 0A08  74 07                    		jz	short loc_59D8 
 0A0A  80 3E 0010 R 02          		cmp	byte ptr ds:var_640, 2 
 0A0F  75 03                    		jnz	short loc_59DB 
 0A11                           loc_59D8: 
 0A11  E8 0C30 R                		call	sub_5BF8 
 0A14                           loc_59DB: 
 0A14  50                       		push	ax 
 0A15  81 EA 0101               		sub	dx, 101h 
 0A19  86 D6                    		xchg	dl, dh 
 0A1B  89 16 001E R             		mov	ds:var_64e, dx 
 0A1F  8A 3E 0009 R             		mov	bh, ds:CVPAGE 
 0A23  B4 02                    		mov	ah, 2 
 0A25  CD 10                    		int	10h		; - VIDEO - SET	CURSOR POSITION 
                                					; DH,DL	= row, column (0,0 = upper left) 
                                					; BH = page number 
 0A27  58                       		pop	ax 
 0A28  9D                       		popf 
 0A29  FF 36 0020 R             		push	word ptr ds:var_650 
 0A2D  C3                       		ret 
                                SCRSV2		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0A2E                           SCRINP		proc near 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-39
                                                            

                                					; SCNMRK:loc_987Dp ... 
 0A2E  E8 09F3 R                		call	SCRSV2 
 0A31  9C                       		pushf 
 0A32  B4 08                    		mov	ah, 8 
 0A34  CD 10                    		int	10h		; - VIDEO - READ ATTRIBUTES/CHARACTE
				R AT CURSOR	POSITION 
                                					; BH = display page 
                                					; Return: AL = character 
                                					; AH = attribute of character (alpha modes
				) 
 0A36  9D                       		popf 
 0A37  72 06                    		jb	short loc_5A06 
 0A39  0A C0                    		or	al, al 
 0A3B  75 02                    		jnz	short loc_5A06 
 0A3D  B0 20                    		mov	al, ' ' 
 0A3F                           loc_5A06: 
 0A3F  32 E4                    		xor	ah, ah 
 0A41  5A                       		pop	dx 
 0A42  50                       		push	ax 
 0A43  EB 2B                    		jmp	short SCRRST 
                                SCRINP		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0A45                           SCROLL		proc near 
 0A45  E8 0B49 R                		call	SCRSAV 
 0A48  86 C4                    		xchg	al, ah 
 0A4A  86 DF                    		xchg	bl, bh 
 0A4C  86 CD                    		xchg	cl, ch 
 0A4E  BA 0101                  		mov	dx, 101h 
 0A51  2B C2                    		sub	ax, dx 
 0A53  2B DA                    		sub	bx, dx 
 0A55  2B CA                    		sub	cx, dx 
 0A57  3A E7                    		cmp	ah, bh 
 0A59  75 34                    		jnz	short loc_5A57 
 0A5B  3A D8                    		cmp	bl, al 
 0A5D  C6 06 000C R 01          		mov	byte ptr ds:var_63c, 1 
 0A62  72 09                    		jb	short loc_5A35 
 0A64  C6 06 000C R FF          		mov	byte ptr ds:var_63c, 0FFh 
 0A69  02 C1                    		add	al, cl 
 0A6B  02 D9                    		add	bl, cl 
 0A6D                           loc_5A35: 
 0A6D  E8 0AFD R                		call	DOSCRL 
 0A70                           SCRRST: 
 0A70  9C                       		pushf 
 0A71  80 3E 000A R 00          		cmp	byte ptr ds:var_63a, 0 
 0A76  74 11                    		jz	short loc_5A51 
 0A78  80 3E 0010 R 01          		cmp	byte ptr ds:var_640, 1 
 0A7D  74 07                    		jz	short loc_5A4E 
 0A7F  80 3E 0010 R 02          		cmp	byte ptr ds:var_640, 2 
 0A84  75 03                    		jnz	short loc_5A51 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-40
                                                            

 0A86                           loc_5A4E: 
 0A86  E8 0C30 R                		call	sub_5BF8 
 0A89                           loc_5A51: 
 0A89  9D                       		popf 
 0A8A  58                       		pop	ax		; Restores registers that SCRSAV save
				d 
 0A8B  5B                       		pop	bx 
 0A8C  59                       		pop	cx 
 0A8D  5A                       		pop	dx 
 0A8E  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0A8F                           loc_5A57: 
 0A8F  3A C3                    		cmp	al, bl 
 0A91  75 2E                    		jnz	short loc_5A89 
 0A93  E8 0AE6 R                		call	SETVPG 
 0A96  3A FC                    		cmp	bh, ah 
 0A98  73 08                    		jnb	short loc_5A6A 
 0A9A  03 C1                    		add	ax, cx 
 0A9C  8B CB                    		mov	cx, bx 
 0A9E  B3 06                    		mov	bl, 6 
 0AA0  EB 05                    		jmp	short loc_5A6F 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0AA2                           loc_5A6A: 
 0AA2  91                       		xchg	ax, cx 
 0AA3  03 C3                    		add	ax, bx 
 0AA5  B3 07                    		mov	bl, 7 
 0AA7                           loc_5A6F: 
 0AA7  8B D0                    		mov	dx, ax 
 0AA9  8A E3                    		mov	ah, bl 
 0AAB  B0 01                    		mov	al, 1 
 0AAD  8A 3E 0016 R             		mov	bh, ds:var_646 
 0AB1  80 3E 000A R 00          		cmp	byte ptr ds:var_63a, 0 
 0AB6  74 02                    		jz	short loc_5A82 
 0AB8  B7 00                    		mov	bh, 0 
 0ABA                           loc_5A82: 
 0ABA  CD 10                    		int	10h		; - VIDEO - SCROLL PAGE	DOWN 
                                					; AL = number of lines to scroll window	(0
				 = blank whole window) 
                                					; BH = attributes to be	used on	blanked	li
				nes 
                                					; CH,CL	= row,column of	upper left corner 
				of window to scroll 
                                					; DH,DL	= row,column of	lower right corner
				 of window 
 0ABC  E8 0AE6 R                		call	SETVPG 
 0ABF  EB AF                    		jmp	short SCRRST 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0AC1                           loc_5A89: 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-41
                                                            

 0AC1  C6 06 000A R 01          		mov	byte ptr ds:var_63a, 1 
 0AC6  3A D8                    		cmp	bl, al 
 0AC8  72 0B                    		jb	short loc_5A9D 
 0ACA  03 C1                    		add	ax, cx 
 0ACC  03 D9                    		add	bx, cx 
 0ACE  C6 06 000C R FF          		mov	byte ptr ds:var_63c, 0FFh 
 0AD3  FE C5                    		inc	ch 
 0AD5                           loc_5A9D: 
 0AD5  E8 0AFD R                		call	DOSCRL 
 0AD8  FE CD                    		dec	ch 
 0ADA  74 94                    		jz	short SCRRST 
 0ADC  02 26 000C R             		add	ah, ds:var_63c 
 0AE0  02 3E 000C R             		add	bh, ds:var_63c 
 0AE4  EB EF                    		jmp	short loc_5A9D 
                                SCROLL		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Set display page 
                                 
 0AE6                           SETVPG		proc near 
 0AE6  50                       		push	ax 
 0AE7  A0 000D R                		mov	al, ds:VISVPG 
 0AEA  3A 06 0009 R             		cmp	al, ds:CVPAGE   ; Selected page equals vi
				sible? 
 0AEE  74 0B                    		jz	short SETVPX    ; If so, we're done 
 0AF0  86 06 0009 R             		xchg	al, ds:CVPAGE 
 0AF4  A2 000D R                		mov	ds:VISVPG, al 
 0AF7  B4 05                    		mov	ah, 5 
 0AF9  CD 10                    		int	10h		; - VIDEO - SELECT DISPLAY PAGE 
                                					; AL = display page, 0-7  for modes 0 &	1,
				 0-3	for modes 2 & 3 
 0AFB                           SETVPX: 
 0AFB  58                       		pop	ax 
 0AFC  C3                       		ret 
                                SETVPG		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0AFD                           DOSCRL		proc near 
 0AFD  50                       		push	ax 
 0AFE  53                       		push	bx 
 0AFF  51                       		push	cx 
 0B00  8B D0                    		mov	dx, ax 
 0B02  B5 00                    		mov	ch, 0 
 0B04  FE C1                    		inc	cl 
 0B06  74 14                    		jz	short DOSCRX 
 0B08                           NXTCHR: 
 0B08  E8 0B20 R                		call	SCRRDC 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-42
                                                            

 0B0B  02 16 000C R             		add	dl, ds:var_63c 
 0B0F  87 D3                    		xchg	dx, bx 
 0B11  E8 0B2F R                		call	SCRWRC 
 0B14  02 16 000C R             		add	dl, ds:var_63c 
 0B18  87 D3                    		xchg	dx, bx 
 0B1A  E2 EC                    		loop	NXTCHR 
 0B1C                           DOSCRX: 
 0B1C  59                       		pop	cx 
 0B1D  5B                       		pop	bx 
 0B1E  58                       		pop	ax 
 0B1F  C3                       		ret 
                                DOSCRL		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0B20                           SCRRDC		proc near 
 0B20  53                       		push	bx 
 0B21  8A 3E 0009 R             		mov	bh, ds:CVPAGE 
 0B25  B4 02                    		mov	ah, 2 
 0B27  CD 10                    		int	10h		; - VIDEO - SET	CURSOR POSITION 
                                					; DH,DL	= row, column (0,0 = upper left) 
                                					; BH = page number 
 0B29  B4 08                    		mov	ah, 8 
 0B2B  CD 10                    		int	10h		; - VIDEO - READ ATTRIBUTES/CHARACTE
				R AT CURSOR	POSITION 
                                					; BH = display page 
                                					; Return: AL = character 
                                					; AH = attribute of character (alpha modes
				) 
 0B2D  5B                       		pop	bx 
 0B2E  C3                       		ret 
                                SCRRDC		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0B2F                           SCRWRC		proc near 
 0B2F  53                       		push	bx 
 0B30  51                       		push	cx 
 0B31  50                       		push	ax 
 0B32  8A 3E 0009 R             		mov	bh, ds:CVPAGE 
 0B36  B4 02                    		mov	ah, 2 
 0B38  CD 10                    		int	10h		; - VIDEO - SET	CURSOR POSITION 
                                					; DH,DL	= row, column (0,0 = upper left) 
                                					; BH = page number 
 0B3A  58                       		pop	ax 
 0B3B  B9 0001                  		mov	cx, 1 
 0B3E  8A 1E 0016 R             		mov	bl, ds:var_646 
 0B42  B4 09                    		mov	ah, 9 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-43
                                                            

 0B44  CD 10                    		int	10h		; - VIDEO - WRITE ATTRIBUTES/CHARACT
				ERS	AT CURSOR POSITION 
                                					; AL = character, BH = display page 
                                					; BL = attributes of character (alpha mode
				s) or	color (graphics	modes) 
                                					; CX = number of times to write	character 
 0B46  59                       		pop	cx 
 0B47  5B                       		pop	bx 
 0B48  C3                       		ret 
                                SCRWRC		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0B49                           SCRSAV		proc near 
 0B49  8F 06 0020 R             		pop	word ptr ds:var_650 
 0B4D  52                       		push	dx 
 0B4E  51                       		push	cx 
 0B4F  53                       		push	bx 
 0B50  50                       		push	ax 
 0B51  50                       		push	ax 
 0B52  53                       		push	bx 
 0B53  51                       		push	cx 
 0B54  52                       		push	dx 
 0B55  9C                       		pushf 
 0B56  B4 0F                    		mov	ah, 0Fh 
 0B58  CD 10                    		int	10h		; - VIDEO - GET	CURRENT	VIDEO MODE 
                                					; Return: AH = number of columns on screen
				 
                                					; AL = current video mode 
                                					; BH = current active display page 
 0B5A  88 3E 000D R             		mov	ds:VISVPG, bh 
 0B5E  88 26 000E R             		mov	ds:var_63e, ah 
 0B62  A2 000F R                		mov	ds:CVMODE, al 
 0B65  80 3E 000A R 00          		cmp	byte ptr ds:var_63a, 0 
 0B6A  74 11                    		jz	short loc_5B45 
 0B6C  80 3E 0010 R 01          		cmp	byte ptr ds:var_640, 1 
 0B71  74 07                    		jz	short loc_5B42 
 0B73  80 3E 0010 R 02          		cmp	byte ptr ds:var_640, 2 
 0B78  75 03                    		jnz	short loc_5B45 
 0B7A                           loc_5B42: 
 0B7A  E8 0C30 R                		call	sub_5BF8 
 0B7D                           loc_5B45: 
 0B7D  9D                       		popf 
 0B7E  5A                       		pop	dx 
 0B7F  59                       		pop	cx 
 0B80  5B                       		pop	bx 
 0B81  58                       		pop	ax 
 0B82  FF 36 0020 R             		push	word ptr ds:var_650 
 0B86  C3                       		ret 
                                SCRSAV		endp 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-44
                                                            

                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0B87                           CLRSCN		proc near 
 0B87  E8 0B49 R                		call	SCRSAV 
                                 
 0B8A                           DOCLRS: 
 0B8A  50                       		push	ax 
 0B8B  E8 0AE6 R                		call	SETVPG 
 0B8E  33 C9                    		xor	cx, cx		; Start	at 0,0 
 0B90  8A 16 000B R             		mov	dl, ds:var_63b 
 0B94  FE CA                    		dec	dl 
 0B96  B6 18                    		mov	dh, 24		; End at 24, width 
 0B98  B8 0600                  		mov	ax, 600h 
 0B9B  8A 3E 0016 R             		mov	bh, ds:var_646 
 0B9F  80 3E 000A R 00          		cmp	byte ptr ds:var_63a, 0 
 0BA4  74 02                    		jz	short SCROL 
 0BA6  B7 00                    		mov	bh, 0 
 0BA8                           SCROL: 
 0BA8  CD 10                    		int	10h		; - VIDEO - SCROLL PAGE	UP 
                                					; AL = number of lines to scroll window	(0
				 = blank whole window) 
                                					; BH = attributes to be	used on	blanked	li
				nes 
                                					; CH,CL	= row,column of	upper left corner 
				of window to scroll 
                                					; DH,DL	= row,column of	lower right corner
				 of window 
 0BAA  E8 0AE6 R                		call	SETVPG 
 0BAD  58                       		pop	ax 
 0BAE  E8 0745 R                		call	SCNRST 
 0BB1  E9 0F10 R                		jmp	SCNOK 
                                CLRSCN		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0BB4                           CLREOL		proc near 
 0BB4  50                       		push	ax 
 0BB5  53                       		push	bx 
 0BB6  51                       		push	cx 
 0BB7  52                       		push	dx 
 0BB8  81 EA 0101               		sub	dx, 101h 
 0BBC  A0 000B R                		mov	al, ds:var_63b 
 0BBF  2A C6                    		sub	al, dh 
 0BC1  76 18                    		jbe	short CLREOX 
 0BC3  8A C8                    		mov	cl, al 
 0BC5  B5 00                    		mov	ch, 0 
 0BC7  86 D6                    		xchg	dl, dh 
 0BC9  8A 3E 0009 R             		mov	bh, ds:CVPAGE 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-45
                                                            

 0BCD  B4 02                    		mov	ah, 2 
 0BCF  CD 10                    		int	10h		; - VIDEO - SET	CURSOR POSITION 
                                					; DH,DL	= row, column (0,0 = upper left) 
                                					; BH = page number 
 0BD1  B0 20                    		mov	al, ' ' 
 0BD3  8A 1E 0016 R             		mov	bl, ds:var_646 
 0BD7  B4 09                    		mov	ah, 9 
 0BD9  CD 10                    		int	10h		; - VIDEO - WRITE ATTRIBUTES/CHARACT
				ERS	AT CURSOR POSITION 
                                					; AL = character, BH = display page 
                                					; BL = attributes of character (alpha mode
				s) or	color (graphics	modes) 
                                					; CX = number of times to write	character 
 0BDB                           CLREOX: 
 0BDB  5A                       		pop	dx 
 0BDC  59                       		pop	cx 
 0BDD  5B                       		pop	bx 
 0BDE  58                       		pop	ax 
 0BDF  C3                       		ret 
                                CLREOL		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0BE0                           CSRDSP		proc near 
 0BE0  E8 09F3 R                		call	SCRSV2 
 0BE3  38 06 0010 R             		cmp	ds:var_640, al 
 0BE7  74 15                    		jz	short loc_5BC6 
 0BE9  A2 0010 R                		mov	ds:var_640, al 
 0BEC  3C 00                    		cmp	al, 0 
 0BEE  75 11                    		jnz	short loc_5BC9 
 0BF0  8B 0E 0013 R             		mov	cx, ds:var_643 
 0BF4  80 CD 20                 		or	ch, 20h 
 0BF7                           SETCUR: 
 0BF7  A2 0012 R                		mov	ds:var_642, al 
 0BFA  B4 01                    		mov	ah, 1 
 0BFC  CD 10                    		int	10h		; - VIDEO - SET	CURSOR CHARACTERISTI
				CS 
                                					; CH bits 0-4 =	start line for cursor in c
				haracter cell 
                                					; bits 5-6 = blink attribute 
                                					; CL bits 0-4 =	end line for cursor in cha
				racter cell 
 0BFE                           loc_5BC6: 
 0BFE  E9 0F10 R                		jmp	SCNOK 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0C01                           loc_5BC9: 
 0C01  3C 01                    		cmp	al, 1 
 0C03  75 0E                    		jnz	short loc_5BDB 
 0C05  B9 0407                  		mov	cx, 407h 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-46
                                                            

 0C08  80 3E 000F R 07          		cmp	byte ptr ds:CVMODE, 7 
 0C0D  75 E8                    		jnz	short SETCUR 
 0C0F  B1 0D                    		mov	cl, 0Dh 
 0C11  EB E4                    		jmp	short SETCUR 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0C13                           loc_5BDB: 
 0C13  3C 02                    		cmp	al, 2 
 0C15  75 09                    		jnz	short GOSCUR 
 0C17  8B 0E 0013 R             		mov	cx, ds:var_643 
 0C1B  80 E5 DF                 		and	ch, 0DFh 
 0C1E  EB D7                    		jmp	short SETCUR 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0C20                           GOSCUR: 
 0C20  8B 0E 0013 R             		mov	cx, ds:var_643 
 0C24  A0 0011 R                		mov	al, ds:var_641 
 0C27  0A C0                    		or	al, al 
 0C29  75 CC                    		jnz	short SETCUR 
 0C2B  80 CD 20                 		or	ch, 20h 
 0C2E  EB C7                    		jmp	short SETCUR 
                                CSRDSP		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0C30                           sub_5BF8	proc near 
 0C30  50                       		push	ax 
 0C31  53                       		push	bx 
 0C32  51                       		push	cx 
 0C33  52                       		push	dx 
 0C34  8B 1E 001E R             		mov	bx, ds:var_64e 
 0C38  B8 0140                  		mov	ax, 320 
 0C3B  33 C9                    		xor	cx, cx 
 0C3D  86 F9                    		xchg	bh, cl 
 0C3F  F7 E1                    		mul	cx 
 0C41  8A 16 000A R             		mov	dl, ds:var_63a 
 0C45  80 FA 01                 		cmp	dl, 1 
 0C48  75 02                    		jnz	short loc_5C14 
 0C4A  D1 E3                    		shl	bx, 1 
 0C4C                           loc_5C14: 
 0C4C  03 D8                    		add	bx, ax 
 0C4E  81 C3 00F0               		add	bx, 0F0h ; '�' 
 0C52  B9 0004                  		mov	cx, 4 
 0C55  80 3E 0010 R 01          		cmp	byte ptr ds:var_640, 1 
 0C5A  75 02                    		jnz	short loc_5C26 
 0C5C  49                       		dec	cx 
 0C5D  49                       		dec	cx 
 0C5E                           loc_5C26: 
 0C5E  B8 B800                  		mov	ax, 0B800h 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-47
                                                            

 0C61  1E                       		push	ds 
 0C62  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 0C64  B8 FFFF                  		mov	ax, 0FFFFh 
 0C67  80 FA 01                 		cmp	dl, 1 
 0C6A  BA 2000                  		mov	dx, 2000h 
 0C6D  75 0F                    		jnz	short loc_5C46 
 0C6F                           loc_5C37: 
 0C6F  03 DA                    		add	bx, dx 
 0C71  31 07                    		xor	[bx], ax 
 0C73  2B DA                    		sub	bx, dx 
 0C75  31 07                    		xor	[bx], ax 
 0C77  83 EB 50                 		sub	bx, 80 
 0C7A  E2 F3                    		loop	loc_5C37 
 0C7C  EB 0D                    		jmp	short loc_5C53 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0C7E                           loc_5C46: 
 0C7E  03 DA                    		add	bx, dx 
 0C80  30 07                    		xor	[bx], al 
 0C82  2B DA                    		sub	bx, dx 
 0C84  30 07                    		xor	[bx], al 
 0C86  83 EB 50                 		sub	bx, 80 
 0C89  E2 F3                    		loop	loc_5C46 
 0C8B                           loc_5C53: 
 0C8B  1F                       		pop	ds 
                                		assume ds:nothing 
 0C8C  5A                       		pop	dx 
 0C8D  59                       		pop	cx 
 0C8E  5B                       		pop	bx 
 0C8F  58                       		pop	ax 
 0C90  C3                       		ret 
                                sub_5BF8	endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0C91                           CSRATR		proc near 
 0C91  E8 0B49 R                		call	SCRSAV 
 0C94  0A E4                    		or	ah, ah 
 0C96  75 03                    		jnz	short loc_5C63 
 0C98  A0 0011 R                		mov	al, ds:var_641 
 0C9B                           loc_5C63: 
 0C9B  A2 0011 R                		mov	ds:var_641, al 
 0C9E  0A FF                    		or	bh, bh 
 0CA0  75 05                    		jnz	short loc_5C6F 
 0CA2  A1 0013 R                		mov	ax, ds:var_643 
 0CA5  8A DC                    		mov	bl, ah 
 0CA7                           loc_5C6F: 
 0CA7  0A ED                    		or	ch, ch 
 0CA9  75 06                    		jnz	short loc_5C79 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-48
                                                            

 0CAB  0A FF                    		or	bh, bh 
 0CAD  74 10                    		jz	short GSTCUR 
 0CAF  8A CB                    		mov	cl, bl 
 0CB1                           loc_5C79: 
 0CB1  8A FB                    		mov	bh, bl 
 0CB3  8A D9                    		mov	bl, cl 
 0CB5  F7 C3 E0E0               		test	bx, 0E0E0h 
 0CB9  75 07                    		jnz	short CSRERR 
 0CBB  89 1E 0013 R             		mov	ds:var_643, bx 
 0CBF                           GSTCUR: 
 0CBF  E9 0C20 R                		jmp	GOSCUR 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0CC2                           CSRERR: 
 0CC2  E9 0F14 R                		jmp	SCNERR 
                                CSRATR		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0CC5                           LCPY		proc near 
 0CC5  E8 0B49 R                		call	SCRSAV 
 0CC8  CD 05                    		int	5		;  - PRINT-SCREEN KEY 
                                					; automatically	called by keyboard scanner
				 when	print-screen key is pressed 
 0CCA  E8 0A70 R                		call	SCRRST 
                                LCPY		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0CCD                           SCRATR		proc near 
 0CCD  50                       		push	ax 
 0CCE  51                       		push	cx 
 0CCF  52                       		push	dx 
 0CD0  8A D0                    		mov	dl, al 
 0CD2  8A F3                    		mov	dh, bl 
 0CD4  81 EA 0101               		sub	dx, 101h 
 0CD8  89 16 001E R             		mov	ds:var_64e, dx 
 0CDC  8A 3E 0009 R             		mov	bh, ds:CVPAGE 
 0CE0  B4 02                    		mov	ah, 2 
 0CE2  CD 10                    		int	10h		; - VIDEO - SET	CURSOR POSITION 
                                					; DH,DL	= row, column (0,0 = upper left) 
                                					; BH = page number 
 0CE4  B4 08                    		mov	ah, 8 
 0CE6  CD 10                    		int	10h		; - VIDEO - READ ATTRIBUTES/CHARACTE
				R AT CURSOR	POSITION 
                                					; BH = display page 
                                					; Return: AL = character 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-49
                                                            

                                					; AH = attribute of character (alpha modes
				) 
 0CE8  B7 00                    		mov	bh, 0 
 0CEA  8A DC                    		mov	bl, ah 
 0CEC  5A                       		pop	dx 
 0CED  59                       		pop	cx 
 0CEE  58                       		pop	ax 
 0CEF  C3                       		ret 
                                SCRATR		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0CF0                           SCRSTT		proc near 
 0CF0  E8 0B49 R                		call	SCRSAV 
 0CF3  8A 0F                    		mov	cl, [bx] 
 0CF5  80 F9 05                 		cmp	cl, 5 
 0CF8  73 16                    		jnb	short loc_5CD8 
 0CFA  43                       		inc	bx 
 0CFB  FE C1                    		inc	cl 
 0CFD  53                       		push	bx 
 0CFE  51                       		push	cx 
 0CFF  8A 16 000A R             		mov	dl, ds:var_63a 
 0D03  E8 0E92 R                		call	sub_5E5A 
 0D06  76 0B                    		jbe	short loc_5CDB 
 0D08  8A D0                    		mov	dl, al 
 0D0A  3C 03                    		cmp	al, 3 
 0D0C  72 05                    		jb	short loc_5CDB 
 0D0E  58                       		pop	ax 
 0D0F  58                       		pop	ax 
 0D10                           loc_5CD8: 
 0D10  E9 0F14 R                		jmp	SCNERR 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0D13                           loc_5CDB: 
 0D13  E8 0E92 R                		call	sub_5E5A 
 0D16  E8 0E92 R                		call	sub_5E5A 
 0D19  76 03                    		jbe	short loc_5CE6 
 0D1B  E8 0DC2 R                		call	sub_5D8A 
 0D1E                           loc_5CE6: 
 0D1E  E8 0E92 R                		call	sub_5E5A 
 0D21  76 03                    		jbe	short loc_5CEE 
 0D23  E8 0DC2 R                		call	sub_5D8A 
 0D26                           loc_5CEE: 
 0D26  59                       		pop	cx 
 0D27  5B                       		pop	bx 
 0D28  8A 2E 000F R             		mov	ch, ds:CVMODE 
 0D2C  E8 0E92 R                		call	sub_5E5A 
 0D2F  76 4C                    		jbe	short loc_5D45 
 0D31  A2 000A R                		mov	ds:var_63a, al 
 0D34  C6 06 0016 R 07          		mov	byte ptr ds:var_646, 7 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-50
                                                            

 0D39  C6 06 0015 R 07          		mov	byte ptr ds:var_645, 7 
 0D3E  3C 00                    		cmp	al, 0 
 0D40  75 13                    		jnz	short loc_5D1D 
 0D42  33 D2                    		xor	dx, dx 
 0D44  89 16 001C R             		mov	word ptr ds:var_64c, dx 
 0D48  B5 02                    		mov	ch, 2 
 0D4A  80 3E 000B R 50          		cmp	byte ptr ds:var_63b, 80 
 0D4F  74 28                    		jz	short loc_5D41 
 0D51  B5 00                    		mov	ch, 0 
 0D53  EB 24                    		jmp	short loc_5D41 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0D55                           loc_5D1D: 
 0D55  B5 04                    		mov	ch, 4 
 0D57  C6 06 000B R 28          		mov	byte ptr ds:var_63b, 40 
 0D5C  BA 0140                  		mov	dx, 320 
 0D5F  C7 06 001C R 3F02        		mov	word ptr ds:var_64c, 3F02h 
 0D65  3C 01                    		cmp	al, 1 
 0D67  74 10                    		jz	short loc_5D41 
 0D69  B5 06                    		mov	ch, 6 
 0D6B  C6 06 000B R 50          		mov	byte ptr ds:var_63b, 80 
 0D70  BA 0280                  		mov	dx, 640 
 0D73  C7 06 001C R 7F01        		mov	word ptr ds:var_64c, 7F01h 
 0D79                           loc_5D41: 
 0D79  89 16 0019 R             		mov	ds:var_649, dx 
 0D7D                           loc_5D45: 
 0D7D  E8 0E92 R                		call	sub_5E5A 
 0D80  76 0F                    		jbe	short loc_5D59 
 0D82  80 E5 FE                 		and	ch, 0FEh 
 0D85  3C 00                    		cmp	al, 0 
 0D87  74 08                    		jz	short loc_5D59 
 0D89  80 FD 06                 		cmp	ch, 6 
 0D8C  73 03                    		jnb	short loc_5D59 
 0D8E  80 CD 01                 		or	ch, 1 
 0D91                           loc_5D59: 
 0D91  8A C5                    		mov	al, ch 
 0D93  3A 06 000F R             		cmp	al, ds:CVMODE 
 0D97  74 10                    		jz	short loc_5D71 
 0D99  B4 00                    		mov	ah, 0 
 0D9B  CD 10                    		int	10h		; - VIDEO - SET	VIDEO MODE 
                                					; AL = mode 
 0D9D  53                       		push	bx 
 0D9E  51                       		push	cx 
 0D9F  E8 0745 R                		call	SCNRST 
 0DA2  59                       		pop	cx 
 0DA3  5B                       		pop	bx 
 0DA4  C6 06 0009 R 00          		mov	byte ptr ds:CVPAGE, 0 
 0DA9                           loc_5D71: 
 0DA9  E8 0E92 R                		call	sub_5E5A 
 0DAC  76 03                    		jbe	short loc_5D79 
 0DAE  A2 0009 R                		mov	ds:CVPAGE, al 
 0DB1                           loc_5D79: 
 0DB1  E8 0E92 R                		call	sub_5E5A 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-51
                                                            

 0DB4  74 02                    		jz	short loc_5D80 
 0DB6  73 03                    		jnb	short loc_5D83 
 0DB8                           loc_5D80: 
 0DB8  A0 0009 R                		mov	al, ds:CVPAGE 
 0DBB                           loc_5D83: 
 0DBB  B4 05                    		mov	ah, 5 
 0DBD  CD 10                    		int	10h		; - VIDEO - SELECT DISPLAY PAGE 
                                					; AL = display page, 0-7  for modes 0 &	1,
				 0-3	for modes 2 & 3 
 0DBF  E9 0F10 R                		jmp	SCNOK 
                                SCRSTT		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0DC2                           sub_5D8A	proc near 
 0DC2  0A D2                    		or	dl, dl 
 0DC4  75 10                    		jnz	short loc_5D9E 
 0DC6  B4 04                    		mov	ah, 4 
 0DC8  80 3E 000B R 50          		cmp	byte ptr ds:var_63b, 80 
 0DCD  74 02                    		jz	short loc_5D99 
 0DCF  B4 08                    		mov	ah, 8 
 0DD1                           loc_5D99: 
 0DD1  3A C4                    		cmp	al, ah 
 0DD3  73 06                    		jnb	short loc_5DA3 
 0DD5  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0DD6                           loc_5D9E: 
 0DD6  3C 00                    		cmp	al, 0 
 0DD8  75 01                    		jnz	short loc_5DA3 
 0DDA  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0DDB                           loc_5DA3: 
 0DDB  58                       		pop	ax 
 0DDC  58                       		pop	ax 
 0DDD  58                       		pop	ax 
 0DDE  E9 0F14 R                		jmp	SCNERR 
                                sub_5D8A	endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0DE1                           SETCLR		proc near 
 0DE1  E8 0B49 R                		call	SCRSAV 
 0DE4  8A 0F                    		mov	cl, [bx] 
 0DE6  43                       		inc	bx 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-52
                                                            

 0DE7  FE C1                    		inc	cl 
 0DE9  8A 2E 0016 R             		mov	ch, ds:var_646 
 0DED  A0 000A R                		mov	al, ds:var_63a 
 0DF0  3C 00                    		cmp	al, 0 
 0DF2  74 4C                    		jz	short loc_5E08 
 0DF4  3C 01                    		cmp	al, 1 
 0DF6  74 03                    		jz	short loc_5DC3 
 0DF8                           loc_5DC0: 
 0DF8  E9 0F14 R                		jmp	SCNERR 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0DFB                           loc_5DC3: 
 0DFB  80 F9 06                 		cmp	cl, 6 
 0DFE  73 F8                    		jnb	short loc_5DC0 
 0E00  E8 0E92 R                		call	sub_5E5A 
 0E03  76 12                    		jbe	short loc_5DDF 
 0E05  53                       		push	bx 
 0E06  3C 10                    		cmp	al, 10h 
 0E08  72 04                    		jb	short loc_5DD6 
 0E0A  24 0F                    		and	al, 0Fh 
 0E0C  0C 10                    		or	al, 10h 
 0E0E                           loc_5DD6: 
 0E0E  8A D8                    		mov	bl, al 
 0E10  B7 00                    		mov	bh, 0 
 0E12  B4 0B                    		mov	ah, 0Bh 
 0E14  CD 10                    		int	10h		; - VIDEO - SET	COLOR PALETTE 
                                					; BH = 00h, BL = border	color 
                                					; BH = 01h, BL = palette (0-3) 
 0E16  5B                       		pop	bx 
 0E17                           loc_5DDF: 
 0E17  33 D2                    		xor	dx, dx 
 0E19  E8 0E92 R                		call	sub_5E5A 
 0E1C  76 04                    		jbe	short loc_5DEA 
 0E1E  8A D0                    		mov	dl, al 
 0E20  B6 01                    		mov	dh, 1 
 0E22                           loc_5DEA: 
 0E22  E8 0E92 R                		call	sub_5E5A 
 0E25  76 04                    		jbe	short loc_5DF3 
 0E27  8A D0                    		mov	dl, al 
 0E29  B6 01                    		mov	dh, 1 
 0E2B                           loc_5DF3: 
 0E2B  E8 0E92 R                		call	sub_5E5A 
 0E2E  76 04                    		jbe	short loc_5DFC 
 0E30  8A D0                    		mov	dl, al 
 0E32  B6 01                    		mov	dh, 1 
 0E34                           loc_5DFC: 
 0E34  0A F6                    		or	dh, dh 
 0E36  74 4C                    		jz	short loc_5E4C 
 0E38  8A C2                    		mov	al, dl 
 0E3A  24 01                    		and	al, 1 
 0E3C  B7 01                    		mov	bh, 1 
 0E3E  EB 3E                    		jmp	short loc_5E46 
                                ; ---------------------------------------------
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-53
                                                            

				------------------------------ 
                                 
 0E40                           loc_5E08: 
 0E40  80 F9 05                 		cmp	cl, 5 
 0E43  73 4A                    		jnb	short SETERR 
 0E45  E8 0E92 R                		call	sub_5E5A 
 0E48  76 11                    		jbe	short loc_5E23 
 0E4A  3C 20                    		cmp	al, 20h	; ' ' 
 0E4C  73 41                    		jnb	short SETERR 
 0E4E  A8 10                    		test	al, 10h 
 0E50  74 04                    		jz	short loc_5E1E 
 0E52  24 0F                    		and	al, 0Fh 
 0E54  0C 80                    		or	al, 80h 
 0E56                           loc_5E1E: 
 0E56  80 E5 70                 		and	ch, 70h 
 0E59  0A E8                    		or	ch, al 
 0E5B                           loc_5E23: 
 0E5B  E8 0E92 R                		call	sub_5E5A 
 0E5E  76 13                    		jbe	short loc_5E3B 
 0E60  3C 10                    		cmp	al, 10h 
 0E62  73 2B                    		jnb	short SETERR 
 0E64  24 07                    		and	al, 7 
 0E66  D0 E0                    		shl	al, 1 
 0E68  D0 E0                    		shl	al, 1 
 0E6A  D0 E0                    		shl	al, 1 
 0E6C  D0 E0                    		shl	al, 1 
 0E6E  80 E5 8F                 		and	ch, 8Fh 
 0E71  0A E8                    		or	ch, al 
 0E73                           loc_5E3B: 
 0E73  E8 0E92 R                		call	sub_5E5A 
 0E76  76 0C                    		jbe	short loc_5E4C 
 0E78  3C 10                    		cmp	al, 10h 
 0E7A  73 13                    		jnb	short SETERR 
 0E7C  B7 00                    		mov	bh, 0 
 0E7E                           loc_5E46: 
 0E7E  8A D8                    		mov	bl, al 
 0E80  B4 0B                    		mov	ah, 0Bh 
 0E82  CD 10                    		int	10h		; - VIDEO - SET	COLOR PALETTE 
                                					; BH = 00h, BL = border	color 
                                					; BH = 01h, BL = palette (0-3) 
 0E84                           loc_5E4C: 
 0E84  88 2E 0016 R             		mov	ds:var_646, ch 
 0E88  88 2E 0015 R             		mov	ds:var_645, ch 
 0E8C  E9 0F10 R                		jmp	SCNOK 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0E8F                           SETERR: 
 0E8F  E9 0F14 R                		jmp	SCNERR 
                                SETCLR		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-54
                                                            

                                 
                                 
 0E92                           sub_5E5A	proc near 
 0E92  FE C9                    		dec	cl 
 0E94  74 09                    		jz	short loc_5E67 
 0E96  8B 07                    		mov	ax, [bx] 
 0E98  43                       		inc	bx 
 0E99  43                       		inc	bx 
 0E9A  0A C0                    		or	al, al 
 0E9C  86 E0                    		xchg	ah, al 
 0E9E  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0E9F                           loc_5E67: 
 0E9F  FE C1                    		inc	cl 
 0EA1  F9                       		stc 
 0EA2  C3                       		ret 
                                sub_5E5A	endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Machine specific routine to set screen width 
                                ; Height in [AL], width	in [CL] 
                                 
 0EA3                           SWIDTH		proc near 
 0EA3  E8 0B49 R                		call	SCRSAV 
 0EA6  BB 0F17 R                		mov	bx, offset MODES40 
 0EA9  3C 28                    		cmp	al, 40		; Is the mode 40 characters wide?
				 
 0EAB  74 17                    		jz	short WIDE40 
 0EAD  3C 50                    		cmp	al, 80		; Or is	it 80 wide? 
 0EAF  BB 0F1F R                		mov	bx, offset MODES80 
 0EB2  75 DB                    		jnz	short SETERR	; If not 40 or 80 columns, e
				rror 
 0EB4  A2 000B R                		mov	ds:var_63b, al 
 0EB7  BA 0280                  		mov	dx, 640 
 0EBA  B0 02                    		mov	al, 2 
 0EBC  C7 06 001C R 7F01        		mov	word ptr ds:var_64c, 7F01h 
 0EC2  EB 15                    		jmp	short loc_5EA1 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0EC4                           WIDE40: 
 0EC4  80 3E 000F R 07          		cmp	byte ptr ds:CVMODE, 7 
 0EC9  74 45                    		jz	short SCNOK 
 0ECB  A2 000B R                		mov	ds:var_63b, al 
 0ECE  BA 0140                  		mov	dx, 320 
 0ED1  B0 01                    		mov	al, 1 
 0ED3  C7 06 001C R 3F02        		mov	word ptr ds:var_64c, 3F02h 
 0ED9                           loc_5EA1: 
 0ED9  80 3E 000A R 00          		cmp	byte ptr ds:var_63a, 0 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-55
                                                            

 0EDE  74 07                    		jz	short loc_5EAF 
 0EE0  A2 000A R                		mov	ds:var_63a, al 
 0EE3  89 16 0019 R             		mov	ds:var_649, dx 
 0EE7                           loc_5EAF: 
 0EE7  A0 000F R                		mov	al, ds:CVMODE 
 0EEA  B4 00                    		mov	ah, 0 
 0EEC  03 D8                    		add	bx, ax 
 0EEE  2E: 8A 07                		mov	al, cs:[bx] 
 0EF1  B4 00                    		mov	ah, 0 
 0EF3  3A 06 000F R             		cmp	al, ds:CVMODE 
 0EF7  74 17                    		jz	short SCNOK 
 0EF9  CD 10                    		int	10h		; - VIDEO - SET	VIDEO MODE 
                                					; AL = mode 
 0EFB  E8 0745 R                		call	SCNRST 
 0EFE  33 C0                    		xor	ax, ax 
 0F00  A2 0009 R                		mov	ds:CVPAGE, al 
 0F03  80 3E 000A R 02          		cmp	byte ptr ds:var_63a, 2 
 0F08  74 06                    		jz	short SCNOK 
 0F0A  B4 0B                    		mov	ah, 0Bh 
 0F0C  33 DB                    		xor	bx, bx 
 0F0E  CD 10                    		int	10h		; - VIDEO - SET	COLOR PALETTE 
                                					; BH = 00h, BL = border	color 
                                					; BH = 01h, BL = palette (0-3) 
                                 
 0F10                           SCNOK: 
 0F10  F8                       		clc 
 0F11                           GOSRST: 
 0F11  E9 0A70 R                		jmp	SCRRST 
                                SWIDTH		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
                                ; START	OF FUNCTION CHUNK FOR sub_5D8A 
                                 
 0F14                           SCNERR: 
 0F14  F9                       		stc 
 0F15  EB FA                    		jmp	short GOSRST 
                                ; END OF FUNCTION CHUNK	FOR sub_5D8A 
                                ; ---------------------------------------------
				------------------------------ 
                                 
                                PUBLIC  FKYFMT, FKYADV, STOREC, FETCHC 
                                PUBLIC  RIGHTC, LEFTC, UPC, DOWNC 
                                PUBLIC  SCALXY, MAPXYC, SETATR, READC, SETC, NS
				ETCX 
                                PUBLIC  GTASPC, PIXSIZ 
                                PUBLIC  TUPC, TDOWNC, PGINIT, NREAD, NWRITE 
                                PUBLIC  PNTINI, SCANR, SCANL 
                                 
 0F17  00                       MODES40		db    0 
 0F18  01                       		db    1 
 0F19  00                       		db    0 
 0F1A  01                       		db    1 
 0F1B  04                       		db    4 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-56
                                                            

 0F1C  05                       		db    5 
 0F1D  05                       		db    5 
 0F1E  07                       		db    7 
 0F1F  02                       MODES80		db    2 
 0F20  03                       		db    3 
 0F21  02                       		db    2 
 0F22  03                       		db    3 
 0F23  06                       		db    6 
 0F24  06                       		db    6 
 0F25  06                       		db    6 
 0F26  07                       		db    7 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0F27                           FKYFMT		proc near 
 0F27  BB 0022 R                		mov	bx, offset var_652 
 0F2A  80 3E 000B R 28          		cmp	byte ptr ds:var_63b, 40 ; 40 wide? 
 0F2F  74 03                    		jz	short FKYFMX 
 0F31  BB 0025 R                		mov	bx, offset var_655 
 0F34                           FKYFMX: 
 0F34  C3                       		ret 
                                FKYFMT		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0F35                           FKYADV		proc near 
 0F35  0B E4                    		or	sp, sp 
 0F37  C3                       		ret 
                                FKYADV		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0F38                           STOREC		proc near 
 0F38  A2 001B R                		mov	ds:var_64b, al 
 0F3B  89 1E 0017 R             		mov	ds:var_647, bx 
 0F3F  C3                       		ret 
                                STOREC		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0F40                           FETCHC		proc near 
 0F40  A0 001B R                		mov	al, ds:var_64b 
 0F43  8B 1E 0017 R             		mov	bx, ds:var_647 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-57
                                                            

 0F47  C3                       		ret 
                                FETCHC		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0F48                           RIGHTC		proc near 
 0F48  51                       		push	cx 
 0F49  8A 0E 001C R             		mov	cl, ds:var_64c 
 0F4D  D2 0E 001B R             		ror	byte ptr ds:var_64b, cl 
 0F51  72 04                    		jb	short RGHTCX 
 0F53  FF 06 0017 R             		inc	word ptr ds:var_647 
 0F57                           RGHTCX: 
 0F57  59                       		pop	cx 
 0F58  C3                       		ret 
                                RIGHTC		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0F59                           LEFTC		proc near 
 0F59  51                       		push	cx 
 0F5A  8A 0E 001C R             		mov	cl, ds:var_64c 
 0F5E  D2 06 001B R             		rol	byte ptr ds:var_64b, cl 
 0F62  72 04                    		jb	short LEFTCX 
 0F64  FF 0E 0017 R             		dec	word ptr ds:var_647 
 0F68                           LEFTCX: 
 0F68  59                       		pop	cx 
 0F69  C3                       		ret 
                                LEFTC		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
                                ; START	OF FUNCTION CHUNK FOR TUPC 
                                 
 0F6A                           UPC: 
 0F6A  B8 2000                  		mov	ax, 2000h 
 0F6D  3B 06 0017 R             		cmp	ax, ds:var_647 
 0F71  76 08                    		jbe	short loc_5F43 
 0F73  2D 0050                  		sub	ax, 80 
 0F76  01 06 0017 R             		add	ds:var_647, ax 
 0F7A  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0F7B                           loc_5F43: 
 0F7B  29 06 0017 R             		sub	ds:var_647, ax 
 0F7F  C3                       		ret 
                                ; END OF FUNCTION CHUNK	FOR TUPC 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-58
                                                            

                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0F80                           DOWNC		proc near 
 0F80  B8 2000                  		mov	ax, 2000h 
 0F83  3B 06 0017 R             		cmp	ax, ds:var_647 
 0F87  76 05                    		jbe	short DOWNCX 
 0F89  01 06 0017 R             		add	ds:var_647, ax 
 0F8D  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0F8E                           DOWNCX: 
 0F8E  2D 0050                  		sub	ax, 80 
 0F91  29 06 0017 R             		sub	ds:var_647, ax 
 0F95  C3                       		ret 
                                DOWNC		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0F96                           SCALXY		proc near 
 0F96  0A ED                    		or	ch, ch 
 0F98  78 1B                    		js	short loc_5F7D 
 0F9A  8B 1E 0019 R             		mov	bx, ds:var_649 
 0F9E  3B CB                    		cmp	cx, bx 
 0FA0  9F                       		lahf 
 0FA1  72 03                    		jb	short loc_5F6E 
 0FA3  8B CB                    		mov	cx, bx 
 0FA5  49                       		dec	cx 
 0FA6                           loc_5F6E: 
 0FA6  0A F6                    		or	dh, dh 
 0FA8  78 10                    		js	short loc_5F82 
 0FAA  BB 00C8                  		mov	bx, 200 
 0FAD  3B D3                    		cmp	dx, bx 
 0FAF  72 0C                    		jb	short loc_5F85 
 0FB1  8B D3                    		mov	dx, bx 
 0FB3  4A                       		dec	dx 
 0FB4  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0FB5                           loc_5F7D: 
 0FB5  33 C9                    		xor	cx, cx 
 0FB7  9F                       		lahf 
 0FB8  EB EC                    		jmp	short loc_5F6E 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0FBA                           loc_5F82: 
 0FBA  33 D2                    		xor	dx, dx 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-59
                                                            

 0FBC  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 0FBD                           loc_5F85: 
 0FBD  9E                       		sahf 
 0FBE  C3                       		ret 
                                SCALXY		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0FBF                           MAPXYC		proc near 
 0FBF  8B C1                    		mov	ax, cx 
 0FC1  8A 0E 000A R             		mov	cl, ds:var_63a 
 0FC5  FE C1                    		inc	cl 
 0FC7  D3 C8                    		ror	ax, cl 
 0FC9  50                       		push	ax 
 0FCA  D2 C4                    		rol	ah, cl 
 0FCC  8A EC                    		mov	ch, ah 
 0FCE  33 F6                    		xor	si, si 
 0FD0  8B C2                    		mov	ax, dx 
 0FD2  D1 E8                    		shr	ax, 1 
 0FD4  73 03                    		jnb	short loc_5FA1 
 0FD6  BE 2000                  		mov	si, 2000h 
 0FD9                           loc_5FA1: 
 0FD9  B1 50                    		mov	cl, 80 
 0FDB  F6 E1                    		mul	cl 
 0FDD  5A                       		pop	dx 
 0FDE  B6 00                    		mov	dh, 0 
 0FE0  03 C2                    		add	ax, dx 
 0FE2  03 F0                    		add	si, ax 
 0FE4  89 36 0017 R             		mov	ds:var_647, si 
 0FE8  8A 0E 001C R             		mov	cl, ds:var_64c 
 0FEC  FE C9                    		dec	cl 
 0FEE  D2 E5                    		shl	ch, cl 
 0FF0  8A CD                    		mov	cl, ch 
 0FF2  A0 001D R                		mov	al, ds:var_64d 
 0FF5  D2 C8                    		ror	al, cl 
 0FF7  A2 001B R                		mov	ds:var_64b, al 
 0FFA  C3                       		ret 
                                MAPXYC		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 0FFB                           SETATR		proc near 
 0FFB  3C 04                    		cmp	al, 4 
 0FFD  73 03                    		jnb	short STATRX 
 0FFF  A2 0030 R                		mov	ds:var_660, al 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-60
                                                            

 1002                           STATRX: 
 1002  F8                       		clc 
 1003  C3                       		ret 
                                SETATR		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 1004                           READC		proc near 
 1004  8B 36 0017 R             		mov	si, ds:var_647 
 1008  1E                       		push	ds 
 1009  B8 B800                  		mov	ax, 0B800h 
 100C  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 100E  8A 04                    		mov	al, [si] 
 1010  1F                       		pop	ds 
                                		assume ds:nothing 
 1011  8A 26 001B R             		mov	ah, ds:var_64b 
 1015  F6 D4                    		not	ah 
 1017  22 C4                    		and	al, ah 
 1019  8A 0E 001C R             		mov	cl, ds:var_64c 
 101D                           RDCLOP: 
 101D  D3 C0                    		rol	ax, cl 
 101F  73 FC                    		jnb	short RDCLOP 
 1021  8A C4                    		mov	al, ah 
 1023  C3                       		ret 
                                READC		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 1024                           SETC		proc near 
 1024  51                       		push	cx 
 1025  1E                       		push	ds 
 1026  E8 1030 R                		call	SETPTR 
 1029  20 2C                    		and	[si], ch 
 102B  08 04                    		or	[si], al 
 102D  1F                       		pop	ds 
 102E  59                       		pop	cx 
 102F  C3                       		ret 
                                SETC		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Set DS:SI to point at	current	"C" 
                                 
 1030                           SETPTR		proc near 
 1030  8A 26 001B R             		mov	ah, ds:var_64b 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-61
                                                            

 1034  8A EC                    		mov	ch, ah 
 1036  A0 0030 R                		mov	al, ds:var_660 
 1039  80 3E 000A R 01          		cmp	byte ptr ds:var_63a, 1 
 103E  74 02                    		jz	short loc_600A 
 1040  24 01                    		and	al, 1 
 1042                           loc_600A: 
 1042  8A 0E 001C R             		mov	cl, ds:var_64c 
 1046                           loc_600E: 
 1046  D2 C8                    		ror	al, cl 
 1048  D2 C4                    		rol	ah, cl 
 104A  72 FA                    		jb	short loc_600E 
 104C  BE B800                  		mov	si, 0B800h 
 104F  56                       		push	si 
 1050  8B 36 0017 R             		mov	si, ds:var_647 
 1054  1F                       		pop	ds 
 1055  C3                       		ret 
                                SETPTR		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 1056                           NSETCX		proc near 
 1056  1E                       		push	ds 
 1057  E8 1030 R                		call	SETPTR 
 105A  F6 C5 80                 		test	ch, 80h 
 105D  74 0E                    		jz	short loc_6035 
 105F                           loc_6027: 
 105F  4B                       		dec	bx 
 1060  78 41                    		js	short loc_606B 
 1062  20 2C                    		and	[si], ch 
 1064  08 04                    		or	[si], al 
 1066  D2 C8                    		ror	al, cl 
 1068  D2 CD                    		ror	ch, cl 
 106A  72 F3                    		jb	short loc_6027 
 106C  46                       		inc	si 
 106D                           loc_6035: 
 106D  51                       		push	cx 
 106E  50                       		push	ax 
 106F  BA 0007                  		mov	dx, 7 
 1072  8A E0                    		mov	ah, al 
 1074                           loc_603C: 
 1074  D2 C8                    		ror	al, cl 
 1076  0A E0                    		or	ah, al 
 1078  4A                       		dec	dx 
 1079  75 F9                    		jnz	short loc_603C 
 107B  8A C4                    		mov	al, ah 
 107D  26: 8A 0E 000A R         		mov	cl, es:var_63a 
 1082  D3 CB                    		ror	bx, cl 
 1084  D1 CB                    		ror	bx, 1 
 1086  D1 CB                    		ror	bx, 1 
 1088  EB 04                    		jmp	short loc_6056 
                                ; ---------------------------------------------
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-62
                                                            

				------------------------------ 
                                 
 108A                           loc_6052: 
 108A  89 04                    		mov	[si], ax 
 108C  46                       		inc	si 
 108D  46                       		inc	si 
 108E                           loc_6056: 
 108E  FE CB                    		dec	bl 
 1090  79 F8                    		jns	short loc_6052 
 1092  D0 E7                    		shl	bh, 1 
 1094  73 03                    		jnb	short loc_6061 
 1096  88 04                    		mov	[si], al 
 1098  46                       		inc	si 
 1099                           loc_6061: 
 1099  B3 00                    		mov	bl, 0 
 109B  D3 C3                    		rol	bx, cl 
 109D  D1 C3                    		rol	bx, 1 
 109F  58                       		pop	ax 
 10A0  59                       		pop	cx 
 10A1  EB BC                    		jmp	short loc_6027 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 10A3                           loc_606B: 
 10A3  1F                       		pop	ds 
 10A4  C3                       		ret 
                                NSETCX		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Get screen aspect ratio 
                                 
 10A5                           GTASPC		proc near 
 10A5  BB 00D5                  		mov	bx, 213		; FP number! 
 10A8  BA 0133                  		mov	dx, 307 
 10AB  80 3E 000A R 01          		cmp	byte ptr ds:var_63a, 1 
 10B0  74 06                    		jz	short GTASPX 
 10B2  BB 006B                  		mov	bx, 107		; FP number! 
 10B5  BA 0267                  		mov	dx, 615 
 10B8                           GTASPX: 
 10B8  C3                       		ret 
                                GTASPC		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 10B9                           PIXSIZ		proc near 
 10B9  A0 001C R                		mov	al, ds:var_64c 
 10BC  C3                       		ret 
                                PIXSIZ		endp 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-63
                                                            

                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 10BD                           TUPC		proc near 
 10BD  83 3E 0017 R 4F          		cmp	word ptr ds:var_647, 4Fh 
 10C2  76 03                    		jbe	short TUPCX 
 10C4  E9 0F6A R                		jmp	UPC 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 10C7                           TUPCX: 
 10C7  F9                       		stc 
 10C8  C3                       		ret 
                                TUPC		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 10C9                           TDOWNC		proc near 
 10C9  81 3E 0017 R 3EF0        		cmp	word ptr ds:var_647, 3EF0h 
 10CF  73 F6                    		jnb	short TUPCX 
 10D1  E9 0F80 R                		jmp	DOWNC 
                                TDOWNC		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
 10D4  11D7 R                   PGDISP		dw offset FNOR 
 10D6  11DA R                   		dw offset FNAND 
 10D8  11DD R                   		dw offset FNINV 
 10DA  11DF R                   		dw offset FNSET 
 10DC  11E2 R                   		dw offset FNXOR 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 10DE                           PGINIT		proc near 
 10DE  9F                       		lahf 
 10DF  89 1E 0031 R             		mov	ds:var_661, bx 
 10E3  51                       		push	cx 
 10E4  D1 E9                    		shr	cx, 1 
 10E6  D1 E9                    		shr	cx, 1 
 10E8  D1 E9                    		shr	cx, 1 
 10EA  89 0E 0033 R             		mov	ds:var_663, cx 
 10EE  59                       		pop	cx 
 10EF  80 E1 07                 		and	cl, 7 
 10F2  B5 08                    		mov	ch, 8 
 10F4  2A E9                    		sub	ch, cl 
 10F6  80 E5 07                 		and	ch, 7 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-64
                                                            

 10F9  89 0E 0035 R             		mov	WORD PTR ds:var_665, cx 
 10FD  9E                       		sahf 
 10FE  73 13                    		jnb	short PGINIX 
 1100  3C 05                    		cmp	al, 5 
 1102  73 0F                    		jnb	short PGINIX 
 1104  BB 10D4 R                		mov	bx, offset PGDISP 
 1107  B4 00                    		mov	ah, 0 
 1109  D0 E0                    		shl	al, 1 
 110B  03 D8                    		add	bx, ax 
 110D  2E: 8B 07                		mov	ax, cs:[bx] 
 1110  A3 0037 R                		mov	ds:var_667, ax 
 1113                           PGINIX: 
 1113  C3                       		ret 
                                PGINIT		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 1114                           NREAD		proc near 
 1114  1E                       		push	ds 
 1115  8B 3E 0031 R             		mov	di, ds:var_661 
 1119  8B 1E 0033 R             		mov	bx, ds:var_663 
 111D  E8 1030 R                		call	SETPTR 
 1120  8A 34                    		mov	dh, [si] 
 1122  B4 00                    		mov	ah, 0 
 1124                           loc_60EC: 
 1124  F6 C5 80                 		test	ch, 80h 
 1127  74 08                    		jz	short loc_60F9 
 1129  D2 C5                    		rol	ch, cl 
 112B  D2 E6                    		shl	dh, cl 
 112D  02 E1                    		add	ah, cl 
 112F  EB F3                    		jmp	short loc_60EC 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 1131                           loc_60F9: 
 1131  8A CC                    		mov	cl, ah 
 1133  EB 06                    		jmp	short loc_6103 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 1135                           loc_60FD: 
 1135  26: 88 35                		mov	es:[di], dh 
 1138  47                       		inc	di 
 1139  8A F0                    		mov	dh, al 
 113B                           loc_6103: 
 113B  46                       		inc	si 
 113C  8A 04                    		mov	al, [si] 
 113E  8A E7                    		mov	ah, bh 
 1140  D3 E0                    		shl	ax, cl 
 1142  0A F4                    		or	dh, ah 
 1144  FE CB                    		dec	bl 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-65
                                                            

 1146  79 ED                    		jns	short loc_60FD 
 1148  26: 8A 0E 0036 R         		mov	cl, es:var_666 
 114D  0A C9                    		or	cl, cl 
 114F  74 08                    		jz	short NREADX 
 1151  D2 EE                    		shr	dh, cl 
 1153  D2 E6                    		shl	dh, cl 
 1155  26: 88 35                		mov	es:[di], dh 
 1158  47                       		inc	di 
 1159                           NREADX: 
 1159  1F                       		pop	ds 
 115A  89 3E 0031 R             		mov	ds:var_661, di 
 115E  C3                       		ret 
                                NREAD		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 115F                           NWRITE		proc near 
 115F  1E                       		push	ds 
 1160  8B 3E 0031 R             		mov	di, ds:var_661 
 1164  8B 1E 0033 R             		mov	bx, ds:var_663 
 1168  E8 1030 R                		call	SETPTR 
 116B  8B 14                    		mov	dx, [si] 
 116D  B4 00                    		mov	ah, 0 
                                 
 116F                           loc_6137: 
 116F  F6 C5 80                 		test	ch, 80h 
 1172  74 08                    		jz	short loc_6144 
 1174  D2 C5                    		rol	ch, cl 
 1176  D3 C2                    		rol	dx, cl 
 1178  02 E1                    		add	ah, cl 
 117A  EB F3                    		jmp	short loc_6137 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 117C                           loc_6144: 
 117C  8A CC                    		mov	cl, ah 
 117E  EB 0B                    		jmp	short loc_6153 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 1180                           loc_6148: 
 1180  88 14                    		mov	[si], dl 
 1182  46                       		inc	si 
 1183  8A D6                    		mov	dl, dh 
 1185  46                       		inc	si 
 1186  8A 34                    		mov	dh, [si] 
 1188  4E                       		dec	si 
 1189  D3 C2                    		rol	dx, cl 
 118B                           loc_6153: 
 118B  26: 8A 05                		mov	al, es:[di] 
 118E  47                       		inc	di 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-66
                                                            

 118F  26: FF 16 0037 R         		call	word ptr es:var_667 
 1194  D3 CA                    		ror	dx, cl 
 1196  FE CB                    		dec	bl 
 1198  79 E6                    		jns	short loc_6148 
 119A  26: 8A 1E 0035 R         		mov	bl, es:var_665 
 119F  0A DB                    		or	bl, bl 
 11A1  75 07                    		jnz	short loc_6172 
 11A3  4F                       		dec	di 
 11A4  0A C9                    		or	cl, cl 
 11A6  74 29                    		jz	short loc_6199 
 11A8  EB 11                    		jmp	short loc_6183 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 11AA                           loc_6172: 
 11AA  02 CB                    		add	cl, bl 
 11AC  80 F9 08                 		cmp	cl, 8 
 11AF  72 0A                    		jb	short loc_6183 
 11B1  88 14                    		mov	[si], dl 
 11B3  74 1C                    		jz	short loc_6199 
 11B5  46                       		inc	si 
 11B6  8A D6                    		mov	dl, dh 
 11B8  80 E9 08                 		sub	cl, 8 
 11BB                           loc_6183: 
 11BB  8A 04                    		mov	al, [si] 
 11BD  D2 E0                    		shl	al, cl 
 11BF  D2 E8                    		shr	al, cl 
 11C1  8A F0                    		mov	dh, al 
 11C3  B5 08                    		mov	ch, 8 
 11C5  2A E9                    		sub	ch, cl 
 11C7  8A CD                    		mov	cl, ch 
 11C9  D2 EA                    		shr	dl, cl 
 11CB  D2 E2                    		shl	dl, cl 
 11CD  0A F2                    		or	dh, dl 
 11CF  88 34                    		mov	[si], dh 
 11D1                           loc_6199: 
 11D1  1F                       		pop	ds 
 11D2  89 3E 0031 R             		mov	ds:var_661, di 
 11D6  C3                       		ret 
                                NWRITE		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 11D7                           FNOR: 
 11D7  0A D0                    		or	dl, al 
 11D9  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 11DA                           FNAND: 
 11DA  22 D0                    		and	dl, al 
 11DC  C3                       		ret 
                                ; ---------------------------------------------
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-67
                                                            

				------------------------------ 
                                 
 11DD                           FNINV: 
 11DD  34 FF                    		xor	al, 0FFh 
                                 
 11DF                           FNSET: 
 11DF  8A D0                    		mov	dl, al 
 11E1  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 11E2                           FNXOR: 
 11E2  32 D0                    		xor	dl, al 
 11E4  C3                       		ret 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 11E5                           PNTINI		proc near 
 11E5  3C 04                    		cmp	al, 4 
 11E7  72 02                    		jb	short PNTINX 
 11E9  B0 00                    		mov	al, 0 
 11EB                           PNTINX: 
 11EB  A2 0039 R                		mov	ds:var_669, al 
 11EE  F8                       		clc 
 11EF  C3                       		ret 
                                PNTINI		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 11F0                           SCANR		proc near 
 11F0  1E                       		push	ds 
 11F1  8B FA                    		mov	di, dx 
 11F3  E8 1030 R                		call	SETPTR 
 11F6  E8 129A R                		call	sub_6262 
 11F9  2A DC                    		sub	bl, ah 
 11FB  8A D3                    		mov	dl, bl 
 11FD  8A 24                    		mov	ah, [si] 
 11FF  51                       		push	cx 
 1200                           loc_61C8: 
 1200  D2 CC                    		ror	ah, cl 
 1202  D2 CD                    		ror	ch, cl 
 1204  72 FA                    		jb	short loc_61C8 
 1206  59                       		pop	cx 
 1207  B3 00                    		mov	bl, 0 
 1209  26: 8A 3E 0039 R         		mov	bh, es:var_669 
 120E  26: 80 3E 000A R 01      		cmp	byte ptr es:var_63a, 1 
 1214  74 03                    		jz	short loc_61E1 
 1216  80 E7 01                 		and	bh, 1 
 1219                           loc_61E1: 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-68
                                                            

 1219  8A C3                    		mov	al, bl 
 121B  D3 C0                    		rol	ax, cl 
 121D  3A C7                    		cmp	al, bh 
 121F  75 16                    		jnz	short loc_61FF 
 1221  4F                       		dec	di 
 1222  74 0B                    		jz	short loc_61F7 
 1224  D2 CD                    		ror	ch, cl 
 1226  72 F1                    		jb	short loc_61E1 
 1228  46                       		inc	si 
 1229  8A 24                    		mov	ah, [si] 
 122B  FE CA                    		dec	dl 
 122D  75 EA                    		jnz	short loc_61E1 
 122F                           loc_61F7: 
 122F  33 DB                    		xor	bx, bx 
 1231  8B D3                    		mov	dx, bx 
 1233  8A CA                    		mov	cl, dl 
 1235  1F                       		pop	ds 
 1236  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 1237                           loc_61FF: 
 1237  26: 89 36 0000 E         		mov	es:CSAVEA, si 
 123C  26: 88 2E 0000 E         		mov	BYTE PTR es:CSAVEM, ch 
 1241  57                       		push	di 
 1242  26: 8A 36 0030 R         		mov	dh, es:var_660 
 1247  8A DE                    		mov	bl, dh 
 1249  51                       		push	cx 
 124A  26: 80 3E 000A R 01      		cmp	byte ptr es:var_63a, 1 
 1250  74 09                    		jz	short loc_6223 
 1252  80 E6 01                 		and	dh, 1 
 1255  8A DE                    		mov	bl, dh 
 1257  EB 02                    		jmp	short loc_6223 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 1259                           loc_6221: 
 1259  D2 C6                    		rol	dh, cl 
 125B                           loc_6223: 
 125B  D2 CD                    		ror	ch, cl 
 125D  72 FA                    		jb	short loc_6221 
 125F  59                       		pop	cx 
 1260  33 FF                    		xor	di, di 
 1262  EB 08                    		jmp	short loc_6234 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 1264                           loc_622C: 
 1264  B0 00                    		mov	al, 0 
 1266  D3 C0                    		rol	ax, cl 
 1268  3A C7                    		cmp	al, bh 
 126A  74 1B                    		jz	short loc_624F 
 126C                           loc_6234: 
 126C  3A C3                    		cmp	al, bl 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-69
                                                            

 126E  74 06                    		jz	short loc_623E 
 1270  20 2C                    		and	[si], ch 
 1272  08 34                    		or	[si], dh 
 1274  B3 FF                    		mov	bl, 0FFh 
 1276                           loc_623E: 
 1276  47                       		inc	di 
 1277  D2 CE                    		ror	dh, cl 
 1279  D2 CD                    		ror	ch, cl 
 127B  72 E7                    		jb	short loc_622C 
 127D  46                       		inc	si 
 127E  8A 24                    		mov	ah, [si] 
 1280  FE CA                    		dec	dl 
 1282  75 E0                    		jnz	short loc_622C 
 1284  D2 C5                    		rol	ch, cl 
 1286  4E                       		dec	si 
 1287                           loc_624F: 
 1287  5A                       		pop	dx 
 1288  FE C3                    		inc	bl 
 128A  74 02                    		jz	short loc_6256 
 128C  B1 00                    		mov	cl, 0 
 128E                           loc_6256: 
 128E  8B DF                    		mov	bx, di 
 1290  1F                       		pop	ds 
 1291  89 36 0017 R             		mov	ds:var_647, si 
 1295  88 2E 001B R             		mov	ds:var_64b, ch 
 1299  C3                       		ret 
                                SCANR		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 129A                           sub_6262	proc near 
 129A  8B C6                    		mov	ax, si 
 129C  BB 2000                  		mov	bx, 2000h 
 129F  3B C3                    		cmp	ax, bx 
 12A1  72 02                    		jb	short loc_626D 
 12A3  2B C3                    		sub	ax, bx 
 12A5                           loc_626D: 
 12A5  B3 50                    		mov	bl, 80 
 12A7  F6 F3                    		div	bl 
 12A9  C3                       		ret 
                                sub_6262	endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 12AA                           SCANL		proc near 
 12AA  1E                       		push	ds 
 12AB  E8 1030 R                		call	SETPTR 
 12AE  8A F0                    		mov	dh, al 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-70
                                                            

 12B0  E8 129A R                		call	sub_6262 
 12B3  8A D4                    		mov	dl, ah 
 12B5  8A 24                    		mov	ah, [si] 
 12B7  51                       		push	cx 
 12B8                           loc_6280: 
 12B8  D2 CC                    		ror	ah, cl 
 12BA  D2 CD                    		ror	ch, cl 
 12BC  72 FA                    		jb	short loc_6280 
 12BE  59                       		pop	cx 
 12BF  26: 8A 1E 0030 R         		mov	bl, es:var_660 
 12C4  26: 8A 3E 0039 R         		mov	bh, es:var_669 
 12C9  26: 80 3E 000A R 01      		cmp	byte ptr es:var_63a, 1 
 12CF  74 04                    		jz	short loc_629D 
 12D1  81 E3 0101               		and	bx, 101h 
 12D5                           loc_629D: 
 12D5  D2 CF                    		ror	bh, cl 
 12D7  D2 CB                    		ror	bl, cl 
 12D9  33 FF                    		xor	di, di 
 12DB  EB 13                    		jmp	short loc_62B8 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 12DD                           loc_62A5: 
 12DD  B0 00                    		mov	al, 0 
 12DF  D3 C8                    		ror	ax, cl 
 12E1  3A C7                    		cmp	al, bh 
 12E3  74 18                    		jz	short loc_62C5 
 12E5  3A C3                    		cmp	al, bl 
 12E7  74 06                    		jz	short loc_62B7 
 12E9  20 2C                    		and	[si], ch 
 12EB  08 34                    		or	[si], dh 
 12ED  B3 FF                    		mov	bl, -1 
 12EF                           loc_62B7: 
 12EF  47                       		inc	di 
 12F0                           loc_62B8: 
 12F0  D2 C6                    		rol	dh, cl 
 12F2  D2 C5                    		rol	ch, cl 
 12F4  72 E7                    		jb	short loc_62A5 
 12F6  4E                       		dec	si 
 12F7  8A 24                    		mov	ah, [si] 
 12F9  FE CA                    		dec	dl 
 12FB  79 E0                    		jns	short loc_62A5 
 12FD                           loc_62C5: 
 12FD  8A C3                    		mov	al, bl 
 12FF  8B DF                    		mov	bx, di 
 1301  0B DB                    		or	bx, bx 
 1303  75 04                    		jnz	short loc_62D1 
 1305  B1 00                    		mov	cl, 0 
 1307  1F                       		pop	ds 
 1308  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 1309                           loc_62D1: 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-71
                                                            

 1309  D2 CD                    		ror	ch, cl 
 130B  72 01                    		jb	short loc_62D6 
 130D  46                       		inc	si 
 130E                           loc_62D6: 
 130E  FE C0                    		inc	al 
 1310  74 02                    		jz	short loc_62DC 
 1312  B1 00                    		mov	cl, 0 
 1314                           loc_62DC: 
 1314  1F                       		pop	ds 
 1315  88 2E 001B R             		mov	ds:var_64b, ch 
 1319  89 36 0017 R             		mov	ds:var_647, si 
 131D  C3                       		ret 
                                SCANL		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
                                ; Start of another module? 
                                ;		align 10h 
                                 
                                PUBLIC  RDPEN, RDTRIG, RDSTIK, POLLEV 
                                 
 131E  00                       ISREVT		db 0 
 131F  0000                     LPWSDN		dw 0 
 1321  0000                     LPLGX		dw 0 
 1323  0000                     LPLGY		dw 0 
 1325  0000                     LPDOWN		dw 0                    ; -1 if	current
				ly down,	0 if up 
 1327  0000                     LPGX		dw 0 
 1329  0000                     LPGY		dw 0 
 132B  0001                     LPROW		dw 1 
 132D  0001                     LPCOL		dw 1 
 132F  0001                     LPLROW		dw 1 
 1331  0001                     LPLCOL		dw 1 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 1333                           LPENQR		proc near 
 1333  1E                       		push	ds 
 1334  0E                       		push	cs 
 1335  1F                       		pop	ds 
                                		assume ds:CSEG 
 1336  50                       		push	ax 
 1337  53                       		push	bx 
 1338  51                       		push	cx 
 1339  52                       		push	dx 
 133A  B4 04                    		mov	ah, 4 
 133C  CD 10                    		int	10h		; - VIDEO - READ LIGHT PEN POSITION 
				(all but PS) 
                                					; Return: AH = 00h light pen switch not	ac
				tivated 
                                					; AH = 01h light pen values in registers 
                                					; DH,DL	= row,columnCH = raster	line (0-19
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-72
                                                            

				9) (EGA) old graphics	modes 
                                					; CX = (EGA) raster line 
                                					; BX = pixel column 
 133E  0A E4                    		or	ah, ah 
 1340  74 3F                    		jz	short NOSWIT 
 1342  89 1E 1327 R             		mov	LPGX, bx 
 1346  FE C6                    		inc	dh 
 1348  88 36 132F R             		mov	byte ptr LPLROW, dh 
 134C  FE C2                    		inc	dl 
 134E  88 16 1331 R             		mov	byte ptr LPLCOL, dl 
 1352  88 2E 1329 R             		mov	byte ptr LPGY, ch 
 1356  83 3E 1325 R FF          		cmp	LPDOWN,	-1 
 135B  74 1E                    		jz	short LPENQX 
 135D  C6 06 131E R 01          		mov	ISREVT,	1 
 1362  B8 FFFF                  		mov	ax, -1 
 1365  A3 1325 R                		mov	LPDOWN,	ax 
 1368  A3 131F R                		mov	LPWSDN,	ax 
 136B  89 1E 1321 R             		mov	LPLGX, bx 
 136F  88 2E 1323 R             		mov	byte ptr LPLGY,	ch 
 1373  88 36 132B R             		mov	byte ptr LPROW,	dh 
 1377  88 16 132D R             		mov	byte ptr LPCOL,	dl 
 137B                           LPENQX: 
 137B  5A                       		pop	dx 
 137C  59                       		pop	cx 
 137D  5B                       		pop	bx 
 137E  58                       		pop	ax 
 137F  1F                       		pop	ds 
                                		assume ds:nothing 
 1380  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 1381                           NOSWIT: 
 1381  C7 06 1325 R 0000        		mov	ds:LPDOWN, 0 
 1387  EB F2                    		jmp	short LPENQX 
                                LPENQR		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Light	pen control via	[AL] 
                                ;  -2: Pen ON 
                                ;  -1: Pen OFF 
                                ;   0: Return -1 if pen	was down since last pol
				l, else 0. 
                                ;   1: Return X	Graphics Coordinate where pen w
				as last activated. 
                                ;   2: Return Y	Graphics Coordinate where pen w
				as last activated. 
                                ;   3: Return -1 if pen	is currently down, 0 if
					currently up. 
                                ;   4: Return last known valid X Graphics Coord
				inate. 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-73
                                                            

                                ;   5: Return last known valid Y Graphics Coord
				inate. 
                                ;   6: Return character	row where pen was last 
				activated. 
                                ;   7: Return character	column where pen was la
				st activated. 
                                ;   8: Return last known character row. 
                                ;   9: Return last known character column. 
                                 
 1389                           RDPEN		proc near 
 1389  1E                       		push	ds 
 138A  0E                       		push	cs 
 138B  1F                       		pop	ds 
                                		assume ds:CSEG 
 138C  0A C0                    		or	al, al 
 138E  78 17                    		js	short LPNOFF 
 1390  56                       		push	si 
 1391  D0 E0                    		shl	al, 1 
 1393  B4 00                    		mov	ah, 0 
 1395  BE 131F R                		mov	si, offset LPWSDN 
 1398  03 F0                    		add	si, ax 
 139A  2E: 8B 1C                		mov	bx, cs:[si] 
 139D  0B C0                    		or	ax, ax 
 139F  75 03                    		jnz	short RDPENX 
 13A1  A3 131F R                		mov	LPWSDN,	ax	; Not down since last poll 
 13A4                           RDPENX: 
 13A4  5E                       		pop	si 
 13A5  1F                       		pop	ds 
                                		assume ds:nothing 
 13A6  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 13A7                           LPNOFF: 
 13A7  3C FE                    		cmp	al, -2		; Or should it be ON? 
 13A9  74 07                    		jz	short LPNON 
 13AB  80 26 0719 R FE          		and	ds:EVTSET, 0FEh	; Disable light	pen readi
				ng 
 13B0  1F                       		pop	ds 
 13B1  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 13B2                           LPNON: 
 13B2  80 0E 0719 R 01          		or	ds:EVTSET, 1	; Enable light pen reading 
 13B7  33 C0                    		xor	ax, ax 
 13B9  A3 1325 R                		mov	ds:LPDOWN, ax 
 13BC  A3 131F R                		mov	ds:LPWSDN, ax	; Not down since last poll 
 13BF  1F                       		pop	ds 
 13C0  C3                       		ret 
                                RDPEN		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-74
                                                            

				============================== 
                                 
                                 
 13C1                           RDTRIG		proc near 
 13C1  52                       		push	dx 
 13C2  51                       		push	cx 
 13C3  33 C9                    		xor	cx, cx 
 13C5  8A C8                    		mov	cl, al 
 13C7  3C 01                    		cmp	al, 1 
 13C9  75 02                    		jnz	short loc_639F 
 13CB  B1 02                    		mov	cl, 2 
 13CD                           loc_639F: 
 13CD  3C 02                    		cmp	al, 2 
 13CF  75 02                    		jnz	short loc_63A5 
 13D1  B1 01                    		mov	cl, 1 
 13D3                           loc_63A5: 
 13D3  80 C1 04                 		add	cl, 4 
 13D6  BA 0201                  		mov	dx, 201h 
 13D9  EC                       		in	al, dx		; Game I/O port 
                                					; bits 0-3: Coordinates	(resistive, time-d
				ependent inputs) 
                                					; bits 4-7: Buttons/Triggers (digital inpu
				ts) 
 13DA  F6 D0                    		not	al 
 13DC  D2 C8                    		ror	al, cl 
 13DE  24 01                    		and	al, 1 
 13E0  0A E4                    		or	ah, ah 
 13E2  74 16                    		jz	short RDTRGX 
 13E4  FB                       		sti 
 13E5  2E: A0 071A R            		mov	al, cs:LSTRIG 
 13E9  D2 C8                    		ror	al, cl 
 13EB  8A E8                    		mov	ch, al 
 13ED  24 FE                    		and	al, 0FEh 
 13EF  D2 C0                    		rol	al, cl 
 13F1  2E: A2 071A R            		mov	cs:LSTRIG, al 
 13F5  8A C5                    		mov	al, ch 
 13F7  24 01                    		and	al, 1 
 13F9  FA                       		cli 
 13FA                           RDTRGX: 
 13FA  59                       		pop	cx 
 13FB  5A                       		pop	dx 
 13FC  C3                       		ret 
                                RDTRIG		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 13FD                           RDSTIK		proc near 
 13FD  50                       		push	ax 
 13FE  51                       		push	cx 
 13FF  52                       		push	dx 
 1400  3C 04                    		cmp	al, 4 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-75
                                                            

 1402  F5                       		cmc 
 1403  72 1D                    		jb	short RDSTKX 
 1405  8A C8                    		mov	cl, al 
 1407  B0 01                    		mov	al, 1 
 1409  D2 E0                    		shl	al, cl 
 140B  8A C8                    		mov	cl, al 
 140D  33 DB                    		xor	bx, bx 
 140F  BA 0201                  		mov	dx, 201h 
 1412  EC                       		in	al, dx		; Game I/O port 
                                					; bits 0-3: Coordinates	(resistive, time-d
				ependent inputs) 
                                					; bits 4-7: Buttons/Triggers (digital inpu
				ts) 
 1413  22 C1                    		and	al, cl 
 1415  75 0B                    		jnz	short RDSTKX 
 1417  4B                       		dec	bx 
 1418  4B                       		dec	bx 
 1419  FA                       		cli 
 141A  EE                       		out	dx, al		; Game I/O port 
                                					; bits 0-3: Coordinates	(resistive, time-d
				ependent inputs) 
                                					; bits 4-7: Buttons/Triggers (digital inpu
				ts) 
 141B                           RDSTLP: 
 141B  43                       		inc	bx 
 141C  EC                       		in	al, dx		; Game I/O port 
                                					; bits 0-3: Coordinates	(resistive, time-d
				ependent inputs) 
                                					; bits 4-7: Buttons/Triggers (digital inpu
				ts) 
 141D  22 C1                    		and	al, cl 
 141F  75 FA                    		jnz	short RDSTLP 
 1421  FB                       		sti 
 1422                           RDSTKX: 
 1422  5A                       		pop	dx 
 1423  59                       		pop	cx 
 1424  58                       		pop	ax 
 1425  C3                       		ret 
                                RDSTIK		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 1426                           POLLEV		proc near 
 1426  FC                       		cld 
 1427  FA                       		cli 
 1428  2E: 80 3E 131E R 00      		cmp	cs:ISREVT, 0	; Light	pen event? 
 142E  2E: C6 06 131E R 00      		mov	cs:ISREVT, 0 
 1434  FB                       		sti 
 1435  75 0D                    		jnz	short POLEVX 
 1437  1E                       		push	ds 
 1438  33 C0                    		xor	ax, ax 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-76
                                                            

 143A  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 143C  A1 041A                  		mov	ax, ds:41Ah	; Next keyboard	buffer item 
 143F  3B 06 041C               		cmp	ax, ds:41Ch	; Last keyboard	buffer item 
 1443  1F                       		pop	ds 
                                		assume ds:nothing 
 1444                           POLEVX: 
 1444  C3                       		ret 
                                POLLEV		endp 
                                 
                                ; ---------------------------------------------
				------------------------------ 
                                ; Start of another module? 
                                ;		align 10h 
                                 
                                PUBLIC  DONOTE 
                                 
 1445  0084[                    NTARRY		db 84h dup(0) 
            00                  
                         ]      
                                
 14C9  0000                     CURNOT		dw 0 
 14CB  0000                     NOTPTR		dw 0 
 14CD  00                       		db 0            ; Unused? 
 14CE  00                       		db 0 
 14CF  00                       byte_64AA	db 0 
 14D0  0000                     word_64AB	dw 0 
                                 
 14D2  00                       byte_64AD	db 0 
 14D3  00                       ISRCNT		db 0            ; Timer	ISR entry count
				er. Because the timer ticks 
                                				; faster, only chain to	the previous handle
				r when 
                                				; the counter goes to zero. 
 14D4  00 00 00 00              OLDTMI		dd 0            ; Previous timer interr
				upt vector 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 14D8                           TMRISR		proc far 
 14D8  50                       		push	ax 
 14D9  53                       		push	bx 
 14DA  52                       		push	dx 
 14DB  56                       		push	si 
 14DC  1E                       		push	ds 
 14DD  0E                       		push	cs 
 14DE  1F                       		pop	ds 
                                		assume ds:CSEG 
 14DF  F6 06 0719 R 02          		test	EVTSET,	2	; Speaker on? 
 14E4  75 06                    		jnz	short TMRIS1	; If not, turn it off now 
 14E6  E4 61                    		in	al, 61h		; PC/XT	PPI port B bits: 
                                					; 0: Tmr 2 gate	��� OR	03H=spkr ON 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-77
                                                            

                                					; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF 
                                					; 3: 1=read high switches 
                                					; 4: 0=enable RAM parity checking 
                                					; 5: 0=enable I/O channel check 
                                					; 6: 0=hold keyboard clock low 
                                					; 7: 0=enable kbrd 
 14E8  24 FD                    		and	al, 0FDh 
 14EA  E6 61                    		out	61h, al		; PC/XT	PPI port B bits: 
                                					; 0: Tmr 2 gate	��� OR	03H=spkr ON 
                                					; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF 
                                					; 3: 1=read high switches 
                                					; 4: 0=enable RAM parity checking 
                                					; 5: 0=enable I/O channel check 
                                					; 6: 0=hold keyboard clock low 
                                					; 7: 0=enable kbrd 
 14EC                           TMRIS1: 
 14EC  FB                       		sti 
 14ED  F6 06 0719 R 02          		test	EVTSET,	2	; Speaker on? 
 14F2  74 1D                    		jz	short loc_64EC 
 14F4  C6 06 14D2 R 02          		mov	byte_64AD, 2 
 14F9  83 3E 14D0 R 00          		cmp	word_64AB, 0 
 14FE  75 13                    		jnz	short loc_64EF 
 1500  80 3E 14CF R 00          		cmp	byte_64AA, 0 
 1505  75 0C                    		jnz	short loc_64EF 
 1507  8B 36 14C9 R             		mov	si, CURNOT 
 150B  3B 36 14CB R             		cmp	si, NOTPTR 
 150F  75 27                    		jnz	short loc_6514 
 1511                           loc_64EC: 
 1511  EB 75                    		jmp	short loc_6564 
 1513                           loc_64EF: 
 1513  FF 0E 14D0 R             		dec	word_64AB 
 1517  75 6F                    		jnz	short loc_6564 
 1519  FE 0E 14CF R             		dec	byte_64AA 
 151D  79 69                    		jns	short loc_6564 
 151F  8B 36 14C9 R             		mov	si, CURNOT 
 1523  3B 36 14CB R             		cmp	si, NOTPTR 
 1527  75 13                    		jnz	short loc_6518 
 1529  80 26 0719 R FD          		and	EVTSET,	0FDh	; Clear	speaker	event bit 
 152E  FA                       		cli 
 152F  E4 61                    		in	al, 61h		; PC/XT	PPI port B bits: 
                                					; 0: Tmr 2 gate	��� OR	03H=spkr ON 
                                					; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF 
                                					; 3: 1=read high switches 
                                					; 4: 0=enable RAM parity checking 
                                					; 5: 0=enable I/O channel check 
                                					; 6: 0=hold keyboard clock low 
                                					; 7: 0=enable kbrd 
 1531  24 FD                    		and	al, 0FDh 
 1533  E6 61                    		out	61h, al		; PC/XT	PPI port B bits: 
                                					; 0: Tmr 2 gate	��� OR	03H=spkr ON 
                                					; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF 
                                					; 3: 1=read high switches 
                                					; 4: 0=enable RAM parity checking 
                                					; 5: 0=enable I/O channel check 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-78
                                                            

                                					; 6: 0=hold keyboard clock low 
                                					; 7: 0=enable kbrd 
 1535  FB                       		sti 
 1536  EB 50                    		jmp	short loc_6564 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 1538                           loc_6514: 
 1538  B0 B6                    		mov	al, 0B6h 
 153A  E6 43                    		out	43h, al		; Timer	8253-5 (AT: 8254.2). 
 153C                           loc_6518: 
 153C  BB 1445 R                		mov	bx, offset NTARRY 
 153F  8B 00                    		mov	ax, [bx+si] 
 1541  0B C0                    		or	ax, ax 
 1543  75 07                    		jnz	short loc_6528 
 1545  FA                       		cli 
 1546  E4 61                    		in	al, 61h		; PC/XT	PPI port B bits: 
                                					; 0: Tmr 2 gate	��� OR	03H=spkr ON 
                                					; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF 
                                					; 3: 1=read high switches 
                                					; 4: 0=enable RAM parity checking 
                                					; 5: 0=enable I/O channel check 
                                					; 6: 0=hold keyboard clock low 
                                					; 7: 0=enable kbrd 
 1548  24 FD                    		and	al, 0FDh 
 154A  EB 0B                    		jmp	short loc_6533 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 154C                           loc_6528: 
 154C  E6 42                    		out	42h, al		; Timer	8253-5 (AT: 8254.2). 
 154E  8A C4                    		mov	al, ah 
 1550  E6 42                    		out	42h, al		; Timer	8253-5 (AT: 8254.2). 
 1552  FA                       		cli 
 1553  E4 61                    		in	al, 61h		; PC/XT	PPI port B bits: 
                                					; 0: Tmr 2 gate	��� OR	03H=spkr ON 
                                					; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF 
                                					; 3: 1=read high switches 
                                					; 4: 0=enable RAM parity checking 
                                					; 5: 0=enable I/O channel check 
                                					; 6: 0=hold keyboard clock low 
                                					; 7: 0=enable kbrd 
 1555  0C 03                    		or	al, 3 
 1557                           loc_6533: 
 1557  E6 61                    		out	61h, al		; PC/XT	PPI port B bits: 
                                					; 0: Tmr 2 gate	��� OR	03H=spkr ON 
                                					; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF 
                                					; 3: 1=read high switches 
                                					; 4: 0=enable RAM parity checking 
                                					; 5: 0=enable I/O channel check 
                                					; 6: 0=hold keyboard clock low 
                                					; 7: 0=enable kbrd 
 1559  FB                       		sti 
 155A  46                       		inc	si 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-79
                                                            

 155B  46                       		inc	si 
 155C  8B 00                    		mov	ax, [bx+si] 
 155E  46                       		inc	si 
 155F  46                       		inc	si 
 1560  E8 16DD R                		call	NXTNOT 
 1563  89 36 14C9 R             		mov	CURNOT,	si 
 1567  BB 1746                  		mov	bx, 5958 
 156A  F7 E3                    		mul	bx 
 156C  B3 00                    		mov	bl, 0 
 156E  D1 E0                    		shl	ax, 1 
 1570  D1 D2                    		rcl	dx, 1 
 1572  D1 E0                    		shl	ax, 1 
 1574  D1 D2                    		rcl	dx, 1 
 1576  D1 E0                    		shl	ax, 1 
 1578  D1 D2                    		rcl	dx, 1 
 157A  D1 E0                    		shl	ax, 1 
 157C  D1 D2                    		rcl	dx, 1 
 157E  D1 D3                    		rcl	bx, 1 
 1580  88 1E 14CF R             		mov	byte_64AA, bl 
 1584  89 16 14D0 R             		mov	word_64AB, dx 
 1588                           loc_6564: 
 1588  FE 0E 14D3 R             		dec	ISRCNT 
 158C  79 0B                    		jns	short CHKSTP 
 158E  B8 0800                  		mov	ax, 2048	; 65536/32 
 1591  E6 40                    		out	40h, al		; Timer	8253-5 (AT: 8254.2). 
 1593  8A C4                    		mov	al, ah 
 1595  E6 40                    		out	40h, al		; Timer	8253-5 (AT: 8254.2). 
 1597  EB 26                    		jmp	short TMRRST 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 1599                           CHKSTP: 
 1599  75 33                    		jnz	short TMRISX 
 159B  F6 06 0719 R 02          		test	EVTSET,	2	; Speaker still	on? 
 15A0  75 1D                    		jnz	short TMRRST	; If so, keep going. 
 15A2  FE 0E 14D2 R             		dec	byte_64AD 
 15A6  75 17                    		jnz	short TMRRST 
 15A8  33 C0                    		xor	ax, ax		; Reset	timer interval to normal 
 15AA  E6 40                    		out	40h, al		; Timer	8253-5 (AT: 8254.2). 
 15AC  E6 40                    		out	40h, al		; Timer	8253-5 (AT: 8254.2). 
 15AE  C5 16 14D4 R             		lds	dx, OLDTMI	; Restore old interrupt	vector
				 
                                		assume ds:nothing 
 15B2  1E                       		push	ds 
 15B3  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 15B5  89 16 0020               		mov	ds:20h,	dx 
 15B9  58                       		pop	ax 
 15BA  A3 0022                  		mov	ds:22h,	ax 
 15BD  EB 05                    		jmp	short TMRCHN 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 15BF                           TMRRST: 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-80
                                                            

 15BF  C6 06 14D3 R 20          		mov	ds:ISRCNT, 32	; Timer	ticks 32x faster; r
				estart period. 
 15C4                           TMRCHN: 
 15C4  1F                       		pop	ds 
                                		assume ds:nothing 
 15C5  5E                       		pop	si 
 15C6  5A                       		pop	dx 
 15C7  5B                       		pop	bx 
 15C8  58                       		pop	ax 
 15C9  2E: FF 2E 14D4 R         		jmp	cs:OLDTMI	; Chain	to previous timer ISR 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 15CE                           TMRISX: 
 15CE  1F                       		pop	ds 
 15CF  5E                       		pop	si 
 15D0  5A                       		pop	dx 
 15D1  5B                       		pop	bx 
 15D2  B0 20                    		mov	al, 20h		; Send EOI 
 15D4  E6 20                    		out	20h, al		; Interrupt controller,	8259A. 
 15D6  58                       		pop	ax 
 15D7  CF                       		iret 
                                TMRISR		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                ; Queues note for execution, saves all regs. 
                                ; On entry: 
                                ;   AL = voice (0=foreground, 1=back, -1=off) 
                                ;   CX = frequency 
                                ;   DX = duration (1=18.7ms) 
                                ; 
                                 
 15D8                           DONOTE		proc near 
 15D8  1E                       		push	ds 
 15D9  53                       		push	bx 
 15DA  56                       		push	si 
 15DB  0E                       		push	cs 
 15DC  1F                       		pop	ds 
                                		assume ds:CSEG 
 15DD  3C FF                    		cmp	al, -1		; Note off? 
 15DF  75 21                    		jnz	short DOPLAY 
 15E1  F6 06 0719 R 02          		test	EVTSET,	2	; Speaker on? 
 15E6  74 15                    		jz	short DONOTX 
 15E8  FA                       		cli 
 15E9  8B 1E 14CB R             		mov	bx, NOTPTR 
 15ED  89 1E 14C9 R             		mov	CURNOT,	bx 
 15F1  80 26 0719 R FD          		and	EVTSET,	0FDh	; Clear	event bit 
 15F6  E4 61                    		in	al, 61h		; PC/XT	PPI port B bits: 
                                					; 0: Tmr 2 gate	��� OR	03H=spkr ON 
                                					; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF 
                                					; 3: 1=read high switches 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-81
                                                            

                                					; 4: 0=enable RAM parity checking 
                                					; 5: 0=enable I/O channel check 
                                					; 6: 0=hold keyboard clock low 
                                					; 7: 0=enable kbrd 
 15F8  24 FD                    		and	al, 0FDh 
 15FA  E6 61                    		out	61h, al		; PC/XT	PPI port B bits: 
                                					; 0: Tmr 2 gate	��� OR	03H=spkr ON 
                                					; 1: Tmr 2 data	ͼ  AND	0fcH=spkr OFF 
                                					; 3: 1=read high switches 
                                					; 4: 0=enable RAM parity checking 
                                					; 5: 0=enable I/O channel check 
                                					; 6: 0=hold keyboard clock low 
                                					; 7: 0=enable kbrd 
 15FC  FB                       		sti 
 15FD                           DONOTX: 
 15FD  F8                       		clc 
 15FE  5E                       		pop	si 
 15FF  5B                       		pop	bx 
 1600  1F                       		pop	ds 
                                		assume ds:nothing 
 1601  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 1602                           DOPLAY: 
 1602  50                       		push	ax 
 1603  52                       		push	dx 
 1604  B8 0013                  		mov	ax, 19 
 1607  3B C1                    		cmp	ax, cx 
 1609  72 04                    		jb	short DODIV 
 160B  33 C0                    		xor	ax, ax 
 160D  EB 08                    		jmp	short NXNOTE 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 160F                           DODIV: 
 160F  BA 0012                  		mov	dx, 12h 
 1612  B8 34DC                  		mov	ax, 34DCh 
 1615  F7 F1                    		div	cx		; Divide 1,193,180 by CX 
 1617                           NXNOTE: 
 1617  50                       		push	ax 
 1618  1E                       		push	ds 
 1619  33 C0                    		xor	ax, ax 
 161B  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 161D  BB 0471                  		mov	bx, 471h	; Ctrl+Break flag 
 1620  88 07                    		mov	[bx], al	; Zero out the flag 
 1622  1F                       		pop	ds 
                                		assume ds:nothing 
 1623  8B 36 14CB R             		mov	si, ds:NOTPTR 
 1627  56                       		push	si 
 1628  83 C6 04                 		add	si, 4 
 162B  E8 16DD R                		call	NXTNOT 
 162E                           WAITLP: 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-82
                                                            

 162E  1E                       		push	ds 
 162F  33 C0                    		xor	ax, ax 
 1631  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 1633  BB 0471                  		mov	bx, 471h	; Ctrl+Break flag 
 1636  3A 07                    		cmp	al, [bx]	; Break	flag set? 
 1638  1F                       		pop	ds 
                                		assume ds:nothing 
 1639  75 06                    		jnz	short WTDONE 
 163B  3B 36 14C9 R             		cmp	si, ds:CURNOT 
 163F  74 ED                    		jz	short WAITLP 
 1641                           WTDONE: 
 1641  5E                       		pop	si 
 1642  58                       		pop	ax 
 1643  BB 1445 R                		mov	bx, offset NTARRY 
 1646  89 00                    		mov	[bx+si], ax 
 1648  46                       		inc	si 
 1649  46                       		inc	si 
 164A  58                       		pop	ax 
 164B  89 00                    		mov	[bx+si], ax 
 164D  46                       		inc	si 
 164E  46                       		inc	si 
 164F  E8 16DD R                		call	NXTNOT 
 1652  89 36 14CB R             		mov	ds:NOTPTR, si 
 1656  8B F0                    		mov	si, ax 
 1658  FA                       		cli 
 1659  F6 06 0719 R 02          		test	ds:EVTSET, 2	; Speaker on? 
 165E  75 37                    		jnz	short TMISON 
 1660  B8 0001                  		mov	ax, 1 
 1663  A3 14D0 R                		mov	ds:word_64AB, ax 
 1666  48                       		dec	ax 
 1667  A2 14CF R                		mov	ds:byte_64AA, al 
 166A  3A 06 14D3 R             		cmp	al, ds:ISRCNT	; Is the timer ISR still go
				ing? 
 166E  75 27                    		jnz	short TMISON	; If yes, no need to install
				 ISR 
 1670  FE 0E 14D3 R             		dec	ds:ISRCNT	; ISRCNT was 0,	now -1 
 1674  06                       		push	es 
 1675  1E                       		push	ds 
 1676  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 1678  C4 06 0020               		les	ax, DWORD PTR DS:[20h]	; Install timer	IS
				R (IRQ0, vector 08h) 
 167C  BA 14D8 R                		mov	dx, offset TMRISR 
 167F  89 16 0020               		mov	ds:20h,	dx 
 1683  0E                       		push	cs 
 1684  5A                       		pop	dx 
 1685  89 16 0022               		mov	ds:22h,	dx 
 1689  1F                       		pop	ds 
                                		assume ds:nothing 
 168A  A3 14D4 R                		mov	word ptr ds:OLDTMI, ax 
 168D  8C C0                    		mov	ax, es 
 168F  A3 14D6 R                		mov	word ptr ds:OLDTMI+2, ax 
 1692  07                       		pop	es 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-83
                                                            

 1693  B0 B6                    		mov	al, 0B6h 
 1695  E6 43                    		out	43h, al		; Timer	8253-5 (AT: 8254.2). 
 1697                           TMISON: 
 1697  80 0E 0719 R 02          		or	ds:EVTSET, 2	; Speaker on! 
 169C  FB                       		sti 
 169D  58                       		pop	ax 
 169E  3C 00                    		cmp	al, 0		; Play in the foreground? 
 16A0  75 38                    		jnz	short GONOTX 
 16A2                           FGNDLP: 
 16A2  1E                       		push	ds 
 16A3  33 C0                    		xor	ax, ax 
 16A5  8E D8                    		mov	ds, ax 
                                		assume ds:nothing 
 16A7  BB 0471                  		mov	bx, 471h	; Ctrl+Break flag 
 16AA  3A 07                    		cmp	al, [bx]	; Break	flag set? 
 16AC  1F                       		pop	ds 
                                		assume ds:nothing 
 16AD  75 2B                    		jnz	short GONOTX 
 16AF  A1 14C9 R                		mov	ax, ds:CURNOT 
 16B2  3B 06 14CB R             		cmp	ax, ds:NOTPTR 
 16B6  74 22                    		jz	short GONOTX 
 16B8  0B F6                    		or	si, si 
 16BA  74 E6                    		jz	short FGNDLP 
 16BC  05 0004                  		add	ax, 4		; Advance pointer 
 16BF  3D 0084                  		cmp	ax, 84h		; Wrapping around? 
 16C2  75 02                    		jnz	short HAVPTR 
 16C4  33 C0                    		xor	ax, ax		; If yes, pointer wraps	to zero 
 16C6                           HAVPTR: 
 16C6  3B 06 14CB R             		cmp	ax, ds:NOTPTR 
 16CA  75 D6                    		jnz	short FGNDLP 
 16CC  80 3E 14CF R 00          		cmp	ds:byte_64AA, 0 
 16D1  75 CF                    		jnz	short FGNDLP 
 16D3  83 3E 14D0 R 06          		cmp	ds:word_64AB, 6 
 16D8  73 C8                    		jnb	short FGNDLP 
 16DA                           GONOTX: 
 16DA  E9 15FD R                		jmp	DONOTX 
                                DONOTE		endp 
                                 
                                 
                                ; =============== S U B	R O U T	I N E =========
				============================== 
                                 
                                 
 16DD                           NXTNOT		proc near 
 16DD  81 FE 0084               		cmp	si, 84h 
 16E1  74 01                    		jz	short WRAP 
 16E3  C3                       		ret 
                                ; ---------------------------------------------
				------------------------------ 
                                 
 16E4                           WRAP: 
 16E4  BE 0000                  		mov	si, 0 
 16E7  C3                       		ret 
                                NXTNOT		endp 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Page     1-84
                                                            

                                 
 16E8                           CSEG    ENDS 
                                        END 
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Symbols-1
                                                             

Segments and Groups:

                N a m e         	Size	Align	Combine Class

CSEG . . . . . . . . . . . . . .  	16E8	PARA	PUBLIC	'CODESG'
DSEG . . . . . . . . . . . . . .  	003A	PARA	PUBLIC	'DATASG'

Symbols:            

                N a m e         	Type	Value	Attr         

BADFNM . . . . . . . . . . . . .  	L NEAR	0408	CSEG
BADMAP . . . . . . . . . . . . .  	L NEAR	009C	CSEG
BASDAT . . . . . . . . . . . . .  	L NEAR	0196	CSEG
BAUDTB . . . . . . . . . . . . .  	L WORD 	01DF	CSEG
BRKFLG . . . . . . . . . . . . .  	L BYTE 	071B	CSEG
BYTE_5095  . . . . . . . . . . .  	L BYTE 	00D7	CSEG
BYTE_64AA  . . . . . . . . . . .  	L BYTE 	14CF	CSEG
BYTE_64AD  . . . . . . . . . . .  	L BYTE 	14D2	CSEG

CBFSEG . . . . . . . . . . . . .  	L WORD 	0253	CSEG
CBFSIZ . . . . . . . . . . . . .  	L WORD 	0255	CSEG
CBKINT . . . . . . . . . . . . .  	L WORD 	0001	DSEG
CBREAK . . . . . . . . . . . . .  	L NEAR	085D	CSEG
CBRKSG . . . . . . . . . . . . .  	L WORD 	0003	DSEG
CHKESC . . . . . . . . . . . . .  	L NEAR	087E	CSEG
CHKSTP . . . . . . . . . . . . .  	L NEAR	1599	CSEG
CKCOM1 . . . . . . . . . . . . .  	L NEAR	0399	CSEG
CKCOM2 . . . . . . . . . . . . .  	L NEAR	03D3	CSEG
CLREOL . . . . . . . . . . . . .  	N PROC	0BB4	CSEG	Global	Length = 002C
CLREOX . . . . . . . . . . . . .  	L NEAR	0BDB	CSEG
CLRSCN . . . . . . . . . . . . .  	N PROC	0B87	CSEG	Global	Length = 002D
CM1CTL . . . . . . . . . . . . .  	L BYTE 	020F	CSEG
CM1ISR . . . . . . . . . . . . .  	L NEAR	025F	CSEG
CM2CTL . . . . . . . . . . . . .  	L BYTE 	0231	CSEG
CM2ISR . . . . . . . . . . . . .  	F PROC	0265	CSEG	Length = 0117
CMPREP . . . . . . . . . . . . .  	N PROC	06FE	CSEG	Length = 001B
COMDLY . . . . . . . . . . . . .  	N PROC	06E8	CSEG	Length = 0016
COMEOI . . . . . . . . . . . . .  	L NEAR	02B8	CSEG
COMERR . . . . . . . . . . . . .  	L NEAR	040D	CSEG
COMISR . . . . . . . . . . . . .  	L NEAR	0269	CSEG
COMTBL . . . . . . . . . . . . .  	L WORD 	020B	CSEG
CSAVEA . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
CSAVEM . . . . . . . . . . . . .  	V WORD 	0000	DSEG	External
CSRATR . . . . . . . . . . . . .  	N PROC	0C91	CSEG	Global	Length = 0034
CSRDSP . . . . . . . . . . . . .  	N PROC	0BE0	CSEG	Global	Length = 0050
CSRERR . . . . . . . . . . . . .  	L NEAR	0CC2	CSEG
CTLBRK . . . . . . . . . . . . .  	F PROC	073E	CSEG	Length = 0007
CURNOT . . . . . . . . . . . . .  	L WORD 	14C9	CSEG
CVMODE . . . . . . . . . . . . .  	L BYTE 	000F	DSEG
CVPAGE . . . . . . . . . . . . .  	L BYTE 	0009	DSEG

DEBUG  . . . . . . . . . . . . .  	Text  		
DELAY  . . . . . . . . . . . . .  	L NEAR	06EE	CSEG
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Symbols-2
                                                             

DOCLRS . . . . . . . . . . . . .  	L NEAR	0B8A	CSEG
DODIV  . . . . . . . . . . . . .  	L NEAR	160F	CSEG
DONOTE . . . . . . . . . . . . .  	N PROC	15D8	CSEG	Global	Length = 0105
DONOTX . . . . . . . . . . . . .  	L NEAR	15FD	CSEG
DOPFLT . . . . . . . . . . . . .  	L NEAR	0173	CSEG
DOPLAY . . . . . . . . . . . . .  	L NEAR	1602	CSEG
DOSCRL . . . . . . . . . . . . .  	N PROC	0AFD	CSEG	Length = 0023
DOSCRX . . . . . . . . . . . . .  	L NEAR	0B1C	CSEG
DOVEC  . . . . . . . . . . . . .  	L NEAR	07CF	CSEG
DOWNC  . . . . . . . . . . . . .  	N PROC	0F80	CSEG	Global	Length = 0016
DOWNCX . . . . . . . . . . . . .  	L NEAR	0F8E	CSEG

EDTMAP . . . . . . . . . . . . .  	N PROC	096E	CSEG	Global	Length = 0058
EQUIP  . . . . . . . . . . . . .  	L BYTE 	0756	CSEG
EVTSET . . . . . . . . . . . . .  	L BYTE 	0719	CSEG

FETCHC . . . . . . . . . . . . .  	N PROC	0F40	CSEG	Global	Length = 0008
FGNDLP . . . . . . . . . . . . .  	L NEAR	16A2	CSEG
FKYADV . . . . . . . . . . . . .  	N PROC	0F35	CSEG	Global	Length = 0003
FKYFMT . . . . . . . . . . . . .  	N PROC	0F27	CSEG	Global	Length = 000E
FKYFMX . . . . . . . . . . . . .  	L NEAR	0F34	CSEG
FNAND  . . . . . . . . . . . . .  	L NEAR	11DA	CSEG
FNINV  . . . . . . . . . . . . .  	L NEAR	11DD	CSEG
FNOR . . . . . . . . . . . . . .  	L NEAR	11D7	CSEG
FNSET  . . . . . . . . . . . . .  	L NEAR	11DF	CSEG
FNXOR  . . . . . . . . . . . . .  	L NEAR	11E2	CSEG

GETFBC . . . . . . . . . . . . .  	N PROC	00B9	CSEG	Global	Length = 001E
GETHED . . . . . . . . . . . . .  	N PROC	0073	CSEG	Global	Length = 0006
GONOTX . . . . . . . . . . . . .  	L NEAR	16DA	CSEG
GOSCUR . . . . . . . . . . . . .  	L NEAR	0C20	CSEG
GOSRST . . . . . . . . . . . . .  	L NEAR	0F11	CSEG
GRPINI . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
GRPSIZ . . . . . . . . . . . . .  	N PROC	011D	CSEG	Global	Length = 000D
GSTCUR . . . . . . . . . . . . .  	L NEAR	0CBF	CSEG
GTASPC . . . . . . . . . . . . .  	N PROC	10A5	CSEG	Global	Length = 0014
GTASPX . . . . . . . . . . . . .  	L NEAR	10B8	CSEG
GWINI  . . . . . . . . . . . . .  	N PROC	0757	CSEG	Global	Length = 0068
GWINIX . . . . . . . . . . . . .  	L NEAR	07BC	CSEG
GWTERM . . . . . . . . . . . . .  	N PROC	07DC	CSEG	Global	Length = 0063

HAVBSZ . . . . . . . . . . . . .  	L NEAR	038A	CSEG
HAVPTR . . . . . . . . . . . . .  	L NEAR	16C6	CSEG
HEIGHT . . . . . . . . . . . . .  	L NEAR	0126	CSEG

INFMAP . . . . . . . . . . . . .  	N PROC	0965	CSEG	Global	Length = 0009
INICMX . . . . . . . . . . . . .  	L NEAR	052E	CSEG
INICOM . . . . . . . . . . . . .  	N PROC	0412	CSEG	Global	Length = 0120
INILPT . . . . . . . . . . . . .  	L NEAR	0787	CSEG
INKMAP . . . . . . . . . . . . .  	N PROC	0903	CSEG	Global	Length = 0062
INMAPX . . . . . . . . . . . . .  	L NEAR	096C	CSEG
ISRCNT . . . . . . . . . . . . .  	L BYTE 	14D3	CSEG
ISRDSP . . . . . . . . . . . . .  	L WORD 	0257	CSEG
ISREVT . . . . . . . . . . . . .  	L BYTE 	131E	CSEG
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Symbols-3
                                                             

ISRFN0 . . . . . . . . . . . . .  	L NEAR	0342	CSEG
ISRFN1 . . . . . . . . . . . . .  	L NEAR	0309	CSEG
ISRFN2 . . . . . . . . . . . . .  	L NEAR	0287	CSEG
ISRFN3 . . . . . . . . . . . . .  	L NEAR	0336	CSEG
ISRX . . . . . . . . . . . . . .  	L NEAR	0300	CSEG

KEYINP . . . . . . . . . . . . .  	N PROC	083F	CSEG	Global	Length = 008B
KEYINX . . . . . . . . . . . . .  	L NEAR	0889	CSEG
KYBCLR . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External

LCPY . . . . . . . . . . . . . .  	N PROC	0CC5	CSEG	Global	Length = 0008
LEFTC  . . . . . . . . . . . . .  	N PROC	0F59	CSEG	Global	Length = 0011
LEFTCX . . . . . . . . . . . . .  	L NEAR	0F68	CSEG
LOC_5044 . . . . . . . . . . . .  	L NEAR	0086	CSEG
LOC_5060 . . . . . . . . . . . .  	L NEAR	00A2	CSEG
LOC_506E . . . . . . . . . . . .  	L NEAR	00B0	CSEG
LOC_5073 . . . . . . . . . . . .  	L NEAR	00B5	CSEG
LOC_50CB . . . . . . . . . . . .  	L NEAR	010D	CSEG
LOC_50CE . . . . . . . . . . . .  	L NEAR	0110	CSEG
LOC_5187 . . . . . . . . . . . .  	L NEAR	01C9	CSEG
LOC_518F . . . . . . . . . . . .  	L NEAR	01D1	CSEG
LOC_5192 . . . . . . . . . . . .  	L NEAR	01D4	CSEG
LOC_523B . . . . . . . . . . . .  	L NEAR	027A	CSEG
LOC_5257 . . . . . . . . . . . .  	L NEAR	0296	CSEG
LOC_5262 . . . . . . . . . . . .  	L NEAR	02A1	CSEG
LOC_52DC . . . . . . . . . . . .  	L NEAR	031B	CSEG
LOC_52F2 . . . . . . . . . . . .  	L NEAR	0331	CSEG
LOC_5330 . . . . . . . . . . . .  	L NEAR	036F	CSEG
LOC_5333 . . . . . . . . . . . .  	L NEAR	0372	CSEG
LOC_5418 . . . . . . . . . . . .  	L NEAR	0457	CSEG
LOC_542A . . . . . . . . . . . .  	L NEAR	0469	CSEG
LOC_543D . . . . . . . . . . . .  	L NEAR	047C	CSEG
LOC_5446 . . . . . . . . . . . .  	L NEAR	0485	CSEG
LOC_5457 . . . . . . . . . . . .  	L NEAR	0496	CSEG
LOC_5463 . . . . . . . . . . . .  	L NEAR	04A2	CSEG
LOC_546F . . . . . . . . . . . .  	L NEAR	04AE	CSEG
LOC_5479 . . . . . . . . . . . .  	L NEAR	04B8	CSEG
LOC_54DC . . . . . . . . . . . .  	L NEAR	051B	CSEG
LOC_551B . . . . . . . . . . . .  	L NEAR	055A	CSEG
LOC_552C . . . . . . . . . . . .  	L NEAR	056B	CSEG
LOC_5555 . . . . . . . . . . . .  	L NEAR	0594	CSEG
LOC_557D . . . . . . . . . . . .  	L NEAR	05BC	CSEG
LOC_55A3 . . . . . . . . . . . .  	L NEAR	05E2	CSEG
LOC_55B5 . . . . . . . . . . . .  	L NEAR	05F4	CSEG
LOC_55D4 . . . . . . . . . . . .  	L NEAR	0613	CSEG
LOC_55DD . . . . . . . . . . . .  	L NEAR	061C	CSEG
LOC_55DF . . . . . . . . . . . .  	L NEAR	061E	CSEG
LOC_55F5 . . . . . . . . . . . .  	L NEAR	0634	CSEG
LOC_55F9 . . . . . . . . . . . .  	L NEAR	0638	CSEG
LOC_5606 . . . . . . . . . . . .  	L NEAR	0644	CSEG
LOC_560D . . . . . . . . . . . .  	L NEAR	064B	CSEG
LOC_563C . . . . . . . . . . . .  	L NEAR	067A	CSEG
LOC_5654 . . . . . . . . . . . .  	L NEAR	0692	CSEG
LOC_5662 . . . . . . . . . . . .  	L NEAR	06A0	CSEG
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Symbols-4
                                                             

LOC_5673 . . . . . . . . . . . .  	L NEAR	06B1	CSEG
LOC_5684 . . . . . . . . . . . .  	L NEAR	06C2	CSEG
LOC_568D . . . . . . . . . . . .  	L NEAR	06CB	CSEG
LOC_5696 . . . . . . . . . . . .  	L NEAR	06D4	CSEG
LOC_569F . . . . . . . . . . . .  	L NEAR	06DD	CSEG
LOC_56A6 . . . . . . . . . . . .  	L NEAR	06E4	CSEG
LOC_56EE . . . . . . . . . . . .  	L NEAR	0727	CSEG
LOC_57E9 . . . . . . . . . . . .  	L NEAR	0822	CSEG
LOC_5871 . . . . . . . . . . . .  	L NEAR	08AA	CSEG
LOC_5884 . . . . . . . . . . . .  	L NEAR	08BD	CSEG
LOC_58D3 . . . . . . . . . . . .  	L NEAR	090C	CSEG
LOC_58DA . . . . . . . . . . . .  	L NEAR	0913	CSEG
LOC_58DC . . . . . . . . . . . .  	L NEAR	0915	CSEG
LOC_58DE . . . . . . . . . . . .  	L NEAR	0917	CSEG
LOC_58EA . . . . . . . . . . . .  	L NEAR	0923	CSEG
LOC_58F2 . . . . . . . . . . . .  	L NEAR	092B	CSEG
LOC_590A . . . . . . . . . . . .  	L NEAR	0943	CSEG
LOC_5912 . . . . . . . . . . . .  	L NEAR	094B	CSEG
LOC_5928 . . . . . . . . . . . .  	L NEAR	0961	CSEG
LOC_594D . . . . . . . . . . . .  	L NEAR	0986	CSEG
LOC_595D . . . . . . . . . . . .  	L NEAR	0996	CSEG
LOC_5965 . . . . . . . . . . . .  	L NEAR	099E	CSEG
LOC_5983 . . . . . . . . . . . .  	L NEAR	09BC	CSEG
LOC_5989 . . . . . . . . . . . .  	L NEAR	09C2	CSEG
LOC_598B . . . . . . . . . . . .  	L NEAR	09C4	CSEG
LOC_59D8 . . . . . . . . . . . .  	L NEAR	0A11	CSEG
LOC_59DB . . . . . . . . . . . .  	L NEAR	0A14	CSEG
LOC_5A06 . . . . . . . . . . . .  	L NEAR	0A3F	CSEG
LOC_5A35 . . . . . . . . . . . .  	L NEAR	0A6D	CSEG
LOC_5A4E . . . . . . . . . . . .  	L NEAR	0A86	CSEG
LOC_5A51 . . . . . . . . . . . .  	L NEAR	0A89	CSEG
LOC_5A57 . . . . . . . . . . . .  	L NEAR	0A8F	CSEG
LOC_5A6A . . . . . . . . . . . .  	L NEAR	0AA2	CSEG
LOC_5A6F . . . . . . . . . . . .  	L NEAR	0AA7	CSEG
LOC_5A82 . . . . . . . . . . . .  	L NEAR	0ABA	CSEG
LOC_5A89 . . . . . . . . . . . .  	L NEAR	0AC1	CSEG
LOC_5A9D . . . . . . . . . . . .  	L NEAR	0AD5	CSEG
LOC_5B42 . . . . . . . . . . . .  	L NEAR	0B7A	CSEG
LOC_5B45 . . . . . . . . . . . .  	L NEAR	0B7D	CSEG
LOC_5BC6 . . . . . . . . . . . .  	L NEAR	0BFE	CSEG
LOC_5BC9 . . . . . . . . . . . .  	L NEAR	0C01	CSEG
LOC_5BDB . . . . . . . . . . . .  	L NEAR	0C13	CSEG
LOC_5C14 . . . . . . . . . . . .  	L NEAR	0C4C	CSEG
LOC_5C26 . . . . . . . . . . . .  	L NEAR	0C5E	CSEG
LOC_5C37 . . . . . . . . . . . .  	L NEAR	0C6F	CSEG
LOC_5C46 . . . . . . . . . . . .  	L NEAR	0C7E	CSEG
LOC_5C53 . . . . . . . . . . . .  	L NEAR	0C8B	CSEG
LOC_5C63 . . . . . . . . . . . .  	L NEAR	0C9B	CSEG
LOC_5C6F . . . . . . . . . . . .  	L NEAR	0CA7	CSEG
LOC_5C79 . . . . . . . . . . . .  	L NEAR	0CB1	CSEG
LOC_5CD8 . . . . . . . . . . . .  	L NEAR	0D10	CSEG
LOC_5CDB . . . . . . . . . . . .  	L NEAR	0D13	CSEG
LOC_5CE6 . . . . . . . . . . . .  	L NEAR	0D1E	CSEG
LOC_5CEE . . . . . . . . . . . .  	L NEAR	0D26	CSEG
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Symbols-5
                                                             

LOC_5D1D . . . . . . . . . . . .  	L NEAR	0D55	CSEG
LOC_5D41 . . . . . . . . . . . .  	L NEAR	0D79	CSEG
LOC_5D45 . . . . . . . . . . . .  	L NEAR	0D7D	CSEG
LOC_5D59 . . . . . . . . . . . .  	L NEAR	0D91	CSEG
LOC_5D71 . . . . . . . . . . . .  	L NEAR	0DA9	CSEG
LOC_5D79 . . . . . . . . . . . .  	L NEAR	0DB1	CSEG
LOC_5D80 . . . . . . . . . . . .  	L NEAR	0DB8	CSEG
LOC_5D83 . . . . . . . . . . . .  	L NEAR	0DBB	CSEG
LOC_5D99 . . . . . . . . . . . .  	L NEAR	0DD1	CSEG
LOC_5D9E . . . . . . . . . . . .  	L NEAR	0DD6	CSEG
LOC_5DA3 . . . . . . . . . . . .  	L NEAR	0DDB	CSEG
LOC_5DC0 . . . . . . . . . . . .  	L NEAR	0DF8	CSEG
LOC_5DC3 . . . . . . . . . . . .  	L NEAR	0DFB	CSEG
LOC_5DD6 . . . . . . . . . . . .  	L NEAR	0E0E	CSEG
LOC_5DDF . . . . . . . . . . . .  	L NEAR	0E17	CSEG
LOC_5DEA . . . . . . . . . . . .  	L NEAR	0E22	CSEG
LOC_5DF3 . . . . . . . . . . . .  	L NEAR	0E2B	CSEG
LOC_5DFC . . . . . . . . . . . .  	L NEAR	0E34	CSEG
LOC_5E08 . . . . . . . . . . . .  	L NEAR	0E40	CSEG
LOC_5E1E . . . . . . . . . . . .  	L NEAR	0E56	CSEG
LOC_5E23 . . . . . . . . . . . .  	L NEAR	0E5B	CSEG
LOC_5E3B . . . . . . . . . . . .  	L NEAR	0E73	CSEG
LOC_5E46 . . . . . . . . . . . .  	L NEAR	0E7E	CSEG
LOC_5E4C . . . . . . . . . . . .  	L NEAR	0E84	CSEG
LOC_5E67 . . . . . . . . . . . .  	L NEAR	0E9F	CSEG
LOC_5EA1 . . . . . . . . . . . .  	L NEAR	0ED9	CSEG
LOC_5EAF . . . . . . . . . . . .  	L NEAR	0EE7	CSEG
LOC_5F43 . . . . . . . . . . . .  	L NEAR	0F7B	CSEG
LOC_5F6E . . . . . . . . . . . .  	L NEAR	0FA6	CSEG
LOC_5F7D . . . . . . . . . . . .  	L NEAR	0FB5	CSEG
LOC_5F82 . . . . . . . . . . . .  	L NEAR	0FBA	CSEG
LOC_5F85 . . . . . . . . . . . .  	L NEAR	0FBD	CSEG
LOC_5FA1 . . . . . . . . . . . .  	L NEAR	0FD9	CSEG
LOC_600A . . . . . . . . . . . .  	L NEAR	1042	CSEG
LOC_600E . . . . . . . . . . . .  	L NEAR	1046	CSEG
LOC_6027 . . . . . . . . . . . .  	L NEAR	105F	CSEG
LOC_6035 . . . . . . . . . . . .  	L NEAR	106D	CSEG
LOC_603C . . . . . . . . . . . .  	L NEAR	1074	CSEG
LOC_6052 . . . . . . . . . . . .  	L NEAR	108A	CSEG
LOC_6056 . . . . . . . . . . . .  	L NEAR	108E	CSEG
LOC_6061 . . . . . . . . . . . .  	L NEAR	1099	CSEG
LOC_606B . . . . . . . . . . . .  	L NEAR	10A3	CSEG
LOC_60EC . . . . . . . . . . . .  	L NEAR	1124	CSEG
LOC_60F9 . . . . . . . . . . . .  	L NEAR	1131	CSEG
LOC_60FD . . . . . . . . . . . .  	L NEAR	1135	CSEG
LOC_6103 . . . . . . . . . . . .  	L NEAR	113B	CSEG
LOC_6137 . . . . . . . . . . . .  	L NEAR	116F	CSEG
LOC_6144 . . . . . . . . . . . .  	L NEAR	117C	CSEG
LOC_6148 . . . . . . . . . . . .  	L NEAR	1180	CSEG
LOC_6153 . . . . . . . . . . . .  	L NEAR	118B	CSEG
LOC_6172 . . . . . . . . . . . .  	L NEAR	11AA	CSEG
LOC_6183 . . . . . . . . . . . .  	L NEAR	11BB	CSEG
LOC_6199 . . . . . . . . . . . .  	L NEAR	11D1	CSEG
LOC_61C8 . . . . . . . . . . . .  	L NEAR	1200	CSEG
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Symbols-6
                                                             

LOC_61E1 . . . . . . . . . . . .  	L NEAR	1219	CSEG
LOC_61F7 . . . . . . . . . . . .  	L NEAR	122F	CSEG
LOC_61FF . . . . . . . . . . . .  	L NEAR	1237	CSEG
LOC_6221 . . . . . . . . . . . .  	L NEAR	1259	CSEG
LOC_6223 . . . . . . . . . . . .  	L NEAR	125B	CSEG
LOC_622C . . . . . . . . . . . .  	L NEAR	1264	CSEG
LOC_6234 . . . . . . . . . . . .  	L NEAR	126C	CSEG
LOC_623E . . . . . . . . . . . .  	L NEAR	1276	CSEG
LOC_624F . . . . . . . . . . . .  	L NEAR	1287	CSEG
LOC_6256 . . . . . . . . . . . .  	L NEAR	128E	CSEG
LOC_626D . . . . . . . . . . . .  	L NEAR	12A5	CSEG
LOC_6280 . . . . . . . . . . . .  	L NEAR	12B8	CSEG
LOC_629D . . . . . . . . . . . .  	L NEAR	12D5	CSEG
LOC_62A5 . . . . . . . . . . . .  	L NEAR	12DD	CSEG
LOC_62B7 . . . . . . . . . . . .  	L NEAR	12EF	CSEG
LOC_62B8 . . . . . . . . . . . .  	L NEAR	12F0	CSEG
LOC_62C5 . . . . . . . . . . . .  	L NEAR	12FD	CSEG
LOC_62D1 . . . . . . . . . . . .  	L NEAR	1309	CSEG
LOC_62D6 . . . . . . . . . . . .  	L NEAR	130E	CSEG
LOC_62DC . . . . . . . . . . . .  	L NEAR	1314	CSEG
LOC_639F . . . . . . . . . . . .  	L NEAR	13CD	CSEG
LOC_63A5 . . . . . . . . . . . .  	L NEAR	13D3	CSEG
LOC_64EC . . . . . . . . . . . .  	L NEAR	1511	CSEG
LOC_64EF . . . . . . . . . . . .  	L NEAR	1513	CSEG
LOC_6514 . . . . . . . . . . . .  	L NEAR	1538	CSEG
LOC_6518 . . . . . . . . . . . .  	L NEAR	153C	CSEG
LOC_6528 . . . . . . . . . . . .  	L NEAR	154C	CSEG
LOC_6533 . . . . . . . . . . . .  	L NEAR	1557	CSEG
LOC_6564 . . . . . . . . . . . .  	L NEAR	1588	CSEG
LPCOL  . . . . . . . . . . . . .  	L WORD 	132D	CSEG
LPDOWN . . . . . . . . . . . . .  	L WORD 	1325	CSEG
LPENQR . . . . . . . . . . . . .  	N PROC	1333	CSEG	Length = 0056
LPENQX . . . . . . . . . . . . .  	L NEAR	137B	CSEG
LPGX . . . . . . . . . . . . . .  	L WORD 	1327	CSEG
LPGY . . . . . . . . . . . . . .  	L WORD 	1329	CSEG
LPLCOL . . . . . . . . . . . . .  	L WORD 	1331	CSEG
LPLGX  . . . . . . . . . . . . .  	L WORD 	1321	CSEG
LPLGY  . . . . . . . . . . . . .  	L WORD 	1323	CSEG
LPLROW . . . . . . . . . . . . .  	L WORD 	132F	CSEG
LPNOFF . . . . . . . . . . . . .  	L NEAR	13A7	CSEG
LPNON  . . . . . . . . . . . . .  	L NEAR	13B2	CSEG
LPROW  . . . . . . . . . . . . .  	L WORD 	132B	CSEG
LPWSDN . . . . . . . . . . . . .  	L WORD 	131F	CSEG
LSTRIG . . . . . . . . . . . . .  	L BYTE 	071A	CSEG

MAPSUP . . . . . . . . . . . . .  	N PROC	09C7	CSEG	Global	Length = 0003
MAPXYC . . . . . . . . . . . . .  	N PROC	0FBF	CSEG	Global	Length = 003C
MASKS? . . . . . . . . . . . . .  	L BYTE 	0207	CSEG
MODES40  . . . . . . . . . . . .  	L BYTE 	0F17	CSEG
MODES80  . . . . . . . . . . . .  	L BYTE 	0F1F	CSEG

NOBRK  . . . . . . . . . . . . .  	L NEAR	0862	CSEG
NONASC . . . . . . . . . . . . .  	L NEAR	088E	CSEG
NOSWIT . . . . . . . . . . . . .  	L NEAR	1381	CSEG
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Symbols-7
                                                             

NOTPTR . . . . . . . . . . . . .  	L WORD 	14CB	CSEG
NOTTAB . . . . . . . . . . . . .  	L NEAR	08B1	CSEG
NREAD  . . . . . . . . . . . . .  	N PROC	1114	CSEG	Global	Length = 004B
NREADX . . . . . . . . . . . . .  	L NEAR	1159	CSEG
NSETCX . . . . . . . . . . . . .  	N PROC	1056	CSEG	Global	Length = 004F
NTARRY . . . . . . . . . . . . .  	L BYTE 	1445	CSEG	Length = 0084
NWRITE . . . . . . . . . . . . .  	N PROC	115F	CSEG	Global	Length = 0078
NXNOTE . . . . . . . . . . . . .  	L NEAR	1617	CSEG
NXTCHR . . . . . . . . . . . . .  	L NEAR	0B08	CSEG
NXTNOT . . . . . . . . . . . . .  	N PROC	16DD	CSEG	Length = 000B

OEMHED . . . . . . . . . . . . .  	L BYTE 	0017	CSEG
OFF_5101 . . . . . . . . . . . .  	L WORD 	0143	CSEG
OLDTMI . . . . . . . . . . . . .  	L DWORD	14D4	CSEG
ONEKEY . . . . . . . . . . . . .  	L NEAR	0887	CSEG
OVMODE . . . . . . . . . . . . .  	L BYTE 	0000	DSEG

PEKFLT . . . . . . . . . . . . .  	N PROC	015B	CSEG	Global	Length = 000E
PEKPOK . . . . . . . . . . . . .  	L BYTE 	012A	CSEG
PFLTX  . . . . . . . . . . . . .  	L NEAR	01D8	CSEG
PGDISP . . . . . . . . . . . . .  	L WORD 	10D4	CSEG
PGINIT . . . . . . . . . . . . .  	N PROC	10DE	CSEG	Global	Length = 0036
PGINIX . . . . . . . . . . . . .  	L NEAR	1113	CSEG
PIXSIZ . . . . . . . . . . . . .  	N PROC	10B9	CSEG	Global	Length = 0004
PNTINI . . . . . . . . . . . . .  	N PROC	11E5	CSEG	Global	Length = 000B
PNTINX . . . . . . . . . . . . .  	L NEAR	11EB	CSEG
POKFLT . . . . . . . . . . . . .  	N PROC	0169	CSEG	Global	Length = 0076
POLEVX . . . . . . . . . . . . .  	L NEAR	1444	CSEG
POLLEV . . . . . . . . . . . . .  	N PROC	1426	CSEG	Global	Length = 001F
PRTMAP . . . . . . . . . . . . .  	N PROC	0079	CSEG	Global	Length = 0040

RDCLOP . . . . . . . . . . . . .  	L NEAR	101D	CSEG
RDPEN  . . . . . . . . . . . . .  	N PROC	1389	CSEG	Global	Length = 0038
RDPENX . . . . . . . . . . . . .  	L NEAR	13A4	CSEG
RDSTIK . . . . . . . . . . . . .  	N PROC	13FD	CSEG	Global	Length = 0029
RDSTKX . . . . . . . . . . . . .  	L NEAR	1422	CSEG
RDSTLP . . . . . . . . . . . . .  	L NEAR	141B	CSEG
RDTRGX . . . . . . . . . . . . .  	L NEAR	13FA	CSEG
RDTRIG . . . . . . . . . . . . .  	N PROC	13C1	CSEG	Global	Length = 003C
READC  . . . . . . . . . . . . .  	N PROC	1004	CSEG	Global	Length = 0020
RECCOM . . . . . . . . . . . . .  	N PROC	0532	CSEG	Global	Length = 0040
RGHTCX . . . . . . . . . . . . .  	L NEAR	0F57	CSEG
RIGHTC . . . . . . . . . . . . .  	N PROC	0F48	CSEG	Global	Length = 0011

SCALXY . . . . . . . . . . . . .  	N PROC	0F96	CSEG	Global	Length = 0029
SCANL  . . . . . . . . . . . . .  	N PROC	12AA	CSEG	Global	Length = 0074
SCANR  . . . . . . . . . . . . .  	N PROC	11F0	CSEG	Global	Length = 00AA
SCBFX  . . . . . . . . . . . . .  	L NEAR	03F9	CSEG
SCNCLR . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
SCNERR . . . . . . . . . . . . .  	L NEAR	0F14	CSEG
SCNOK  . . . . . . . . . . . . .  	L NEAR	0F10	CSEG
SCNRST . . . . . . . . . . . . .  	N PROC	0745	CSEG	Global	Length = 0011
SCNSWI . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
SCNXLT . . . . . . . . . . . . .  	L BYTE 	08CA	CSEG
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Symbols-8
                                                             

SCRATR . . . . . . . . . . . . .  	N PROC	0CCD	CSEG	Global	Length = 0023
SCRINP . . . . . . . . . . . . .  	N PROC	0A2E	CSEG	Global	Length = 0017
SCROL  . . . . . . . . . . . . .  	L NEAR	0BA8	CSEG
SCROLL . . . . . . . . . . . . .  	N PROC	0A45	CSEG	Global	Length = 00A1
SCROUT . . . . . . . . . . . . .  	N PROC	09CA	CSEG	Global	Length = 0029
SCRRDC . . . . . . . . . . . . .  	N PROC	0B20	CSEG	Length = 000F
SCRRST . . . . . . . . . . . . .  	L NEAR	0A70	CSEG
SCRSAV . . . . . . . . . . . . .  	N PROC	0B49	CSEG	Length = 003E
SCRSTT . . . . . . . . . . . . .  	N PROC	0CF0	CSEG	Global	Length = 00D2
SCRSV2 . . . . . . . . . . . . .  	N PROC	09F3	CSEG	Length = 003B
SCRWRC . . . . . . . . . . . . .  	N PROC	0B2F	CSEG	Length = 001A
SEGINI . . . . . . . . . . . . .  	N PROC	0000	CSEG	Global	Length = 0017
SETATR . . . . . . . . . . . . .  	N PROC	0FFB	CSEG	Global	Length = 0009
SETC . . . . . . . . . . . . . .  	N PROC	1024	CSEG	Global	Length = 000C
SETCBF . . . . . . . . . . . . .  	N PROC	037C	CSEG	Global	Length = 008C
SETCLR . . . . . . . . . . . . .  	N PROC	0DE1	CSEG	Global	Length = 00B1
SETCSR . . . . . . . . . . . . .  	L NEAR	07FE	CSEG
SETCUR . . . . . . . . . . . . .  	L NEAR	0BF7	CSEG
SETERR . . . . . . . . . . . . .  	L NEAR	0E8F	CSEG
SETFBC . . . . . . . . . . . . .  	N PROC	00D8	CSEG	Global	Length = 003B
SETPTR . . . . . . . . . . . . .  	N PROC	1030	CSEG	Length = 0026
SETVMD . . . . . . . . . . . . .  	L NEAR	0820	CSEG
SETVPG . . . . . . . . . . . . .  	N PROC	0AE6	CSEG	Length = 0017
SETVPX . . . . . . . . . . . . .  	L NEAR	0AFB	CSEG
SNDCMX . . . . . . . . . . . . .  	L NEAR	05C2	CSEG
SNDCOM . . . . . . . . . . . . .  	N PROC	0572	CSEG	Global	Length = 0058
SNDLOP . . . . . . . . . . . . .  	L NEAR	0587	CSEG
SNDLPT . . . . . . . . . . . . .  	N PROC	05F9	CSEG	Global	Length = 0028
SNERR  . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
SPCTAB . . . . . . . . . . . . .  	L NEAR	0000	CSEG	External
STACOM . . . . . . . . . . . . .  	N PROC	05CA	CSEG	Global	Length = 002F
STATRX . . . . . . . . . . . . .  	L NEAR	1002	CSEG
STOREC . . . . . . . . . . . . .  	N PROC	0F38	CSEG	Global	Length = 0008
SUB_5643 . . . . . . . . . . . .  	N PROC	0681	CSEG	Length = 0022
SUB_5665 . . . . . . . . . . . .  	N PROC	06A3	CSEG	Length = 0045
SUB_5BF8 . . . . . . . . . . . .  	N PROC	0C30	CSEG	Length = 0061
SUB_5D8A . . . . . . . . . . . .  	N PROC	0DC2	CSEG	Length = 001F
SUB_5E5A . . . . . . . . . . . .  	N PROC	0E92	CSEG	Length = 0011
SUB_6262 . . . . . . . . . . . .  	N PROC	129A	CSEG	Length = 0010
SWIDTH . . . . . . . . . . . . .  	N PROC	0EA3	CSEG	Global	Length = 0071
SWPVEC . . . . . . . . . . . . .  	N PROC	07BF	CSEG	Length = 001D

TDOWNC . . . . . . . . . . . . .  	N PROC	10C9	CSEG	Global	Length = 000B
TIMISR . . . . . . . . . . . . .  	F PROC	071C	CSEG	Length = 0022
TIMRSG . . . . . . . . . . . . .  	L WORD 	0007	DSEG
TMISON . . . . . . . . . . . . .  	L NEAR	1697	CSEG
TMRCHN . . . . . . . . . . . . .  	L NEAR	15C4	CSEG
TMRIS1 . . . . . . . . . . . . .  	L NEAR	14EC	CSEG
TMRISR . . . . . . . . . . . . .  	F PROC	14D8	CSEG	Length = 0100
TMRISX . . . . . . . . . . . . .  	L NEAR	15CE	CSEG
TMRRST . . . . . . . . . . . . .  	L NEAR	15BF	CSEG
TRMCOM . . . . . . . . . . . . .  	N PROC	0621	CSEG	Global	Length = 0060
TUPC . . . . . . . . . . . . . .  	N PROC	10BD	CSEG	Global	Length = 000C
TUPCX  . . . . . . . . . . . . .  	L NEAR	10C7	CSEG
Microsoft (R) Macro Assembler  Version 4.00                 12/20/20 11:37:15
                                                            Symbols-9
                                                             

TWOKEY . . . . . . . . . . . . .  	L NEAR	08AC	CSEG
TXTATR . . . . . . . . . . . . .  	L NEAR	00D0	CSEG

UPC  . . . . . . . . . . . . . .  	L NEAR	0F6A	CSEG	Global

VAR_63A  . . . . . . . . . . . .  	L BYTE 	000A	DSEG
VAR_63B  . . . . . . . . . . . .  	L BYTE 	000B	DSEG
VAR_63C  . . . . . . . . . . . .  	L BYTE 	000C	DSEG
VAR_63E  . . . . . . . . . . . .  	L BYTE 	000E	DSEG
VAR_640  . . . . . . . . . . . .  	L BYTE 	0010	DSEG
VAR_641  . . . . . . . . . . . .  	L BYTE 	0011	DSEG
VAR_642  . . . . . . . . . . . .  	L BYTE 	0012	DSEG
VAR_643  . . . . . . . . . . . .  	L WORD 	0013	DSEG
VAR_645  . . . . . . . . . . . .  	L BYTE 	0015	DSEG
VAR_646  . . . . . . . . . . . .  	L BYTE 	0016	DSEG
VAR_647  . . . . . . . . . . . .  	L WORD 	0017	DSEG
VAR_649  . . . . . . . . . . . .  	L WORD 	0019	DSEG
VAR_64B  . . . . . . . . . . . .  	L BYTE 	001B	DSEG
VAR_64C  . . . . . . . . . . . .  	L BYTE 	001C	DSEG
VAR_64D  . . . . . . . . . . . .  	L BYTE 	001D	DSEG
VAR_64E  . . . . . . . . . . . .  	L WORD 	001E	DSEG
VAR_650  . . . . . . . . . . . .  	L BYTE 	0020	DSEG
VAR_652  . . . . . . . . . . . .  	L BYTE 	0022	DSEG
VAR_655  . . . . . . . . . . . .  	L BYTE 	0025	DSEG
VAR_660  . . . . . . . . . . . .  	L BYTE 	0030	DSEG
VAR_661  . . . . . . . . . . . .  	L WORD 	0031	DSEG
VAR_663  . . . . . . . . . . . .  	L WORD 	0033	DSEG
VAR_665  . . . . . . . . . . . .  	L BYTE 	0035	DSEG
VAR_666  . . . . . . . . . . . .  	L BYTE 	0036	DSEG
VAR_667  . . . . . . . . . . . .  	L WORD 	0037	DSEG
VAR_669  . . . . . . . . . . . .  	L BYTE 	0039	DSEG
VIDPGE . . . . . . . . . . . . .  	L NEAR	0780	CSEG
VISVPG . . . . . . . . . . . . .  	L BYTE 	000D	DSEG

WAITLP . . . . . . . . . . . . .  	L NEAR	162E	CSEG
WIDE40 . . . . . . . . . . . . .  	L NEAR	0EC4	CSEG
WORD_50E9  . . . . . . . . . . .  	L WORD 	012B	CSEG
WORD_64AB  . . . . . . . . . . .  	L WORD 	14D0	CSEG
WRAP . . . . . . . . . . . . . .  	L NEAR	16E4	CSEG
WTDONE . . . . . . . . . . . . .  	L NEAR	1641	CSEG


   4138 Source  Lines
   4138 Total   Lines
    467 Symbols

  34814 Bytes symbol space free

      0 Warning Errors
      0 Severe  Errors
